{"version":3,"file":"ngxs-labs-immer-adapter.js","sources":["@ngxs-labs/immer-adapter/lib/core/immer-adapter/common/utils.ts","@ngxs-labs/immer-adapter/lib/core/immer-adapter/obsolete/produce.ts","@ngxs-labs/immer-adapter/lib/core/immer-adapter/common/immutable-state-context.ts","@ngxs-labs/immer-adapter/lib/core/immer-adapter/obsolete/mutation.decorator.ts","@ngxs-labs/immer-adapter/lib/core/immer-adapter/decorators/immutable-context.decorator.ts","@ngxs-labs/immer-adapter/lib/core/immer-adapter/decorators/immutable-selector.decorator.ts"],"names":["produce","immerProduce"],"mappings":"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","sourcesContent":["import { StateContext } from '@ngxs/store';\n\n/**\n * An utility function, that determines if provided target is defined and not nullable\n *\n * @param target - Value to check for being `undefined` or `null`\n * @returns - True if the passed target is not `undefined` and not `null`\n */\nfunction isDefined<T = unknown>(target: T): boolean {\n  return target !== undefined && target !== null;\n}\n\n/**\n * An utility function, that determines if provided object is valid\n *\n * @param ctx - `StateContext` plain object\n * @returns - True if provided object is valid and has necessary methods\n */\nexport function isValidContext<T = unknown>(ctx: StateContext<T>): boolean {\n  return isDefined(ctx) && typeof ctx.getState === 'function' && typeof ctx.setState === 'function';\n}\n","import { Draft, produce as immerProduce } from 'immer';\nimport { StateContext, StateOperator } from '@ngxs/store';\nimport { isValidContext } from '../common/utils';\n\n\n/**\n * An adapter function for the `produce` from `immer` library\n *\n * @param ctx - Reference to the `StateContext` plain object\n * @param recipe - Function that receives a proxy of the current state\n * @deprecated - use immutable helpers from ngxs v3.4.x\n * @returns - New state or throws an error\n */\nexport function produce<T = any>(ctx: StateContext<T>, recipe: (draft: Draft<T>) => void | T): never | T {\n  const invalidContext = !isValidContext<T>(ctx);\n\n  if (invalidContext) {\n    throw new Error('You should provide `StateContext` object as the first argument of the `produce` function');\n  }\n\n  return ctx.setState(((state: T) => immerProduce(state, recipe)) as StateOperator<T>);\n}\n","import { StateContext, StateOperator } from '@ngxs/store';\nimport { createDraft, finishDraft } from 'immer';\nimport { Observable } from 'rxjs';\n\nexport class ImmutableStateContext<T extends any> implements StateContext<T> {\n  private frozenState: T | null = null;\n\n  constructor(private ctx: StateContext<T>) {\n    ImmutableStateContext.autobindStateContext(this);\n  }\n\n  private static autobindStateContext(context: any): void {\n    for (const prop of Object.getOwnPropertyNames(Object.getPrototypeOf(context))) {\n      if (prop === 'constructor' || typeof context[prop] !== 'function') {\n        continue;\n      }\n\n      context[prop] = context[prop].bind(context);\n    }\n  }\n\n  public getState(): T {\n    this.frozenState = createDraft(this.ctx.getState()) as T;\n    return this.frozenState;\n  }\n\n  public setState(val: T | StateOperator<T>): T {\n    let state: T;\n\n    if (typeof val === 'function') {\n      let newState: T;\n      const oldState: T = createDraft(this.ctx.getState()) as T;\n      const operator: StateOperator<T> = val as StateOperator<T>;\n      const mutatedOldState: T = operator(oldState);\n\n      if (this.frozenState === mutatedOldState) {\n        newState = finishDraft(this.frozenState);\n        finishDraft(oldState);\n      } else {\n        const mutateOutsideOperator: boolean = oldState !== mutatedOldState;\n        if (mutateOutsideOperator) {\n          newState = mutatedOldState;\n          finishDraft(oldState);\n        } else {\n          newState = finishDraft(mutatedOldState);\n        }\n      }\n\n      state = newState;\n    } else {\n      state = finishDraft(val);\n    }\n\n    this.frozenState = null;\n    return this.ctx.setState(state);\n  }\n\n  public patchState(val: Partial<T>): T {\n    return this.ctx.patchState(finishDraft(val) as Partial<T>);\n  }\n\n  public dispatch(actions: any | any[]): Observable<void> {\n    return this.ctx.dispatch(actions);\n  }\n}\n","import { StateContext } from '@ngxs/store';\nimport { ImmutableStateContext } from '../common/immutable-state-context';\n\n/**\n * @deprecated - use ImmutableContext instead Mutation\n */\nexport function Mutation(): Function {\n  return function(_target: Object, _key: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n    const method = descriptor.value;\n\n    descriptor.value = function(ctx: StateContext<any>, action: any, ...args: any[]) {\n      return method.apply(this, [new ImmutableStateContext(ctx), action, ...args]);\n    };\n\n    return descriptor;\n  };\n}\n","import { StateContext } from '@ngxs/store';\n\nimport { ImmutableStateContext } from '../common/immutable-state-context';\n\nexport function ImmutableContext(): Function {\n  return function(_target: Object, _key: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n    const method = descriptor.value;\n\n    descriptor.value = function(ctx: StateContext<any>, action: any, ...args: any[]) {\n      return method.apply(this, [new ImmutableStateContext(ctx), action, ...args]);\n    };\n\n    return descriptor;\n  };\n}\n","import { createDraft } from 'immer';\n\nexport function ImmutableSelector(): Function {\n  return function(_target: Object, _key: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n    const method = descriptor.value;\n\n    descriptor.value = function(state: any, ...args: any[]) {\n      return method.apply(this, [createDraft(state), ...args]);\n    };\n\n    return descriptor;\n  };\n}\n"]}