/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createDraft, finishDraft } from 'immer';
/**
 * @template T
 */
export class ImmutableStateContext {
    /**
     * @param {?} ctx
     */
    constructor(ctx) {
        this.ctx = ctx;
        this.frozenState = null;
        ImmutableStateContext.autobindStateContext(this);
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    static autobindStateContext(context) {
        for (const prop of Object.getOwnPropertyNames(Object.getPrototypeOf(context))) {
            if (prop === 'constructor' || typeof context[prop] !== 'function') {
                continue;
            }
            context[prop] = context[prop].bind(context);
        }
    }
    /**
     * @return {?}
     */
    getState() {
        this.frozenState = (/** @type {?} */ (createDraft(this.ctx.getState())));
        return this.frozenState;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setState(val) {
        /** @type {?} */
        let state;
        if (typeof val === 'function') {
            /** @type {?} */
            let newState;
            /** @type {?} */
            const oldState = (/** @type {?} */ (createDraft(this.ctx.getState())));
            /** @type {?} */
            const operator = (/** @type {?} */ (val));
            /** @type {?} */
            const mutatedOldState = operator(oldState);
            if (this.frozenState === mutatedOldState) {
                newState = finishDraft(this.frozenState);
                finishDraft(oldState);
            }
            else {
                /** @type {?} */
                const mutateOutsideOperator = oldState !== mutatedOldState;
                if (mutateOutsideOperator) {
                    newState = mutatedOldState;
                    finishDraft(oldState);
                }
                else {
                    newState = finishDraft(mutatedOldState);
                }
            }
            state = newState;
        }
        else {
            state = finishDraft(val);
        }
        this.frozenState = null;
        return this.ctx.setState(state);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    patchState(val) {
        return this.ctx.patchState((/** @type {?} */ (finishDraft(val))));
    }
    /**
     * @param {?} actions
     * @return {?}
     */
    dispatch(actions) {
        return this.ctx.dispatch(actions);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImmutableStateContext.prototype.frozenState;
    /**
     * @type {?}
     * @private
     */
    ImmutableStateContext.prototype.ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1tdXRhYmxlLXN0YXRlLWNvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy1sYWJzL2ltbWVyLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9pbW1lci1hZGFwdGVyL2NvbW1vbi9pbW11dGFibGUtc3RhdGUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7Ozs7QUFHakQsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUdoQyxZQUFvQixHQUFvQjtRQUFwQixRQUFHLEdBQUgsR0FBRyxDQUFpQjtRQUZoQyxnQkFBVyxHQUFhLElBQUksQ0FBQztRQUduQyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7Ozs7SUFFTyxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBWTtRQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDN0UsSUFBSSxJQUFJLEtBQUssYUFBYSxJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDakUsU0FBUzthQUNWO1lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs7O0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxXQUFXLEdBQUcsbUJBQUEsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBSyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVNLFFBQVEsQ0FBQyxHQUF5Qjs7WUFDbkMsS0FBUTtRQUVaLElBQUksT0FBTyxHQUFHLEtBQUssVUFBVSxFQUFFOztnQkFDekIsUUFBVzs7a0JBQ1QsUUFBUSxHQUFNLG1CQUFBLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUs7O2tCQUNuRCxRQUFRLEdBQXFCLG1CQUFBLEdBQUcsRUFBb0I7O2tCQUNwRCxlQUFlLEdBQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUU3QyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssZUFBZSxFQUFFO2dCQUN4QyxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDekMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNOztzQkFDQyxxQkFBcUIsR0FBWSxRQUFRLEtBQUssZUFBZTtnQkFDbkUsSUFBSSxxQkFBcUIsRUFBRTtvQkFDekIsUUFBUSxHQUFHLGVBQWUsQ0FBQztvQkFDM0IsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN2QjtxQkFBTTtvQkFDTCxRQUFRLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUN6QzthQUNGO1lBRUQsS0FBSyxHQUFHLFFBQVEsQ0FBQztTQUNsQjthQUFNO1lBQ0wsS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFTSxVQUFVLENBQUMsR0FBZTtRQUMvQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLG1CQUFBLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBYyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFTSxRQUFRLENBQUMsT0FBb0I7UUFDbEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7Ozs7OztJQTNEQyw0Q0FBcUM7Ozs7O0lBRXpCLG9DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlQ29udGV4dCwgU3RhdGVPcGVyYXRvciB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IGNyZWF0ZURyYWZ0LCBmaW5pc2hEcmFmdCB9IGZyb20gJ2ltbWVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNsYXNzIEltbXV0YWJsZVN0YXRlQ29udGV4dDxUIGV4dGVuZHMgYW55PiBpbXBsZW1lbnRzIFN0YXRlQ29udGV4dDxUPiB7XG4gIHByaXZhdGUgZnJvemVuU3RhdGU6IFQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGN0eDogU3RhdGVDb250ZXh0PFQ+KSB7XG4gICAgSW1tdXRhYmxlU3RhdGVDb250ZXh0LmF1dG9iaW5kU3RhdGVDb250ZXh0KHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXV0b2JpbmRTdGF0ZUNvbnRleHQoY29udGV4dDogYW55KTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihjb250ZXh0KSkpIHtcbiAgICAgIGlmIChwcm9wID09PSAnY29uc3RydWN0b3InIHx8IHR5cGVvZiBjb250ZXh0W3Byb3BdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0W3Byb3BdID0gY29udGV4dFtwcm9wXS5iaW5kKGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZSgpOiBUIHtcbiAgICB0aGlzLmZyb3plblN0YXRlID0gY3JlYXRlRHJhZnQodGhpcy5jdHguZ2V0U3RhdGUoKSkgYXMgVDtcbiAgICByZXR1cm4gdGhpcy5mcm96ZW5TdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTdGF0ZSh2YWw6IFQgfCBTdGF0ZU9wZXJhdG9yPFQ+KTogVCB7XG4gICAgbGV0IHN0YXRlOiBUO1xuXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGxldCBuZXdTdGF0ZTogVDtcbiAgICAgIGNvbnN0IG9sZFN0YXRlOiBUID0gY3JlYXRlRHJhZnQodGhpcy5jdHguZ2V0U3RhdGUoKSkgYXMgVDtcbiAgICAgIGNvbnN0IG9wZXJhdG9yOiBTdGF0ZU9wZXJhdG9yPFQ+ID0gdmFsIGFzIFN0YXRlT3BlcmF0b3I8VD47XG4gICAgICBjb25zdCBtdXRhdGVkT2xkU3RhdGU6IFQgPSBvcGVyYXRvcihvbGRTdGF0ZSk7XG5cbiAgICAgIGlmICh0aGlzLmZyb3plblN0YXRlID09PSBtdXRhdGVkT2xkU3RhdGUpIHtcbiAgICAgICAgbmV3U3RhdGUgPSBmaW5pc2hEcmFmdCh0aGlzLmZyb3plblN0YXRlKTtcbiAgICAgICAgZmluaXNoRHJhZnQob2xkU3RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbXV0YXRlT3V0c2lkZU9wZXJhdG9yOiBib29sZWFuID0gb2xkU3RhdGUgIT09IG11dGF0ZWRPbGRTdGF0ZTtcbiAgICAgICAgaWYgKG11dGF0ZU91dHNpZGVPcGVyYXRvcikge1xuICAgICAgICAgIG5ld1N0YXRlID0gbXV0YXRlZE9sZFN0YXRlO1xuICAgICAgICAgIGZpbmlzaERyYWZ0KG9sZFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdTdGF0ZSA9IGZpbmlzaERyYWZ0KG11dGF0ZWRPbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUgPSBmaW5pc2hEcmFmdCh2YWwpO1xuICAgIH1cblxuICAgIHRoaXMuZnJvemVuU3RhdGUgPSBudWxsO1xuICAgIHJldHVybiB0aGlzLmN0eC5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cblxuICBwdWJsaWMgcGF0Y2hTdGF0ZSh2YWw6IFBhcnRpYWw8VD4pOiBUIHtcbiAgICByZXR1cm4gdGhpcy5jdHgucGF0Y2hTdGF0ZShmaW5pc2hEcmFmdCh2YWwpIGFzIFBhcnRpYWw8VD4pO1xuICB9XG5cbiAgcHVibGljIGRpc3BhdGNoKGFjdGlvbnM6IGFueSB8IGFueVtdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY3R4LmRpc3BhdGNoKGFjdGlvbnMpO1xuICB9XG59XG4iXX0=