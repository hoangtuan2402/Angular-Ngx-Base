/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { produce as immerProduce } from 'immer';
import { isValidContext } from '../common/utils';
/**
 * An adapter function for the `produce` from `immer` library
 *
 * @deprecated - use immutable helpers from ngxs v3.4.x
 * @template T
 * @param {?} ctx - Reference to the `StateContext` plain object
 * @param {?} recipe - Function that receives a proxy of the current state
 * @return {?} - New state or throws an error
 */
export function produce(ctx, recipe) {
    /** @type {?} */
    var invalidContext = !isValidContext(ctx);
    if (invalidContext) {
        throw new Error('You should provide `StateContext` object as the first argument of the `produce` function');
    }
    return ctx.setState((/** @type {?} */ (((/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return immerProduce(state, recipe); })))));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzLWxhYnMvaW1tZXItYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2ltbWVyLWFkYXB0ZXIvb2Jzb2xldGUvcHJvZHVjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFTLE9BQU8sSUFBSSxZQUFZLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFdkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7O0FBV2pELE1BQU0sVUFBVSxPQUFPLENBQVUsR0FBb0IsRUFBRSxNQUFxQzs7UUFDcEYsY0FBYyxHQUFHLENBQUMsY0FBYyxDQUFJLEdBQUcsQ0FBQztJQUU5QyxJQUFJLGNBQWMsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDBGQUEwRixDQUFDLENBQUM7S0FDN0c7SUFFRCxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQUE7Ozs7SUFBQyxVQUFDLEtBQVEsSUFBSyxPQUFBLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQTNCLENBQTJCLEVBQUMsRUFBb0IsQ0FBQyxDQUFDO0FBQ3ZGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEcmFmdCwgcHJvZHVjZSBhcyBpbW1lclByb2R1Y2UgfSBmcm9tICdpbW1lcic7XG5pbXBvcnQgeyBTdGF0ZUNvbnRleHQsIFN0YXRlT3BlcmF0b3IgfSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyBpc1ZhbGlkQ29udGV4dCB9IGZyb20gJy4uL2NvbW1vbi91dGlscyc7XG5cblxuLyoqXG4gKiBBbiBhZGFwdGVyIGZ1bmN0aW9uIGZvciB0aGUgYHByb2R1Y2VgIGZyb20gYGltbWVyYCBsaWJyYXJ5XG4gKlxuICogQHBhcmFtIGN0eCAtIFJlZmVyZW5jZSB0byB0aGUgYFN0YXRlQ29udGV4dGAgcGxhaW4gb2JqZWN0XG4gKiBAcGFyYW0gcmVjaXBlIC0gRnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHByb3h5IG9mIHRoZSBjdXJyZW50IHN0YXRlXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBpbW11dGFibGUgaGVscGVycyBmcm9tIG5neHMgdjMuNC54XG4gKiBAcmV0dXJucyAtIE5ldyBzdGF0ZSBvciB0aHJvd3MgYW4gZXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2R1Y2U8VCA9IGFueT4oY3R4OiBTdGF0ZUNvbnRleHQ8VD4sIHJlY2lwZTogKGRyYWZ0OiBEcmFmdDxUPikgPT4gdm9pZCB8IFQpOiBuZXZlciB8IFQge1xuICBjb25zdCBpbnZhbGlkQ29udGV4dCA9ICFpc1ZhbGlkQ29udGV4dDxUPihjdHgpO1xuXG4gIGlmIChpbnZhbGlkQ29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IHNob3VsZCBwcm92aWRlIGBTdGF0ZUNvbnRleHRgIG9iamVjdCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGBwcm9kdWNlYCBmdW5jdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIGN0eC5zZXRTdGF0ZSgoKHN0YXRlOiBUKSA9PiBpbW1lclByb2R1Y2Uoc3RhdGUsIHJlY2lwZSkpIGFzIFN0YXRlT3BlcmF0b3I8VD4pO1xufVxuIl19