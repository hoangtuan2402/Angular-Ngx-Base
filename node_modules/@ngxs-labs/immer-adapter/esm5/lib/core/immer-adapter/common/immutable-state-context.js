/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { createDraft, finishDraft } from 'immer';
/**
 * @template T
 */
var /**
 * @template T
 */
ImmutableStateContext = /** @class */ (function () {
    function ImmutableStateContext(ctx) {
        this.ctx = ctx;
        this.frozenState = null;
        ImmutableStateContext.autobindStateContext(this);
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    ImmutableStateContext.autobindStateContext = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.getOwnPropertyNames(Object.getPrototypeOf(context))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var prop = _c.value;
                if (prop === 'constructor' || typeof context[prop] !== 'function') {
                    continue;
                }
                context[prop] = context[prop].bind(context);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    ImmutableStateContext.prototype.getState = /**
     * @return {?}
     */
    function () {
        this.frozenState = (/** @type {?} */ (createDraft(this.ctx.getState())));
        return this.frozenState;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    ImmutableStateContext.prototype.setState = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var state;
        if (typeof val === 'function') {
            /** @type {?} */
            var newState = void 0;
            /** @type {?} */
            var oldState = (/** @type {?} */ (createDraft(this.ctx.getState())));
            /** @type {?} */
            var operator = (/** @type {?} */ (val));
            /** @type {?} */
            var mutatedOldState = operator(oldState);
            if (this.frozenState === mutatedOldState) {
                newState = finishDraft(this.frozenState);
                finishDraft(oldState);
            }
            else {
                /** @type {?} */
                var mutateOutsideOperator = oldState !== mutatedOldState;
                if (mutateOutsideOperator) {
                    newState = mutatedOldState;
                    finishDraft(oldState);
                }
                else {
                    newState = finishDraft(mutatedOldState);
                }
            }
            state = newState;
        }
        else {
            state = finishDraft(val);
        }
        this.frozenState = null;
        return this.ctx.setState(state);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    ImmutableStateContext.prototype.patchState = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return this.ctx.patchState((/** @type {?} */ (finishDraft(val))));
    };
    /**
     * @param {?} actions
     * @return {?}
     */
    ImmutableStateContext.prototype.dispatch = /**
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        return this.ctx.dispatch(actions);
    };
    return ImmutableStateContext;
}());
/**
 * @template T
 */
export { ImmutableStateContext };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImmutableStateContext.prototype.frozenState;
    /**
     * @type {?}
     * @private
     */
    ImmutableStateContext.prototype.ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1tdXRhYmxlLXN0YXRlLWNvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy1sYWJzL2ltbWVyLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9pbW1lci1hZGFwdGVyL2NvbW1vbi9pbW11dGFibGUtc3RhdGUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0sT0FBTyxDQUFDOzs7O0FBR2pEOzs7O0lBR0UsK0JBQW9CLEdBQW9CO1FBQXBCLFFBQUcsR0FBSCxHQUFHLENBQWlCO1FBRmhDLGdCQUFXLEdBQWEsSUFBSSxDQUFDO1FBR25DLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUVjLDBDQUFvQjs7Ozs7SUFBbkMsVUFBb0MsT0FBWTs7O1lBQzlDLEtBQW1CLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO2dCQUExRSxJQUFNLElBQUksV0FBQTtnQkFDYixJQUFJLElBQUksS0FBSyxhQUFhLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO29CQUNqRSxTQUFTO2lCQUNWO2dCQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdDOzs7Ozs7Ozs7SUFDSCxDQUFDOzs7O0lBRU0sd0NBQVE7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBQSxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFLLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRU0sd0NBQVE7Ozs7SUFBZixVQUFnQixHQUF5Qjs7WUFDbkMsS0FBUTtRQUVaLElBQUksT0FBTyxHQUFHLEtBQUssVUFBVSxFQUFFOztnQkFDekIsUUFBUSxTQUFHOztnQkFDVCxRQUFRLEdBQU0sbUJBQUEsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBSzs7Z0JBQ25ELFFBQVEsR0FBcUIsbUJBQUEsR0FBRyxFQUFvQjs7Z0JBQ3BELGVBQWUsR0FBTSxRQUFRLENBQUMsUUFBUSxDQUFDO1lBRTdDLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxlQUFlLEVBQUU7Z0JBQ3hDLFFBQVEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN6QyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdkI7aUJBQU07O29CQUNDLHFCQUFxQixHQUFZLFFBQVEsS0FBSyxlQUFlO2dCQUNuRSxJQUFJLHFCQUFxQixFQUFFO29CQUN6QixRQUFRLEdBQUcsZUFBZSxDQUFDO29CQUMzQixXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3ZCO3FCQUFNO29CQUNMLFFBQVEsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQ3pDO2FBQ0Y7WUFFRCxLQUFLLEdBQUcsUUFBUSxDQUFDO1NBQ2xCO2FBQU07WUFDTCxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVNLDBDQUFVOzs7O0lBQWpCLFVBQWtCLEdBQWU7UUFDL0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxtQkFBQSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQWMsQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRU0sd0NBQVE7Ozs7SUFBZixVQUFnQixPQUFvQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUE1REQsSUE0REM7Ozs7Ozs7Ozs7SUEzREMsNENBQXFDOzs7OztJQUV6QixvQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZUNvbnRleHQsIFN0YXRlT3BlcmF0b3IgfSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyBjcmVhdGVEcmFmdCwgZmluaXNoRHJhZnQgfSBmcm9tICdpbW1lcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBJbW11dGFibGVTdGF0ZUNvbnRleHQ8VCBleHRlbmRzIGFueT4gaW1wbGVtZW50cyBTdGF0ZUNvbnRleHQ8VD4ge1xuICBwcml2YXRlIGZyb3plblN0YXRlOiBUIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjdHg6IFN0YXRlQ29udGV4dDxUPikge1xuICAgIEltbXV0YWJsZVN0YXRlQ29udGV4dC5hdXRvYmluZFN0YXRlQ29udGV4dCh0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGF1dG9iaW5kU3RhdGVDb250ZXh0KGNvbnRleHQ6IGFueSk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2YoY29udGV4dCkpKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCB0eXBlb2YgY29udGV4dFtwcm9wXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dFtwcm9wXSA9IGNvbnRleHRbcHJvcF0uYmluZChjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhdGUoKTogVCB7XG4gICAgdGhpcy5mcm96ZW5TdGF0ZSA9IGNyZWF0ZURyYWZ0KHRoaXMuY3R4LmdldFN0YXRlKCkpIGFzIFQ7XG4gICAgcmV0dXJuIHRoaXMuZnJvemVuU3RhdGU7XG4gIH1cblxuICBwdWJsaWMgc2V0U3RhdGUodmFsOiBUIHwgU3RhdGVPcGVyYXRvcjxUPik6IFQge1xuICAgIGxldCBzdGF0ZTogVDtcblxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsZXQgbmV3U3RhdGU6IFQ7XG4gICAgICBjb25zdCBvbGRTdGF0ZTogVCA9IGNyZWF0ZURyYWZ0KHRoaXMuY3R4LmdldFN0YXRlKCkpIGFzIFQ7XG4gICAgICBjb25zdCBvcGVyYXRvcjogU3RhdGVPcGVyYXRvcjxUPiA9IHZhbCBhcyBTdGF0ZU9wZXJhdG9yPFQ+O1xuICAgICAgY29uc3QgbXV0YXRlZE9sZFN0YXRlOiBUID0gb3BlcmF0b3Iob2xkU3RhdGUpO1xuXG4gICAgICBpZiAodGhpcy5mcm96ZW5TdGF0ZSA9PT0gbXV0YXRlZE9sZFN0YXRlKSB7XG4gICAgICAgIG5ld1N0YXRlID0gZmluaXNoRHJhZnQodGhpcy5mcm96ZW5TdGF0ZSk7XG4gICAgICAgIGZpbmlzaERyYWZ0KG9sZFN0YXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG11dGF0ZU91dHNpZGVPcGVyYXRvcjogYm9vbGVhbiA9IG9sZFN0YXRlICE9PSBtdXRhdGVkT2xkU3RhdGU7XG4gICAgICAgIGlmIChtdXRhdGVPdXRzaWRlT3BlcmF0b3IpIHtcbiAgICAgICAgICBuZXdTdGF0ZSA9IG11dGF0ZWRPbGRTdGF0ZTtcbiAgICAgICAgICBmaW5pc2hEcmFmdChvbGRTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3U3RhdGUgPSBmaW5pc2hEcmFmdChtdXRhdGVkT2xkU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXRlID0gbmV3U3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0gZmluaXNoRHJhZnQodmFsKTtcbiAgICB9XG5cbiAgICB0aGlzLmZyb3plblN0YXRlID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5jdHguc2V0U3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgcHVibGljIHBhdGNoU3RhdGUodmFsOiBQYXJ0aWFsPFQ+KTogVCB7XG4gICAgcmV0dXJuIHRoaXMuY3R4LnBhdGNoU3RhdGUoZmluaXNoRHJhZnQodmFsKSBhcyBQYXJ0aWFsPFQ+KTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwYXRjaChhY3Rpb25zOiBhbnkgfCBhbnlbXSk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmN0eC5kaXNwYXRjaChhY3Rpb25zKTtcbiAgfVxufVxuIl19