(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('immer')) :
    typeof define === 'function' && define.amd ? define('@ngxs-labs/immer-adapter', ['exports', 'immer'], factory) :
    (factory((global['ngxs-labs'] = global['ngxs-labs'] || {}, global['ngxs-labs']['immer-adapter'] = {}),global.immer));
}(this, (function (exports,immer) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An utility function, that determines if provided target is defined and not nullable
     *
     * @template T
     * @param {?} target - Value to check for being `undefined` or `null`
     * @return {?} - True if the passed target is not `undefined` and not `null`
     */
    function isDefined(target) {
        return target !== undefined && target !== null;
    }
    /**
     * An utility function, that determines if provided object is valid
     *
     * @template T
     * @param {?} ctx - `StateContext` plain object
     * @return {?} - True if provided object is valid and has necessary methods
     */
    function isValidContext(ctx) {
        return isDefined(ctx) && typeof ctx.getState === 'function' && typeof ctx.setState === 'function';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An adapter function for the `produce` from `immer` library
     *
     * @deprecated - use immutable helpers from ngxs v3.4.x
     * @template T
     * @param {?} ctx - Reference to the `StateContext` plain object
     * @param {?} recipe - Function that receives a proxy of the current state
     * @return {?} - New state or throws an error
     */
    function produce(ctx, recipe) {
        /** @type {?} */
        var invalidContext = !isValidContext(ctx);
        if (invalidContext) {
            throw new Error('You should provide `StateContext` object as the first argument of the `produce` function');
        }
        return ctx.setState(( /** @type {?} */((( /**
         * @param {?} state
         * @return {?}
         */function (state) { return immer.produce(state, recipe); })))));
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ ImmutableStateContext = /** @class */ (function () {
        function ImmutableStateContext(ctx) {
            this.ctx = ctx;
            this.frozenState = null;
            ImmutableStateContext.autobindStateContext(this);
        }
        /**
         * @private
         * @param {?} context
         * @return {?}
         */
        ImmutableStateContext.autobindStateContext = /**
         * @private
         * @param {?} context
         * @return {?}
         */
            function (context) {
                var e_1, _a;
                try {
                    for (var _b = __values(Object.getOwnPropertyNames(Object.getPrototypeOf(context))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var prop = _c.value;
                        if (prop === 'constructor' || typeof context[prop] !== 'function') {
                            continue;
                        }
                        context[prop] = context[prop].bind(context);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @return {?}
         */
        ImmutableStateContext.prototype.getState = /**
         * @return {?}
         */
            function () {
                this.frozenState = ( /** @type {?} */(immer.createDraft(this.ctx.getState())));
                return this.frozenState;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        ImmutableStateContext.prototype.setState = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                /** @type {?} */
                var state;
                if (typeof val === 'function') {
                    /** @type {?} */
                    var newState = void 0;
                    /** @type {?} */
                    var oldState = ( /** @type {?} */(immer.createDraft(this.ctx.getState())));
                    /** @type {?} */
                    var operator = ( /** @type {?} */(val));
                    /** @type {?} */
                    var mutatedOldState = operator(oldState);
                    if (this.frozenState === mutatedOldState) {
                        newState = immer.finishDraft(this.frozenState);
                        immer.finishDraft(oldState);
                    }
                    else {
                        /** @type {?} */
                        var mutateOutsideOperator = oldState !== mutatedOldState;
                        if (mutateOutsideOperator) {
                            newState = mutatedOldState;
                            immer.finishDraft(oldState);
                        }
                        else {
                            newState = immer.finishDraft(mutatedOldState);
                        }
                    }
                    state = newState;
                }
                else {
                    state = immer.finishDraft(val);
                }
                this.frozenState = null;
                return this.ctx.setState(state);
            };
        /**
         * @param {?} val
         * @return {?}
         */
        ImmutableStateContext.prototype.patchState = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                return this.ctx.patchState(( /** @type {?} */(immer.finishDraft(val))));
            };
        /**
         * @param {?} actions
         * @return {?}
         */
        ImmutableStateContext.prototype.dispatch = /**
         * @param {?} actions
         * @return {?}
         */
            function (actions) {
                return this.ctx.dispatch(actions);
            };
        return ImmutableStateContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated - use ImmutableContext instead Mutation
     * @return {?}
     */
    function Mutation() {
        return ( /**
         * @param {?} _target
         * @param {?} _key
         * @param {?} descriptor
         * @return {?}
         */function (_target, _key, descriptor) {
            /** @type {?} */
            var method = descriptor.value;
            descriptor.value = ( /**
             * @param {?} ctx
             * @param {?} action
             * @param {...?} args
             * @return {?}
             */function (ctx, action) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                return method.apply(this, __spread([new ImmutableStateContext(ctx), action], args));
            });
            return descriptor;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function ImmutableContext() {
        return ( /**
         * @param {?} _target
         * @param {?} _key
         * @param {?} descriptor
         * @return {?}
         */function (_target, _key, descriptor) {
            /** @type {?} */
            var method = descriptor.value;
            descriptor.value = ( /**
             * @param {?} ctx
             * @param {?} action
             * @param {...?} args
             * @return {?}
             */function (ctx, action) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                return method.apply(this, __spread([new ImmutableStateContext(ctx), action], args));
            });
            return descriptor;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function ImmutableSelector() {
        return ( /**
         * @param {?} _target
         * @param {?} _key
         * @param {?} descriptor
         * @return {?}
         */function (_target, _key, descriptor) {
            /** @type {?} */
            var method = descriptor.value;
            descriptor.value = ( /**
             * @param {?} state
             * @param {...?} args
             * @return {?}
             */function (state) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return method.apply(this, __spread([immer.createDraft(state)], args));
            });
            return descriptor;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ImmutableContext = ImmutableContext;
    exports.ImmutableSelector = ImmutableSelector;
    exports.produce = produce;
    exports.Mutation = Mutation;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngxs-labs-immer-adapter.umd.js.map