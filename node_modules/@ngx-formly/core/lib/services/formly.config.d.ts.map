{"version":3,"file":"formly.config.d.ts","sources":["formly.config.d.ts"],"names":[],"mappingssourcesContent":["import { InjectionToken, ComponentRef } from '@angular/core';\r\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\r\nimport { FieldType } from './../templates/field.type';\r\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\r\nimport { Observable } from 'rxjs';\r\nexport declare const FORMLY_CONFIG: InjectionToken<FormlyConfig>;\r\n/** @experimental */\r\nexport interface FormlyExtension {\r\n    prePopulate?(field: FormlyFieldConfig): void;\r\n    onPopulate?(field: FormlyFieldConfig): void;\r\n    postPopulate?(field: FormlyFieldConfig): void;\r\n}\r\n/**\r\n * Maintains list of formly field directive types. This can be used to register new field templates.\r\n */\r\nexport declare class FormlyConfig {\r\n    types: {\r\n        [name: string]: TypeOption;\r\n    };\r\n    validators: {\r\n        [name: string]: ValidatorOption;\r\n    };\r\n    wrappers: {\r\n        [name: string]: WrapperOption;\r\n    };\r\n    messages: {\r\n        [name: string]: ValidationMessageOption['message'];\r\n    };\r\n    templateManipulators: {\r\n        preWrapper: ManipulatorWrapper[];\r\n        postWrapper: ManipulatorWrapper[];\r\n    };\r\n    extras: ConfigOption['extras'];\r\n    extensions: {\r\n        [name: string]: FormlyExtension;\r\n    };\r\n    addConfig(config: ConfigOption): void;\r\n    setType(options: TypeOption | TypeOption[]): void;\r\n    getType(name: string): TypeOption;\r\n    getMergedField(field?: FormlyFieldConfig): any;\r\n    /** @internal */\r\n    resolveFieldTypeRef(field?: FormlyFieldConfigCache): ComponentRef<FieldType>;\r\n    setWrapper(options: WrapperOption): void;\r\n    getWrapper(name: string): WrapperOption;\r\n    setTypeWrapper(type: string, name: string): void;\r\n    setValidator(options: ValidatorOption): void;\r\n    getValidator(name: string): ValidatorOption;\r\n    addValidatorMessage(name: string, message: ValidationMessageOption['message']): void;\r\n    getValidatorMessage(name: string): string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\r\n    setManipulator(manipulator: ManipulatorOption): void;\r\n    private mergeExtendedType;\r\n}\r\nexport interface TypeOption {\r\n    name: string;\r\n    component?: any;\r\n    wrappers?: string[];\r\n    extends?: string;\r\n    defaultOptions?: FormlyFieldConfig;\r\n}\r\nexport interface WrapperOption {\r\n    name: string;\r\n    component: any;\r\n    types?: string[];\r\n}\r\nexport interface FieldValidatorFn {\r\n    (c: AbstractControl, field: FormlyFieldConfig, options?: {\r\n        [id: string]: any;\r\n    }): ValidationErrors | null;\r\n}\r\nexport interface ValidatorOption {\r\n    name: string;\r\n    validation: FieldValidatorFn;\r\n    options?: {\r\n        [id: string]: any;\r\n    };\r\n}\r\nexport interface ExtensionOption {\r\n    name: string;\r\n    extension: FormlyExtension;\r\n}\r\nexport interface ValidationMessageOption {\r\n    name: string;\r\n    message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\r\n}\r\nexport interface ManipulatorOption {\r\n    class?: {\r\n        new (): any;\r\n    };\r\n    method?: string;\r\n}\r\nexport interface ManipulatorWrapper {\r\n    (f: FormlyFieldConfig): string;\r\n}\r\nexport interface TemplateManipulators {\r\n    preWrapper?: ManipulatorWrapper[];\r\n    postWrapper?: ManipulatorWrapper[];\r\n}\r\nexport interface ConfigOption {\r\n    types?: TypeOption[];\r\n    wrappers?: WrapperOption[];\r\n    validators?: ValidatorOption[];\r\n    extensions?: ExtensionOption[];\r\n    validationMessages?: ValidationMessageOption[];\r\n    /** @deprecated use `extensions` instead */\r\n    manipulators?: ManipulatorOption[];\r\n    extras?: {\r\n        /** @deprecated use `extensions` instead */\r\n        fieldTransform?: any;\r\n        immutable?: boolean;\r\n        showError?: (field: FieldType) => boolean;\r\n        /**\r\n         * Defines the option which formly rely on to check field expression properties.\r\n         * - `modelChange`: perform a check when the value of the form control changes (Will be set by default in the next major version).\r\n         * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\r\n         *\r\n         * Defaults to `changeDetectionCheck`.\r\n         */\r\n        checkExpressionOn?: 'modelChange' | 'changeDetectionCheck';\r\n        /**\r\n         * Whether to lazily render field components or not when marked as hidden.\r\n         * - `true`: lazily render field components (Will be set by default in the next major version).\r\n         * - `false`: render field components and use CSS to control their visibility.\r\n         *\r\n         * Defaults to `false`.\r\n         */\r\n        lazyRender?: boolean;\r\n        /**\r\n         * When true, reset the value of hidden fields.\r\n         *\r\n         * Defaults to `false`.\r\n         */\r\n        resetFieldOnHide?: boolean;\r\n    };\r\n}\r\n"]}