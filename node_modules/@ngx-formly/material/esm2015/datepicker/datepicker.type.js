/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatDatepickerInput } from '@angular/material/datepicker';
import { FormlyConfig, ÉµwrapProperty as wrapProperty } from '@ngx-formly/core';
export class FormlyFieldDatepicker extends FieldType {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = config;
        this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                    dateInput: (/**
                     * @return {?}
                     */
                    () => { }),
                    dateChange: (/**
                     * @return {?}
                     */
                    () => { }),
                    monthSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                    yearSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                },
            },
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // temporary fix for https://github.com/angular/components/issues/16761
        if (this.config.getValidatorMessage('matDatepickerParse')) {
            wrapProperty(this.field.formControl, 'errors', (/**
             * @param {?} __0
             * @return {?}
             */
            ({ currentValue }) => {
                if (currentValue && currentValue.required && currentValue.matDatepickerParse) {
                    /** @type {?} */
                    const errors = Object.keys(currentValue)
                        .sort((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    prop => prop === 'matDatepickerParse' ? -1 : 0))
                        .reduce((/**
                     * @param {?} errors
                     * @param {?} prop
                     * @return {?}
                     */
                    (errors, prop) => (Object.assign({}, errors, { [prop]: currentValue[prop] }))), {});
                    ((/** @type {?} */ (this.field.formControl)))['___$errors'] = errors;
                }
            }));
        }
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        () => {
            switch (this.to.datepickerOptions.datepickerTogglePosition) {
                case 'suffix':
                    this.to._matSuffix = this.datepickerToggle;
                    break;
                case 'prefix':
                    this.to._matPrefix = this.datepickerToggle;
                    break;
            }
            ((/** @type {?} */ (this.options)))._markForCheck(this.field);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.fieldErrorsObserver && this.fieldErrorsObserver();
    }
}
FormlyFieldDatepicker.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-datepicker',
                template: `
    <input matInput
      [id]="id"
      [errorStateMatcher]="errorStateMatcher"
      [formControl]="formControl"
      [matDatepicker]="picker"
      [matDatepickerFilter]="to.datepickerOptions.filter"
      [max]="to.datepickerOptions.max"
      [min]="to.datepickerOptions.min"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [tabindex]="to.tabindex"
      [readonly]="to.readonly"
      [required]="to.required"
      (dateInput)="to.datepickerOptions.dateInput(field, $event)"
      (dateChange)="to.datepickerOptions.dateChange(field, $event)">
    <ng-template #datepickerToggle>
      <mat-datepicker-toggle [disabled]="to.disabled" [for]="picker"></mat-datepicker-toggle>
    </ng-template>
    <mat-datepicker #picker
      [color]="to.color"
      [dateClass]="to.datepickerOptions.dateClass"
      [disabled]="to.datepickerOptions.disabled"
      [opened]="to.datepickerOptions.opened"
      [panelClass]="to.datepickerOptions.panelClass"
      [startAt]="to.datepickerOptions.startAt"
      [startView]="to.datepickerOptions.startView"
      [touchUi]="to.datepickerOptions.touchUi"
      (monthSelected)="to.datepickerOptions.monthSelected(field, $event, picker)"
      (yearSelected)="to.datepickerOptions.yearSelected(field, $event, picker)"
    >
    </mat-datepicker>
  `
            }] }
];
/** @nocollapse */
FormlyFieldDatepicker.ctorParameters = () => [
    { type: FormlyConfig }
];
FormlyFieldDatepicker.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
    datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput, (/** @type {?} */ ({ static: true })),] }],
    datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
};
if (false) {
    /** @type {?} */
    FormlyFieldDatepicker.prototype.formFieldControl;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.datepickerInput;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.datepickerToggle;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldDatepicker.prototype.fieldErrorsObserver;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldDatepicker.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,