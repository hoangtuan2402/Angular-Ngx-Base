import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { Component, ViewChildren, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/checkbox';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@ngx-formly/core/select';

function FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 1);
    ɵngcc0.ɵɵlistener("change", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.onChange(option_r1.value, $event.checked)); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("formlyAttributes", ctx_r0.field)("tabIndex", ctx_r0.to.tabindex)("color", ctx_r0.to.color)("labelPosition", ctx_r0.to.labelPosition)("checked", ctx_r0.isChecked(option_r1))("disabled", ctx_r0.formControl.disabled || option_r1.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
class FormlyFieldMultiCheckbox extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                options: [],
                color: 'accent',
            },
        };
    }
    /**
     * @param {?} value
     * @param {?} checked
     * @return {?}
     */
    onChange(value, checked) {
        this.formControl.markAsDirty();
        if (this.to.type === 'array') {
            this.formControl.patchValue(checked
                ? [...(this.formControl.value || []), value]
                : [...(this.formControl.value || [])].filter((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o !== value)));
        }
        else {
            this.formControl.patchValue(Object.assign({}, this.formControl.value, { [value]: checked }));
        }
        this.formControl.markAsTouched();
    }
    // TODO: find a solution to prevent scroll on focus
    /**
     * @return {?}
     */
    onContainerClick() { }
    /**
     * @param {?} option
     * @return {?}
     */
    isChecked(option) {
        /** @type {?} */
        const value = this.formControl.value;
        return value && (this.to.type === 'array'
            ? (value.indexOf(option.value) !== -1)
            : value[option.value]);
    }
}
FormlyFieldMultiCheckbox.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldMultiCheckbox_BaseFactory; return function FormlyFieldMultiCheckbox_Factory(t) { return (ɵFormlyFieldMultiCheckbox_BaseFactory || (ɵFormlyFieldMultiCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox)))(t || FormlyFieldMultiCheckbox); }; }();
FormlyFieldMultiCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldMultiCheckbox, selectors: [["formly-field-mat-multicheckbox"]], viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatCheckbox, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkboxes = _t);
    } }, hostVars: 1, hostBindings: function FormlyFieldMultiCheckbox_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[4, "ngFor", "ngForOf"], [3, "id", "formlyAttributes", "tabIndex", "color", "labelPosition", "checked", "disabled", "change"]], template: function FormlyFieldMultiCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 8, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵpipe(2, "formlySelectOptions");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));
    } }, dependencies: [ɵngcc1.NgForOf, ɵngcc2.MatCheckbox, ɵngcc3.FormlyAttributes, ɵngcc1.AsyncPipe, ɵngcc4.FormlySelectOptionsPipe], encapsulation: 2 });
FormlyFieldMultiCheckbox.propDecorators = {
    checkboxes: [{ type: ViewChildren, args: [MatCheckbox,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldMultiCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-multicheckbox',
                template: `
    <ng-container *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;">
      <mat-checkbox
        [id]="id + '_' + i"
        [formlyAttributes]="field"
        [tabIndex]="to.tabindex"
        [color]="to.color"
        [labelPosition]="to.labelPosition"
        [checked]="isChecked(option)"
        [disabled]="formControl.disabled || option.disabled"
        (change)="onChange(option.value, $event.checked)">
          {{ option.label }}
      </mat-checkbox>
    </ng-container>
  `,
                host: {
                    '[id]': 'id'
                }
            }]
    }], null, { checkboxes: [{
            type: ViewChildren,
            args: [MatCheckbox]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyMatMultiCheckboxModule {
}
FormlyMatMultiCheckboxModule.ɵfac = function FormlyMatMultiCheckboxModule_Factory(t) { return new (t || FormlyMatMultiCheckboxModule)(); };
FormlyMatMultiCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatMultiCheckboxModule });
FormlyMatMultiCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule,
        ReactiveFormsModule,
        MatCheckboxModule,
        FormlyMatFormFieldModule,
        FormlySelectModule,
        FormlyModule.forChild({
            types: [
                {
                    name: 'multicheckbox',
                    component: FormlyFieldMultiCheckbox,
                    wrappers: ['form-field']
                },
            ]
        })] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyMatMultiCheckboxModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyFieldMultiCheckbox],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatCheckboxModule,
                    FormlyMatFormFieldModule,
                    FormlySelectModule,
                    FormlyModule.forChild({
                        types: [
                            {
                                name: 'multicheckbox',
                                component: FormlyFieldMultiCheckbox,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatMultiCheckboxModule, { declarations: function () { return [FormlyFieldMultiCheckbox]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        MatCheckboxModule,
        FormlyMatFormFieldModule,
        FormlySelectModule, ɵngcc3.FormlyModule]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyMatMultiCheckboxModule, FormlyFieldMultiCheckbox };


//# sourceMappingURL=ngx-formly-material-multicheckbox.js.map