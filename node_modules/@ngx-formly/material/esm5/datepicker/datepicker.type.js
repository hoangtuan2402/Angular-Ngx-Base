/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatDatepickerInput } from '@angular/material/datepicker';
import { FormlyConfig, ÉµwrapProperty as wrapProperty } from '@ngx-formly/core';
var FormlyFieldDatepicker = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyFieldDatepicker, _super);
    function FormlyFieldDatepicker(config) {
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                    dateInput: (/**
                     * @return {?}
                     */
                    function () { }),
                    dateChange: (/**
                     * @return {?}
                     */
                    function () { }),
                    monthSelected: (/**
                     * @return {?}
                     */
                    function () { }),
                    yearSelected: (/**
                     * @return {?}
                     */
                    function () { }),
                },
            },
        };
        return _this;
    }
    /**
     * @return {?}
     */
    FormlyFieldDatepicker.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        // temporary fix for https://github.com/angular/components/issues/16761
        if (this.config.getValidatorMessage('matDatepickerParse')) {
            wrapProperty(this.field.formControl, 'errors', (/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var currentValue = _a.currentValue;
                if (currentValue && currentValue.required && currentValue.matDatepickerParse) {
                    /** @type {?} */
                    var errors = Object.keys(currentValue)
                        .sort((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    function (prop) { return prop === 'matDatepickerParse' ? -1 : 0; }))
                        .reduce((/**
                     * @param {?} errors
                     * @param {?} prop
                     * @return {?}
                     */
                    function (errors, prop) {
                        var _a;
                        return (tslib_1.__assign({}, errors, (_a = {}, _a[prop] = currentValue[prop], _a)));
                    }), {});
                    ((/** @type {?} */ (_this.field.formControl)))['___$errors'] = errors;
                }
            }));
        }
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        function () {
            switch (_this.to.datepickerOptions.datepickerTogglePosition) {
                case 'suffix':
                    _this.to._matSuffix = _this.datepickerToggle;
                    break;
                case 'prefix':
                    _this.to._matPrefix = _this.datepickerToggle;
                    break;
            }
            ((/** @type {?} */ (_this.options)))._markForCheck(_this.field);
        }));
    };
    /**
     * @return {?}
     */
    FormlyFieldDatepicker.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.fieldErrorsObserver && this.fieldErrorsObserver();
    };
    FormlyFieldDatepicker.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-mat-datepicker',
                    template: "\n    <input matInput\n      [id]=\"id\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [matDatepicker]=\"picker\"\n      [matDatepickerFilter]=\"to.datepickerOptions.filter\"\n      [max]=\"to.datepickerOptions.max\"\n      [min]=\"to.datepickerOptions.min\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      (dateInput)=\"to.datepickerOptions.dateInput(field, $event)\"\n      (dateChange)=\"to.datepickerOptions.dateChange(field, $event)\">\n    <ng-template #datepickerToggle>\n      <mat-datepicker-toggle [disabled]=\"to.disabled\" [for]=\"picker\"></mat-datepicker-toggle>\n    </ng-template>\n    <mat-datepicker #picker\n      [color]=\"to.color\"\n      [dateClass]=\"to.datepickerOptions.dateClass\"\n      [disabled]=\"to.datepickerOptions.disabled\"\n      [opened]=\"to.datepickerOptions.opened\"\n      [panelClass]=\"to.datepickerOptions.panelClass\"\n      [startAt]=\"to.datepickerOptions.startAt\"\n      [startView]=\"to.datepickerOptions.startView\"\n      [touchUi]=\"to.datepickerOptions.touchUi\"\n      (monthSelected)=\"to.datepickerOptions.monthSelected(field, $event, picker)\"\n      (yearSelected)=\"to.datepickerOptions.yearSelected(field, $event, picker)\"\n    >\n    </mat-datepicker>\n  "
                }] }
    ];
    /** @nocollapse */
    FormlyFieldDatepicker.ctorParameters = function () { return [
        { type: FormlyConfig }
    ]; };
    FormlyFieldDatepicker.propDecorators = {
        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
        datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput, (/** @type {?} */ ({ static: true })),] }],
        datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
    };
    return FormlyFieldDatepicker;
}(FieldType));
export { FormlyFieldDatepicker };
if (false) {
    /** @type {?} */
    FormlyFieldDatepicker.prototype.formFieldControl;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.datepickerInput;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.datepickerToggle;
    /** @type {?} */
    FormlyFieldDatepicker.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldDatepicker.prototype.fieldErrorsObserver;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldDatepicker.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci50eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImRhdGVwaWNrZXIudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFpQixXQUFXLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsSUFBSSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUvRTtJQW9DMkMsaURBQVM7SUFtQmxELCtCQUFvQixNQUFvQjtRQUF4QyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsWUFBTSxHQUFOLE1BQU0sQ0FBYztRQWR4QyxvQkFBYyxHQUFHO1lBQ2YsZUFBZSxFQUFFO2dCQUNmLGlCQUFpQixFQUFFO29CQUNqQixTQUFTLEVBQUUsT0FBTztvQkFDbEIsd0JBQXdCLEVBQUUsUUFBUTtvQkFDbEMsU0FBUzs7O29CQUFFLGNBQU8sQ0FBQyxDQUFBO29CQUNuQixVQUFVOzs7b0JBQUUsY0FBTyxDQUFDLENBQUE7b0JBQ3BCLGFBQWE7OztvQkFBRSxjQUFPLENBQUMsQ0FBQTtvQkFDdkIsWUFBWTs7O29CQUFFLGNBQU8sQ0FBQyxDQUFBO2lCQUN2QjthQUNGO1NBQ0YsQ0FBQzs7SUFLRixDQUFDOzs7O0lBRUQsK0NBQWU7OztJQUFmO1FBQUEsaUJBK0JDO1FBOUJDLGlCQUFNLGVBQWUsV0FBRSxDQUFDO1FBRXhCLHVFQUF1RTtRQUN2RSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUN6RCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsUUFBUTs7OztZQUFFLFVBQUMsRUFBZ0I7b0JBQWQsOEJBQVk7Z0JBQzVELElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFDLGtCQUFrQixFQUFFOzt3QkFDdEUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO3lCQUNyQyxJQUFJOzs7O29CQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxLQUFLLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUF0QyxDQUFzQyxFQUFDO3lCQUNwRCxNQUFNOzs7OztvQkFBQyxVQUFDLE1BQU0sRUFBRSxJQUFJOzt3QkFBSyxPQUFBLHNCQUFNLE1BQU0sZUFBRyxJQUFJLElBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFHO29CQUEzQyxDQUEyQyxHQUFFLEVBQUUsQ0FBQztvQkFDNUUsQ0FBQyxtQkFBQSxLQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBTyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDO2lCQUN4RDtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7UUFFRCxxRUFBcUU7UUFDckUsQ0FBQyxtQkFBTSxJQUFJLENBQUMsZUFBZSxFQUFBLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUV6RCxVQUFVOzs7UUFBQztZQUNULFFBQVEsS0FBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDMUQsS0FBSyxRQUFRO29CQUNYLEtBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDM0MsTUFBTTtnQkFFUixLQUFLLFFBQVE7b0JBQ1gsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDO29CQUMzQyxNQUFNO2FBQ1Q7WUFFRCxDQUFDLG1CQUFNLEtBQUksQ0FBQyxPQUFPLEVBQUEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsMkNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3pELENBQUM7O2dCQTlGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtvQkFDdkMsUUFBUSxFQUFFLDYzQ0FnQ1Q7aUJBQ0Y7Ozs7Z0JBckNRLFlBQVk7OzttQ0F1Q2xCLFNBQVMsU0FBQyxRQUFRLEVBQUUsbUJBQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUE7a0NBQzFDLFNBQVMsU0FBQyxrQkFBa0IsRUFBRSxtQkFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBQTttQ0FDcEQsU0FBUyxTQUFDLGtCQUFrQjs7SUF3RC9CLDRCQUFDO0NBQUEsQUEvRkQsQ0FvQzJDLFNBQVMsR0EyRG5EO1NBM0RZLHFCQUFxQjs7O0lBQ2hDLGlEQUF5RTs7SUFDekUsZ0RBQWlHOztJQUNqRyxpREFBbUU7O0lBRW5FLCtDQVdFOzs7OztJQUNGLG9EQUF1Qzs7Ozs7SUFFM0IsdUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQsIFRlbXBsYXRlUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0SW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBNYXREYXRlcGlja2VySW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kYXRlcGlja2VyJztcbmltcG9ydCB7IEZvcm1seUNvbmZpZywgybV3cmFwUHJvcGVydHkgYXMgd3JhcFByb3BlcnR5IH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1tYXQtZGF0ZXBpY2tlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGlucHV0IG1hdElucHV0XG4gICAgICBbaWRdPVwiaWRcIlxuICAgICAgW2Vycm9yU3RhdGVNYXRjaGVyXT1cImVycm9yU3RhdGVNYXRjaGVyXCJcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbbWF0RGF0ZXBpY2tlcl09XCJwaWNrZXJcIlxuICAgICAgW21hdERhdGVwaWNrZXJGaWx0ZXJdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZmlsdGVyXCJcbiAgICAgIFttYXhdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubWF4XCJcbiAgICAgIFttaW5dPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubWluXCJcbiAgICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICAgIFtwbGFjZWhvbGRlcl09XCJ0by5wbGFjZWhvbGRlclwiXG4gICAgICBbdGFiaW5kZXhdPVwidG8udGFiaW5kZXhcIlxuICAgICAgW3JlYWRvbmx5XT1cInRvLnJlYWRvbmx5XCJcbiAgICAgIFtyZXF1aXJlZF09XCJ0by5yZXF1aXJlZFwiXG4gICAgICAoZGF0ZUlucHV0KT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVJbnB1dChmaWVsZCwgJGV2ZW50KVwiXG4gICAgICAoZGF0ZUNoYW5nZSk9XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5kYXRlQ2hhbmdlKGZpZWxkLCAkZXZlbnQpXCI+XG4gICAgPG5nLXRlbXBsYXRlICNkYXRlcGlja2VyVG9nZ2xlPlxuICAgICAgPG1hdC1kYXRlcGlja2VyLXRvZ2dsZSBbZGlzYWJsZWRdPVwidG8uZGlzYWJsZWRcIiBbZm9yXT1cInBpY2tlclwiPjwvbWF0LWRhdGVwaWNrZXItdG9nZ2xlPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPG1hdC1kYXRlcGlja2VyICNwaWNrZXJcbiAgICAgIFtjb2xvcl09XCJ0by5jb2xvclwiXG4gICAgICBbZGF0ZUNsYXNzXT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVDbGFzc1wiXG4gICAgICBbZGlzYWJsZWRdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuZGlzYWJsZWRcIlxuICAgICAgW29wZW5lZF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5vcGVuZWRcIlxuICAgICAgW3BhbmVsQ2xhc3NdPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMucGFuZWxDbGFzc1wiXG4gICAgICBbc3RhcnRBdF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5zdGFydEF0XCJcbiAgICAgIFtzdGFydFZpZXddPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMuc3RhcnRWaWV3XCJcbiAgICAgIFt0b3VjaFVpXT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLnRvdWNoVWlcIlxuICAgICAgKG1vbnRoU2VsZWN0ZWQpPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMubW9udGhTZWxlY3RlZChmaWVsZCwgJGV2ZW50LCBwaWNrZXIpXCJcbiAgICAgICh5ZWFyU2VsZWN0ZWQpPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMueWVhclNlbGVjdGVkKGZpZWxkLCAkZXZlbnQsIHBpY2tlcilcIlxuICAgID5cbiAgICA8L21hdC1kYXRlcGlja2VyPlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlGaWVsZERhdGVwaWNrZXIgZXh0ZW5kcyBGaWVsZFR5cGUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKE1hdElucHV0LCA8YW55PiB7IHN0YXRpYzogdHJ1ZSB9KSBmb3JtRmllbGRDb250cm9sITogTWF0SW5wdXQ7XG4gIEBWaWV3Q2hpbGQoTWF0RGF0ZXBpY2tlcklucHV0LCA8YW55PiB7IHN0YXRpYzogdHJ1ZSB9KSBkYXRlcGlja2VySW5wdXQhOiBNYXREYXRlcGlja2VySW5wdXQ8YW55PjtcbiAgQFZpZXdDaGlsZCgnZGF0ZXBpY2tlclRvZ2dsZScpIGRhdGVwaWNrZXJUb2dnbGUhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgZGF0ZXBpY2tlck9wdGlvbnM6IHtcbiAgICAgICAgc3RhcnRWaWV3OiAnbW9udGgnLFxuICAgICAgICBkYXRlcGlja2VyVG9nZ2xlUG9zaXRpb246ICdzdWZmaXgnLFxuICAgICAgICBkYXRlSW5wdXQ6ICgpID0+IHt9LFxuICAgICAgICBkYXRlQ2hhbmdlOiAoKSA9PiB7fSxcbiAgICAgICAgbW9udGhTZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICAgIHllYXJTZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG4gIHByaXZhdGUgZmllbGRFcnJvcnNPYnNlcnZlciE6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBGb3JtbHlDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuXG4gICAgLy8gdGVtcG9yYXJ5IGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvY29tcG9uZW50cy9pc3N1ZXMvMTY3NjFcbiAgICBpZiAodGhpcy5jb25maWcuZ2V0VmFsaWRhdG9yTWVzc2FnZSgnbWF0RGF0ZXBpY2tlclBhcnNlJykpIHtcbiAgICAgIHdyYXBQcm9wZXJ0eSh0aGlzLmZpZWxkLmZvcm1Db250cm9sLCAnZXJyb3JzJywgKHsgY3VycmVudFZhbHVlIH0pID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUucmVxdWlyZWQgJiYgY3VycmVudFZhbHVlLm1hdERhdGVwaWNrZXJQYXJzZSkge1xuICAgICAgICAgIGNvbnN0IGVycm9ycyA9IE9iamVjdC5rZXlzKGN1cnJlbnRWYWx1ZSlcbiAgICAgICAgICAgIC5zb3J0KHByb3AgPT4gcHJvcCA9PT0gJ21hdERhdGVwaWNrZXJQYXJzZScgPyAtMSA6IDApXG4gICAgICAgICAgICAucmVkdWNlKChlcnJvcnMsIHByb3ApID0+ICh7IC4uLmVycm9ycywgW3Byb3BdOiBjdXJyZW50VmFsdWVbcHJvcF0gfSksIHt9KTtcbiAgICAgICAgICAodGhpcy5maWVsZC5mb3JtQ29udHJvbCBhcyBhbnkpWydfX18kZXJyb3JzJ10gPSBlcnJvcnM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHRlbXBvcmFyeSBmaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9pc3N1ZXMvNjcyOFxuICAgICg8YW55PiB0aGlzLmRhdGVwaWNrZXJJbnB1dCkuX2Zvcm1GaWVsZCA9IHRoaXMuZm9ybUZpZWxkO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzd2l0Y2ggKHRoaXMudG8uZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlclRvZ2dsZVBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3N1ZmZpeCc6XG4gICAgICAgICAgdGhpcy50by5fbWF0U3VmZml4ID0gdGhpcy5kYXRlcGlja2VyVG9nZ2xlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ByZWZpeCc6XG4gICAgICAgICAgdGhpcy50by5fbWF0UHJlZml4ID0gdGhpcy5kYXRlcGlja2VyVG9nZ2xlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAoPGFueT4gdGhpcy5vcHRpb25zKS5fbWFya0ZvckNoZWNrKHRoaXMuZmllbGQpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5maWVsZEVycm9yc09ic2VydmVyICYmIHRoaXMuZmllbGRFcnJvcnNPYnNlcnZlcigpO1xuICB9XG59XG4iXX0=