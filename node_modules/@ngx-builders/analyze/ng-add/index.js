"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngAdd = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("./workspace");
function ngAdd(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        // Get project name 
        if (!options.project) {
            if (workspace.extensions.defaultProject) {
                options.project = workspace.extensions.defaultProject;
            }
            else {
                throw new schematics_1.SchematicsException('No Angular project selected and no default project in the workspace');
            }
        }
        // Validating project name
        const project = workspace.projects.get(options.project);
        if (!project) {
            throw new schematics_1.SchematicsException(`The specified Angular project is not defined in this workspace`);
        }
        // Checking if it is application
        if (project.extensions['projectType'] !== 'application') {
            throw new schematics_1.SchematicsException(`source-map-analyzer requires an Angular project type of "application" in angular.json`);
        }
        const outputPath = (_b = (_a = project.targets.get('build')) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.outputPath;
        if (!outputPath) {
            const message = `Cannot read the output path(architect.build.options.outputPath) of the Angular project "${options.project}" in angular.json`;
            throw new schematics_1.SchematicsException(message);
        }
        var targetDefinition = {
            builder: "@ngx-builders/analyze:analyze",
            options: {
                outputPath: outputPath
            }
        };
        project.targets.add(Object.assign({ name: 'analyze' }, targetDefinition));
        return (0, schematics_1.chain)([(0, workspace_1.updateWorkspace)(workspace)]);
    });
}
exports.ngAdd = ngAdd;
