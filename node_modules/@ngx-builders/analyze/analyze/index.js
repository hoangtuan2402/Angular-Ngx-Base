"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execAsync = void 0;
const architect_1 = require("@angular-devkit/architect");
const util_1 = __importDefault(require("util"));
const child_process_1 = require("child_process");
exports.execAsync = util_1.default.promisify(child_process_1.exec);
exports.default = (0, architect_1.createBuilder)((builderConfig, context) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        context.reportStatus(`Starting Build`);
        // const child = childProcess.spawn(options.command, options.args, { stdio: 'pipe' });
        const configuration = 'production';
        const overrides = Object.assign({}, ({ sourceMap: true, budgets: [] }));
        const build = yield context.scheduleTarget({
            target: 'build',
            project: ((_a = context === null || context === void 0 ? void 0 : context.target) === null || _a === void 0 ? void 0 : _a.project) || '',
            configuration
        }, overrides);
        const result = yield build.result;
        if (result.success) {
            const mainFile = builderConfig.diffLoading ? '*es2015.*.js' : '*.js';
            let explorerCommand = `npx source-map-explorer ${builderConfig.outputPath}/${mainFile}`;
            if (builderConfig.gzip) {
                explorerCommand = `${explorerCommand} --gzip`;
            }
            const { stdout, stderr } = yield (0, exports.execAsync)(explorerCommand);
            context.logger.info(stdout);
            context.logger.info(stderr);
        }
        context.reportStatus(`Done.`);
        return {
            success: true
        };
    }
    catch (e) {
        return {
            error: e.message,
            success: true
        };
    }
}));
