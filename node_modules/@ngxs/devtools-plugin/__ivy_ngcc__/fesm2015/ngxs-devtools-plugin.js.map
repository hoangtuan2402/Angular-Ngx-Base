{"version":3,"file":"ngxs-devtools-plugin.js","sources":["@ngxs/devtools-plugin/src/symbols.ts","@ngxs/devtools-plugin/src/devtools.plugin.ts","@ngxs/devtools-plugin/src/devtools.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * Interface for the redux-devtools-extension API.\r\n */\r\nexport interface NgxsDevtoolsExtension {\r\n  init(state: any): void;\r\n  send(action: any, state?: any): void;\r\n  subscribe(fn: (message: NgxsDevtoolsAction) => void): VoidFunction;\r\n}\r\n\r\nexport interface NgxsDevtoolsAction {\r\n  type: string;\r\n  payload: any;\r\n  state: any;\r\n  id: number;\r\n  source: string;\r\n}\r\n\r\nexport interface NgxsDevtoolsOptions {\r\n  /**\r\n   * The name of the extension\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Whether the dev tools is enabled or note. Useful for setting during production.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Max number of entiries to keep.\r\n   */\r\n  maxAge?: number;\r\n\r\n  /**\r\n   * Reformat actions before sending to dev tools\r\n   */\r\n  actionSanitizer?: (action: any) => void;\r\n\r\n  /**\r\n   * Reformat state before sending to devtools\r\n   */\r\n  stateSanitizer?: (state: any) => void;\r\n}\r\n\r\nexport const NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');\r\n","import { Inject, Injectable, Injector, NgZone, OnDestroy, Éµglobal } from '@angular/core';\r\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, Store } from '@ngxs/store';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\nimport {\r\n  NGXS_DEVTOOLS_OPTIONS,\r\n  NgxsDevtoolsAction,\r\n  NgxsDevtoolsExtension,\r\n  NgxsDevtoolsOptions\r\n} from './symbols';\r\n\r\nconst enum ReduxDevtoolsActionType {\r\n  Dispatch = 'DISPATCH',\r\n  Action = 'ACTION'\r\n}\r\n\r\nconst enum ReduxDevtoolsPayloadType {\r\n  JumpToAction = 'JUMP_TO_ACTION',\r\n  JumpToState = 'JUMP_TO_STATE',\r\n  ToggleAction = 'TOGGLE_ACTION',\r\n  ImportState = 'IMPORT_STATE'\r\n}\r\n\r\n/**\r\n * Adds support for the Redux Devtools extension:\r\n * http://extension.remotedev.io/\r\n */\r\n@Injectable()\r\nexport class NgxsReduxDevtoolsPlugin implements OnDestroy, NgxsPlugin {\r\n  private devtoolsExtension: NgxsDevtoolsExtension | null = null;\r\n  private readonly globalDevtools =\r\n    Éµglobal['__REDUX_DEVTOOLS_EXTENSION__'] || Éµglobal['devToolsExtension'];\r\n\r\n  private unsubscribe: VoidFunction | null = null;\r\n\r\n  constructor(\r\n    @Inject(NGXS_DEVTOOLS_OPTIONS) private _options: NgxsDevtoolsOptions,\r\n    private _injector: Injector,\r\n    private _ngZone: NgZone\r\n  ) {\r\n    this.connect();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.unsubscribe !== null) {\r\n      this.unsubscribe();\r\n    }\r\n    if (this.globalDevtools) {\r\n      this.globalDevtools.disconnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lazy get the store for circular dependency issues\r\n   */\r\n  private get store(): Store {\r\n    return this._injector.get<Store>(Store);\r\n  }\r\n\r\n  /**\r\n   * Middleware handle function\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn) {\r\n    if (!this.devtoolsExtension || this._options.disabled) {\r\n      return next(state, action);\r\n    }\r\n\r\n    return next(state, action).pipe(\r\n      catchError(error => {\r\n        const newState = this.store.snapshot();\r\n        this.sendToDevTools(state, action, newState);\r\n        throw error;\r\n      }),\r\n      tap(newState => {\r\n        this.sendToDevTools(state, action, newState);\r\n      })\r\n    );\r\n  }\r\n\r\n  private sendToDevTools(state: any, action: any, newState: any) {\r\n    const type = getActionTypeFromInstance(action);\r\n    // if init action, send initial state to dev tools\r\n    const isInitAction = type === '@@INIT';\r\n    if (isInitAction) {\r\n      this.devtoolsExtension!.init(state);\r\n    } else {\r\n      this.devtoolsExtension!.send({ ...action, action: null, type }, newState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the action from the dev tools subscription\r\n   */\r\n  dispatched(action: NgxsDevtoolsAction) {\r\n    if (action.type === ReduxDevtoolsActionType.Dispatch) {\r\n      if (\r\n        action.payload.type === ReduxDevtoolsPayloadType.JumpToAction ||\r\n        action.payload.type === ReduxDevtoolsPayloadType.JumpToState\r\n      ) {\r\n        const prevState = JSON.parse(action.state);\r\n        this.store.reset(prevState);\r\n      } else if (action.payload.type === ReduxDevtoolsPayloadType.ToggleAction) {\r\n        console.warn('Skip is not supported at this time.');\r\n      } else if (action.payload.type === ReduxDevtoolsPayloadType.ImportState) {\r\n        const {\r\n          actionsById,\r\n          computedStates,\r\n          currentStateIndex\r\n        } = action.payload.nextLiftedState;\r\n        this.devtoolsExtension!.init(computedStates[0].state);\r\n        Object.keys(actionsById)\r\n          .filter(actionId => actionId !== '0')\r\n          .forEach(actionId =>\r\n            this.devtoolsExtension!.send(actionsById[actionId], computedStates[actionId].state)\r\n          );\r\n        this.store.reset(computedStates[currentStateIndex].state);\r\n      }\r\n    } else if (action.type === ReduxDevtoolsActionType.Action) {\r\n      const actionPayload = JSON.parse(action.payload);\r\n      this.store.dispatch(actionPayload);\r\n    }\r\n  }\r\n\r\n  private connect(): void {\r\n    if (!this.globalDevtools || this._options.disabled) {\r\n      return;\r\n    }\r\n\r\n    // The `connect` method adds `message` event listener since it communicates\r\n    // with an extension through `window.postMessage` and message events.\r\n    // We handle only 2 events; thus, we don't want to run many change detections\r\n    // because the extension sends events that we don't have to handle.\r\n    this.devtoolsExtension = this._ngZone.runOutsideAngular(\r\n      () => <NgxsDevtoolsExtension>this.globalDevtools.connect(this._options)\r\n    );\r\n\r\n    this.unsubscribe = this.devtoolsExtension.subscribe(action => {\r\n      if (\r\n        action.type === ReduxDevtoolsActionType.Dispatch ||\r\n        action.type === ReduxDevtoolsActionType.Action\r\n      ) {\r\n        this._ngZone.run(() => {\r\n          this.dispatched(action);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\r\nimport { NGXS_PLUGINS } from '@ngxs/store';\r\n\r\nimport { NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS } from './symbols';\r\nimport { NgxsReduxDevtoolsPlugin } from './devtools.plugin';\r\n\r\nexport function devtoolsOptionsFactory(options: NgxsDevtoolsOptions) {\r\n  return {\r\n    name: 'NGXS',\r\n    ...options\r\n  };\r\n}\r\n\r\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\r\n\r\n@NgModule()\r\nexport class NgxsReduxDevtoolsPluginModule {\r\n  static forRoot(\r\n    options?: NgxsDevtoolsOptions\r\n  ): ModuleWithProviders<NgxsReduxDevtoolsPluginModule> {\r\n    return {\r\n      ngModule: NgxsReduxDevtoolsPluginModule,\r\n      providers: [\r\n        {\r\n          provide: NGXS_PLUGINS,\r\n          useClass: NgxsReduxDevtoolsPlugin,\r\n          multi: true\r\n        },\r\n        {\r\n          provide: USER_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NGXS_DEVTOOLS_OPTIONS,\r\n          useFactory: devtoolsOptionsFactory,\r\n          deps: [USER_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}