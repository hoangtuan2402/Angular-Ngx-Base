/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, NgZone, ɵglobal } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap, catchError } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/** @enum {string} */
var ReduxDevtoolsActionType = {
    Dispatch: 'DISPATCH',
    Action: 'ACTION',
};
/** @enum {string} */
var ReduxDevtoolsPayloadType = {
    JumpToAction: 'JUMP_TO_ACTION',
    JumpToState: 'JUMP_TO_STATE',
    ToggleAction: 'TOGGLE_ACTION',
    ImportState: 'IMPORT_STATE',
};
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
var NgxsReduxDevtoolsPlugin = /** @class */ (function () {
    function NgxsReduxDevtoolsPlugin(_options, _injector, _ngZone) {
        this._options = _options;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this.devtoolsExtension = null;
        this.globalDevtools = ɵglobal['__REDUX_DEVTOOLS_EXTENSION__'] || ɵglobal['devToolsExtension'];
        this.unsubscribe = null;
        this.connect();
    }
    /**
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.unsubscribe !== null) {
            this.unsubscribe();
        }
        if (this.globalDevtools) {
            this.globalDevtools.disconnect();
        }
    };
    Object.defineProperty(NgxsReduxDevtoolsPlugin.prototype, "store", {
        /**
         * Lazy get the store for circular dependency issues
         */
        get: /**
         * Lazy get the store for circular dependency issues
         * @private
         * @return {?}
         */
        function () {
            return this._injector.get(Store);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Middleware handle function
     */
    /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.handle = /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    function (state, action, next) {
        var _this = this;
        if (!this.devtoolsExtension || this._options.disabled) {
            return next(state, action);
        }
        return next(state, action).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var newState = _this.store.snapshot();
            _this.sendToDevTools(state, action, newState);
            throw error;
        })), tap((/**
         * @param {?} newState
         * @return {?}
         */
        function (newState) {
            _this.sendToDevTools(state, action, newState);
        })));
    };
    /**
     * @private
     * @param {?} state
     * @param {?} action
     * @param {?} newState
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.sendToDevTools = /**
     * @private
     * @param {?} state
     * @param {?} action
     * @param {?} newState
     * @return {?}
     */
    function (state, action, newState) {
        /** @type {?} */
        var type = getActionTypeFromInstance(action);
        // if init action, send initial state to dev tools
        /** @type {?} */
        var isInitAction = type === '@@INIT';
        if (isInitAction) {
            (/** @type {?} */ (this.devtoolsExtension)).init(state);
        }
        else {
            (/** @type {?} */ (this.devtoolsExtension)).send(tslib_1.__assign({}, action, { action: null, type: type }), newState);
        }
    };
    /**
     * Handle the action from the dev tools subscription
     */
    /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.dispatched = /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        if (action.type === "DISPATCH" /* Dispatch */) {
            if (action.payload.type === "JUMP_TO_ACTION" /* JumpToAction */ ||
                action.payload.type === "JUMP_TO_STATE" /* JumpToState */) {
                /** @type {?} */
                var prevState = JSON.parse(action.state);
                this.store.reset(prevState);
            }
            else if (action.payload.type === "TOGGLE_ACTION" /* ToggleAction */) {
                console.warn('Skip is not supported at this time.');
            }
            else if (action.payload.type === "IMPORT_STATE" /* ImportState */) {
                var _a = action.payload.nextLiftedState, actionsById_1 = _a.actionsById, computedStates_1 = _a.computedStates, currentStateIndex = _a.currentStateIndex;
                (/** @type {?} */ (this.devtoolsExtension)).init(computedStates_1[0].state);
                Object.keys(actionsById_1)
                    .filter((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                function (actionId) { return actionId !== '0'; }))
                    .forEach((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                function (actionId) {
                    return (/** @type {?} */ (_this.devtoolsExtension)).send(actionsById_1[actionId], computedStates_1[actionId].state);
                }));
                this.store.reset(computedStates_1[currentStateIndex].state);
            }
        }
        else if (action.type === "ACTION" /* Action */) {
            /** @type {?} */
            var actionPayload = JSON.parse(action.payload);
            this.store.dispatch(actionPayload);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.connect = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.globalDevtools || this._options.disabled) {
            return;
        }
        // The `connect` method adds `message` event listener since it communicates
        // with an extension through `window.postMessage` and message events.
        // We handle only 2 events; thus, we don't want to run many change detections
        // because the extension sends events that we don't have to handle.
        this.devtoolsExtension = this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return (/** @type {?} */ (_this.globalDevtools.connect(_this._options))); }));
        this.unsubscribe = this.devtoolsExtension.subscribe((/**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            if (action.type === "DISPATCH" /* Dispatch */ ||
                action.type === "ACTION" /* Action */) {
                _this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.dispatched(action);
                }));
            }
        }));
    };
    NgxsReduxDevtoolsPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsReduxDevtoolsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
        { type: Injector },
        { type: NgZone }
    ]; };
    return NgxsReduxDevtoolsPlugin;
}());
export { NgxsReduxDevtoolsPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.globalDevtools;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.unsubscribe;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,