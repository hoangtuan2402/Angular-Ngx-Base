import * as tslib_1 from "tslib";
var RouterState_1;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgZone, Injectable, OnDestroy } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RouterStateSnapshot, RoutesRecognized, ResolveEnd, UrlSerializer, NavigationStart, NavigationEnd } from '@angular/router';
import { LocationStrategy, Location } from '@angular/common';
import { Action, Selector, State, StateContext, Store } from '@ngxs/store';
import { isAngularInTestMode } from '@ngxs/store/internals';
import { Subscription } from 'rxjs';
import { first } from 'rxjs/operators';
import { Navigate, RouterCancel, RouterError, RouterNavigation, RouterDataResolved } from './router.actions';
import { RouterStateSerializer } from './serializer';
/**
 * @record
 * @template T
 */
export function RouterStateModel() { }
if (false) {
    /** @type {?|undefined} */
    RouterStateModel.prototype.state;
    /** @type {?|undefined} */
    RouterStateModel.prototype.navigationId;
    /** @type {?} */
    RouterStateModel.prototype.trigger;
}
let RouterState = RouterState_1 = class RouterState {
    /**
     * @param {?} _store
     * @param {?} _router
     * @param {?} _serializer
     * @param {?} _ngZone
     * @param {?} _urlSerializer
     * @param {?} _locationStrategy
     * @param {?} _location
     */
    constructor(_store, _router, _serializer, _ngZone, _urlSerializer, _locationStrategy, _location) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this._urlSerializer = _urlSerializer;
        this._locationStrategy = _locationStrategy;
        this._location = _location;
        /**
         * Determines how navigation was performed by the `RouterState` itself
         * or outside via `new Navigate(...)`
         */
        this._trigger = 'none';
        /**
         * That's the serialized state from the `Router` class
         */
        this._routerState = null;
        /**
         * That's the value of the `RouterState` state
         */
        this._storeState = null;
        this._lastRoutesRecognized = (/** @type {?} */ (null));
        this._subscription = new Subscription();
        this.setUpStoreListener();
        this.setUpRouterEventsListener();
        this.checkInitialNavigationOnce();
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    static state(state) {
        return state && state.state;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    static url(state) {
        return state && state.state && state.state.url;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    /**
     * @param {?} _
     * @param {?} action
     * @return {?}
     */
    navigate(_, action) {
        return this._ngZone.run((/**
         * @return {?}
         */
        () => this._router.navigate(action.path, Object.assign({ queryParams: action.queryParams }, action.extras))));
    }
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    angularRouterAction(ctx, action) {
        ctx.setState(Object.assign({}, ctx.getState(), { trigger: action.trigger, state: action.routerState, navigationId: action.event.id }));
    }
    /**
     * @private
     * @return {?}
     */
    setUpStoreListener() {
        /** @type {?} */
        const subscription = this._store
            .select(RouterState_1)
            .subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            this.navigateIfNeeded(state);
        }));
        this._subscription.add(subscription);
    }
    /**
     * @private
     * @return {?}
     */
    setUpRouterEventsListener() {
        /** @type {?} */
        const subscription = this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationStart) {
                this.navigationStart();
            }
            else if (event instanceof RoutesRecognized) {
                this._lastRoutesRecognized = event;
            }
            else if (event instanceof ResolveEnd) {
                this.dispatchRouterDataResolved(event);
            }
            else if (event instanceof NavigationCancel) {
                this.dispatchRouterCancel(event);
                this.reset();
            }
            else if (event instanceof NavigationError) {
                this.dispatchRouterError(event);
                this.reset();
            }
            else if (event instanceof NavigationEnd) {
                this.navigationEnd();
                this.reset();
            }
        }));
        this._subscription.add(subscription);
    }
    /**
     * @private
     * @return {?}
     */
    navigationStart() {
        this._routerState = this._serializer.serialize(this._router.routerState.snapshot);
        if (this._trigger !== 'none') {
            this._storeState = this._store.selectSnapshot(RouterState_1);
        }
    }
    /**
     * @private
     * @return {?}
     */
    navigationEnd() {
        if (this.shouldDispatchRouterNavigation()) {
            this.dispatchRouterNavigation();
        }
    }
    /**
     * @private
     * @return {?}
     */
    shouldDispatchRouterNavigation() {
        if (!this._storeState)
            return true;
        return this._trigger !== 'store';
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    navigateIfNeeded(state) {
        /** @type {?} */
        const canSkipNavigation = !this._storeState ||
            !this._storeState.state ||
            !state ||
            state.trigger === 'router' ||
            this._router.url === this._storeState.state.url;
        if (canSkipNavigation) {
            return;
        }
        this._trigger = 'store';
        this._ngZone.run((/**
         * @return {?}
         */
        () => {
            this._router.navigateByUrl((/** @type {?} */ ((/** @type {?} */ (this._storeState)).state)).url);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    dispatchRouterNavigation() {
        /** @type {?} */
        const nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);
        this.dispatchRouterAction(new RouterNavigation(nextRouterState, new RoutesRecognized(this._lastRoutesRecognized.id, this._lastRoutesRecognized.url, this._lastRoutesRecognized.urlAfterRedirects, nextRouterState), this._trigger));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dispatchRouterCancel(event) {
        this.dispatchRouterAction(new RouterCancel((/** @type {?} */ (this._routerState)), this._storeState, event, this._trigger));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dispatchRouterError(event) {
        this.dispatchRouterAction(new RouterError((/** @type {?} */ (this._routerState)), this._storeState, new NavigationError(event.id, event.url, `${event}`), this._trigger));
    }
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    dispatchRouterAction(action) {
        this._trigger = 'router';
        try {
            this._store.dispatch(action);
        }
        finally {
            this._trigger = 'none';
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dispatchRouterDataResolved(event) {
        /** @type {?} */
        const routerState = this._serializer.serialize(event.state);
        this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));
    }
    /**
     * @private
     * @return {?}
     */
    reset() {
        this._trigger = 'none';
        this._storeState = null;
        this._routerState = null;
    }
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     * @private
     * @return {?}
     */
    checkInitialNavigationOnce() {
        // Caretaker note: we have still left the `typeof` condition in order to avoid
        // creating a breaking change for projects that still use the View Engine.
        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&
            // Angular is running tests in development mode thus we can be sure that this method will be
            // skipped in tests.
            isAngularInTestMode()) {
            return;
        }
        /** @type {?} */
        const subscription = this._router.events
            .pipe(first((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event instanceof RoutesRecognized)))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ url }) => {
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL
            // entered in the browser's address bar
            // `PathLocationStrategy.prototype.path()` returns a concatenation of
            // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.
            // `Location.prototype.normalize` strips base href from the URL,
            // if `baseHref` (declared in angular.json) for example is `/en`
            // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,
            // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`
            // from the URL
            /** @type {?} */
            const currentUrl = this._location.normalize(this._locationStrategy.path(true));
            /** @type {?} */
            const currentUrlTree = this._urlSerializer.parse(currentUrl);
            // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`
            // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`
            // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters
            /** @type {?} */
            const currentSerializedUrl = this._urlSerializer.serialize(currentUrlTree);
            // If URLs differ from each other - we've got to perform a redirect to the manually entered URL
            // in the address bar, as it must have a priority
            if (currentSerializedUrl !== url) {
                this._router.navigateByUrl(currentUrl);
            }
        }));
        this._subscription.add(subscription);
    }
};
RouterState.ctorParameters = () => [
    { type: Store },
    { type: Router },
    { type: RouterStateSerializer },
    { type: NgZone },
    { type: UrlSerializer },
    { type: LocationStrategy },
    { type: Location }
];
RouterState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RouterState.ctorParameters = () => [
    { type: Store },
    { type: Router },
    { type: RouterStateSerializer },
    { type: NgZone },
    { type: UrlSerializer },
    { type: LocationStrategy },
    { type: Location }
];
tslib_1.__decorate([
    Action(Navigate),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Navigate]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState.prototype, "navigate", null);
tslib_1.__decorate([
    Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState.prototype, "angularRouterAction", null);
tslib_1.__decorate([
    Selector(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState, "state", null);
tslib_1.__decorate([
    Selector(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Object)
], RouterState, "url", null);
RouterState = RouterState_1 = tslib_1.__decorate([
    State({
        name: 'router',
        defaults: {
            state: undefined,
            navigationId: undefined,
            trigger: 'none'
        }
    }),
    tslib_1.__metadata("design:paramtypes", [Store,
        Router,
        RouterStateSerializer,
        NgZone,
        UrlSerializer,
        LocationStrategy,
        Location])
], RouterState);
export { RouterState };
if (false) {
    /**
     * Determines how navigation was performed by the `RouterState` itself
     * or outside via `new Navigate(...)`
     * @type {?}
     * @private
     */
    RouterState.prototype._trigger;
    /**
     * That's the serialized state from the `Router` class
     * @type {?}
     * @private
     */
    RouterState.prototype._routerState;
    /**
     * That's the value of the `RouterState` state
     * @type {?}
     * @private
     */
    RouterState.prototype._storeState;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._lastRoutesRecognized;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._store;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._router;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._serializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._urlSerializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._locationStrategy;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._location;
}
//# sourceMappingURL=data:application/json;base64,