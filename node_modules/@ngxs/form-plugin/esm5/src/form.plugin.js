/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetForm, SetFormDirty, SetFormDisabled, SetFormEnabled, SetFormPristine, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
var NgxsFormPlugin = /** @class */ (function () {
    function NgxsFormPlugin() {
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsFormPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        /** @type {?} */
        var type = getActionTypeFromInstance(event);
        /** @type {?} */
        var nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
            var value = event.payload.value;
            /** @type {?} */
            var payloadValue = Array.isArray(value)
                ? value.slice()
                : isObjectLike(value)
                    ? tslib_1.__assign({}, value) : value;
            /** @type {?} */
            var path = this.joinPathWithPropertyPath(event);
            nextState = setValue(nextState, path, payloadValue);
        }
        if (type === ResetForm.type) {
            /** @type {?} */
            var model = getValue(nextState, event.payload.path + ".model");
            nextState = setValue(nextState, "" + event.payload.path, { model: model });
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".status", event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".errors", tslib_1.__assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, event.payload + ".dirty", true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, event.payload + ".dirty", false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", false);
        }
        return next(nextState, event);
    };
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    NgxsFormPlugin.prototype.joinPathWithPropertyPath = /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var payload = _a.payload;
        /** @type {?} */
        var path = payload.path + ".model";
        if (payload.propertyPath) {
            path += "." + payload.propertyPath;
        }
        return path;
    };
    NgxsFormPlugin.decorators = [
        { type: Injectable }
    ];
    return NgxsFormPlugin;
}());
export { NgxsFormPlugin };
/**
 * @param {?} target
 * @return {?}
 */
function isObjectLike(target) {
    return target !== null && typeof target === 'object';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9mb3JtLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9mb3JtLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixRQUFRLEVBR1IsUUFBUSxFQUNULE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFDZixjQUFjLEVBQ2QsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixlQUFlLEVBQ2hCLE1BQU0sV0FBVyxDQUFDO0FBRW5CO0lBQUE7SUFpRUEsQ0FBQzs7Ozs7OztJQS9EQywrQkFBTTs7Ozs7O0lBQU4sVUFBTyxLQUFVLEVBQUUsS0FBVSxFQUFFLElBQXNCOztZQUM3QyxJQUFJLEdBQUcseUJBQXlCLENBQUMsS0FBSyxDQUFDOztZQUV6QyxTQUFTLEdBQUcsS0FBSztRQUVyQixJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2hGLElBQUEsMkJBQUs7O2dCQUNQLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDdkMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7b0JBQ3JCLENBQUMsc0JBQU0sS0FBSyxFQUNaLENBQUMsQ0FBQyxLQUFLOztnQkFDSCxJQUFJLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztZQUNqRCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFOztnQkFDckIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVEsQ0FBQztZQUNoRSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxLQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDNUU7UUFFRCxJQUFJLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDOUQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFlBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQzlELFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFTLHVCQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDdkIsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM3RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBSyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksV0FBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckY7UUFFRCxJQUFJLElBQUksS0FBSyxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQzlCLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLFdBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNqRTtRQUVELElBQUksSUFBSSxLQUFLLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDakMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUssS0FBSyxDQUFDLE9BQU8sV0FBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtZQUNqQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBSyxLQUFLLENBQUMsT0FBTyxjQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxFQUFFO1lBQ2hDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFLLEtBQUssQ0FBQyxPQUFPLGNBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNyRTtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFFTyxpREFBd0I7Ozs7O0lBQWhDLFVBQWlDLEVBQTRCO1lBQTFCLG9CQUFPOztZQUNwQyxJQUFJLEdBQU0sT0FBTyxDQUFDLElBQUksV0FBUTtRQUVsQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxJQUFJLE1BQUksT0FBTyxDQUFDLFlBQWMsQ0FBQztTQUNwQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBaEVGLFVBQVU7O0lBaUVYLHFCQUFDO0NBQUEsQUFqRUQsSUFpRUM7U0FoRVksY0FBYzs7Ozs7QUFrRTNCLFNBQVMsWUFBWSxDQUFDLE1BQWU7SUFDbkMsT0FBTyxNQUFNLEtBQUssSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UsXHJcbiAgZ2V0VmFsdWUsXHJcbiAgTmd4c05leHRQbHVnaW5GbixcclxuICBOZ3hzUGx1Z2luLFxyXG4gIHNldFZhbHVlXHJcbn0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQge1xyXG4gIFJlc2V0Rm9ybSxcclxuICBTZXRGb3JtRGlydHksXHJcbiAgU2V0Rm9ybURpc2FibGVkLFxyXG4gIFNldEZvcm1FbmFibGVkLFxyXG4gIFNldEZvcm1QcmlzdGluZSxcclxuICBVcGRhdGVGb3JtLFxyXG4gIFVwZGF0ZUZvcm1EaXJ0eSxcclxuICBVcGRhdGVGb3JtRXJyb3JzLFxyXG4gIFVwZGF0ZUZvcm1TdGF0dXMsXHJcbiAgVXBkYXRlRm9ybVZhbHVlXHJcbn0gZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neHNGb3JtUGx1Z2luIGltcGxlbWVudHMgTmd4c1BsdWdpbiB7XHJcbiAgaGFuZGxlKHN0YXRlOiBhbnksIGV2ZW50OiBhbnksIG5leHQ6IE5neHNOZXh0UGx1Z2luRm4pIHtcclxuICAgIGNvbnN0IHR5cGUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGV2ZW50KTtcclxuXHJcbiAgICBsZXQgbmV4dFN0YXRlID0gc3RhdGU7XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1WYWx1ZS50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSB8fCB0eXBlID09PSBSZXNldEZvcm0udHlwZSkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC5wYXlsb2FkO1xyXG4gICAgICBjb25zdCBwYXlsb2FkVmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKVxyXG4gICAgICAgID8gdmFsdWUuc2xpY2UoKVxyXG4gICAgICAgIDogaXNPYmplY3RMaWtlKHZhbHVlKVxyXG4gICAgICAgID8geyAuLi52YWx1ZSB9XHJcbiAgICAgICAgOiB2YWx1ZTtcclxuICAgICAgY29uc3QgcGF0aCA9IHRoaXMuam9pblBhdGhXaXRoUHJvcGVydHlQYXRoKGV2ZW50KTtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBwYXRoLCBwYXlsb2FkVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBSZXNldEZvcm0udHlwZSkge1xyXG4gICAgICBjb25zdCBtb2RlbCA9IGdldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5tb2RlbGApO1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH1gLCB7IG1vZGVsOiBtb2RlbCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybVN0YXR1cy50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH0uc3RhdHVzYCwgZXZlbnQucGF5bG9hZC5zdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtRXJyb3JzLnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5lcnJvcnNgLCB7XHJcbiAgICAgICAgLi4uZXZlbnQucGF5bG9hZC5lcnJvcnNcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1EaXJ0eS50eXBlIHx8IHR5cGUgPT09IFVwZGF0ZUZvcm0udHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWQucGF0aH0uZGlydHlgLCBldmVudC5wYXlsb2FkLmRpcnR5KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybURpcnR5LnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXJ0eWAsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtUHJpc3RpbmUudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpcnR5YCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtRGlzYWJsZWQudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpc2FibGVkYCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1FbmFibGVkLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkfS5kaXNhYmxlZGAsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV4dChuZXh0U3RhdGUsIGV2ZW50KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgam9pblBhdGhXaXRoUHJvcGVydHlQYXRoKHsgcGF5bG9hZCB9OiBVcGRhdGVGb3JtVmFsdWUpOiBzdHJpbmcge1xyXG4gICAgbGV0IHBhdGggPSBgJHtwYXlsb2FkLnBhdGh9Lm1vZGVsYDtcclxuXHJcbiAgICBpZiAocGF5bG9hZC5wcm9wZXJ0eVBhdGgpIHtcclxuICAgICAgcGF0aCArPSBgLiR7cGF5bG9hZC5wcm9wZXJ0eVBhdGh9YDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGF0aDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh0YXJnZXQ6IHVua25vd24pOiB0YXJnZXQgaXMgb2JqZWN0IHtcclxuICByZXR1cm4gdGFyZ2V0ICE9PSBudWxsICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnO1xyXG59XHJcbiJdfQ==