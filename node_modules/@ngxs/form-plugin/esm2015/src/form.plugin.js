/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetForm, SetFormDirty, SetFormDisabled, SetFormEnabled, SetFormPristine, UpdateForm, UpdateFormDirty, UpdateFormErrors, UpdateFormStatus, UpdateFormValue } from './actions';
export class NgxsFormPlugin {
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        /** @type {?} */
        const type = getActionTypeFromInstance(event);
        /** @type {?} */
        let nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
            const { value } = event.payload;
            /** @type {?} */
            const payloadValue = Array.isArray(value)
                ? value.slice()
                : isObjectLike(value)
                    ? Object.assign({}, value) : value;
            /** @type {?} */
            const path = this.joinPathWithPropertyPath(event);
            nextState = setValue(nextState, path, payloadValue);
        }
        if (type === ResetForm.type) {
            /** @type {?} */
            const model = getValue(nextState, `${event.payload.path}.model`);
            nextState = setValue(nextState, `${event.payload.path}`, { model: model });
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.errors`, Object.assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, `${event.payload}.dirty`, false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, `${event.payload}.disabled`, false);
        }
        return next(nextState, event);
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    joinPathWithPropertyPath({ payload }) {
        /** @type {?} */
        let path = `${payload.path}.model`;
        if (payload.propertyPath) {
            path += `.${payload.propertyPath}`;
        }
        return path;
    }
}
NgxsFormPlugin.decorators = [
    { type: Injectable }
];
/**
 * @param {?} target
 * @return {?}
 */
function isObjectLike(target) {
    return target !== null && typeof target === 'object';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9mb3JtLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9mb3JtLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLFFBQVEsRUFHUixRQUFRLEVBQ1QsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osZUFBZSxFQUNmLGNBQWMsRUFDZCxlQUFlLEVBQ2YsVUFBVSxFQUNWLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDaEIsTUFBTSxXQUFXLENBQUM7QUFHbkIsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUFDekIsTUFBTSxDQUFDLEtBQVUsRUFBRSxLQUFVLEVBQUUsSUFBc0I7O2NBQzdDLElBQUksR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLENBQUM7O1lBRXpDLFNBQVMsR0FBRyxLQUFLO1FBRXJCLElBQUksSUFBSSxLQUFLLGVBQWUsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7a0JBQ2xGLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU87O2tCQUN6QixZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3ZDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNmLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO29CQUNyQixDQUFDLG1CQUFNLEtBQUssRUFDWixDQUFDLENBQUMsS0FBSzs7a0JBQ0gsSUFBSSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUM7WUFDakQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTs7a0JBQ3JCLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQztZQUNoRSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksSUFBSSxLQUFLLGdCQUFnQixDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM5RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2RjtRQUVELElBQUksSUFBSSxLQUFLLGdCQUFnQixDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM5RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLG9CQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDdkIsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUM3RCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyRjtRQUVELElBQUksSUFBSSxLQUFLLFlBQVksQ0FBQyxJQUFJLEVBQUU7WUFDOUIsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakU7UUFFRCxJQUFJLElBQUksS0FBSyxlQUFlLENBQUMsSUFBSSxFQUFFO1lBQ2pDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtZQUNqQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDaEMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckU7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRU8sd0JBQXdCLENBQUMsRUFBRSxPQUFPLEVBQW1COztZQUN2RCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxRQUFRO1FBRWxDLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDcEM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQWhFRixVQUFVOzs7Ozs7QUFtRVgsU0FBUyxZQUFZLENBQUMsTUFBZTtJQUNuQyxPQUFPLE1BQU0sS0FBSyxJQUFJLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQ3ZELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZSxcclxuICBnZXRWYWx1ZSxcclxuICBOZ3hzTmV4dFBsdWdpbkZuLFxyXG4gIE5neHNQbHVnaW4sXHJcbiAgc2V0VmFsdWVcclxufSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcbmltcG9ydCB7XHJcbiAgUmVzZXRGb3JtLFxyXG4gIFNldEZvcm1EaXJ0eSxcclxuICBTZXRGb3JtRGlzYWJsZWQsXHJcbiAgU2V0Rm9ybUVuYWJsZWQsXHJcbiAgU2V0Rm9ybVByaXN0aW5lLFxyXG4gIFVwZGF0ZUZvcm0sXHJcbiAgVXBkYXRlRm9ybURpcnR5LFxyXG4gIFVwZGF0ZUZvcm1FcnJvcnMsXHJcbiAgVXBkYXRlRm9ybVN0YXR1cyxcclxuICBVcGRhdGVGb3JtVmFsdWVcclxufSBmcm9tICcuL2FjdGlvbnMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0Zvcm1QbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBoYW5kbGUoc3RhdGU6IGFueSwgZXZlbnQ6IGFueSwgbmV4dDogTmd4c05leHRQbHVnaW5Gbikge1xyXG4gICAgY29uc3QgdHlwZSA9IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UoZXZlbnQpO1xyXG5cclxuICAgIGxldCBuZXh0U3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybVZhbHVlLnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlIHx8IHR5cGUgPT09IFJlc2V0Rm9ybS50eXBlKSB7XHJcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGV2ZW50LnBheWxvYWQ7XHJcbiAgICAgIGNvbnN0IHBheWxvYWRWYWx1ZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgPyB2YWx1ZS5zbGljZSgpXHJcbiAgICAgICAgOiBpc09iamVjdExpa2UodmFsdWUpXHJcbiAgICAgICAgPyB7IC4uLnZhbHVlIH1cclxuICAgICAgICA6IHZhbHVlO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5qb2luUGF0aFdpdGhQcm9wZXJ0eVBhdGgoZXZlbnQpO1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIHBhdGgsIHBheWxvYWRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFJlc2V0Rm9ybS50eXBlKSB7XHJcbiAgICAgIGNvbnN0IG1vZGVsID0gZ2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9Lm1vZGVsYCk7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofWAsIHsgbW9kZWw6IG1vZGVsIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBVcGRhdGVGb3JtU3RhdHVzLnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5zdGF0dXNgLCBldmVudC5wYXlsb2FkLnN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFVwZGF0ZUZvcm1FcnJvcnMudHlwZSB8fCB0eXBlID09PSBVcGRhdGVGb3JtLnR5cGUpIHtcclxuICAgICAgbmV4dFN0YXRlID0gc2V0VmFsdWUobmV4dFN0YXRlLCBgJHtldmVudC5wYXlsb2FkLnBhdGh9LmVycm9yc2AsIHtcclxuICAgICAgICAuLi5ldmVudC5wYXlsb2FkLmVycm9yc1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gVXBkYXRlRm9ybURpcnR5LnR5cGUgfHwgdHlwZSA9PT0gVXBkYXRlRm9ybS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZC5wYXRofS5kaXJ0eWAsIGV2ZW50LnBheWxvYWQuZGlydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBTZXRGb3JtRGlydHkudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpcnR5YCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1QcmlzdGluZS50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlydHlgLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFNldEZvcm1EaXNhYmxlZC50eXBlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHNldFZhbHVlKG5leHRTdGF0ZSwgYCR7ZXZlbnQucGF5bG9hZH0uZGlzYWJsZWRgLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZSA9PT0gU2V0Rm9ybUVuYWJsZWQudHlwZSkge1xyXG4gICAgICBuZXh0U3RhdGUgPSBzZXRWYWx1ZShuZXh0U3RhdGUsIGAke2V2ZW50LnBheWxvYWR9LmRpc2FibGVkYCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KG5leHRTdGF0ZSwgZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBqb2luUGF0aFdpdGhQcm9wZXJ0eVBhdGgoeyBwYXlsb2FkIH06IFVwZGF0ZUZvcm1WYWx1ZSk6IHN0cmluZyB7XHJcbiAgICBsZXQgcGF0aCA9IGAke3BheWxvYWQucGF0aH0ubW9kZWxgO1xyXG5cclxuICAgIGlmIChwYXlsb2FkLnByb3BlcnR5UGF0aCkge1xyXG4gICAgICBwYXRoICs9IGAuJHtwYXlsb2FkLnByb3BlcnR5UGF0aH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHRhcmdldDogdW5rbm93bik6IHRhcmdldCBpcyBvYmplY3Qge1xyXG4gIHJldHVybiB0YXJnZXQgIT09IG51bGwgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCc7XHJcbn1cclxuIl19