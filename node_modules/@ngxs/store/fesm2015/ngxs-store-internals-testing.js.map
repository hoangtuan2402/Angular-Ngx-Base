{"version":3,"file":"ngxs-store-internals-testing.js","sources":["ng://@ngxs/store/internals/testing/helpers/ngxs-test.component.ts","ng://@ngxs/store/internals/testing/helpers/ngxs-test.module.ts","ng://@ngxs/store/internals/testing/ngxs.setup.ts","ng://@ngxs/store/internals/testing/fresh-platform.ts","ng://@ngxs/store/internals/testing/skip-console-logging.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: ''\r\n})\r\nexport class NgxsTestComponent implements OnInit, AfterViewInit {\r\n  public ngOnInit(): void {}\r\n  public ngAfterViewInit(): void {}\r\n}\r\n","import { ApplicationRef, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { NgxsTestComponent } from './ngxs-test.component';\r\n\r\n@NgModule({\r\n  imports: [BrowserModule],\r\n  declarations: [NgxsTestComponent],\r\n  entryComponents: [NgxsTestComponent]\r\n})\r\nexport class NgxsTestModule {\r\n  public static ngDoBootstrap(app: ApplicationRef): void {\r\n    app.bootstrap(NgxsTestComponent);\r\n  }\r\n}\r\n","import { ApplicationRef } from '@angular/core';\r\nimport { TestBed, TestBedStatic } from '@angular/core/testing';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ÉµBrowserDomAdapter as BrowserDomAdapter } from '@angular/platform-browser';\r\nimport {\r\n  BrowserDynamicTestingModule,\r\n  platformBrowserDynamicTesting\r\n} from '@angular/platform-browser-dynamic/testing';\r\nimport { NgxsModule, Store } from '@ngxs/store';\r\n\r\nimport { NgxsTestModule } from './helpers/ngxs-test.module';\r\nimport { NgxsOptionsTesting, NgxsTesting } from './symbol';\r\n\r\nexport class NgxsTestBed {\r\n  public static configureTestingStates(options: NgxsOptionsTesting): NgxsTesting {\r\n    this.resetTestBed();\r\n\r\n    if (options.before) {\r\n      options.before();\r\n    }\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        NgxsTestModule,\r\n        NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),\r\n        ...(options.imports || [])\r\n      ]\r\n    }).compileComponents();\r\n\r\n    NgxsTestBed.ngxsBootstrap();\r\n\r\n    return {\r\n      get store(): Store {\r\n        return TestBed.inject(Store);\r\n      },\r\n      get getTestBed(): TestBedStatic {\r\n        return TestBed;\r\n      }\r\n    };\r\n  }\r\n\r\n  private static ngxsBootstrap(): void {\r\n    NgxsTestBed.createRootNode();\r\n    NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));\r\n  }\r\n\r\n  private static resetTestBed(): void {\r\n    TestBed.resetTestEnvironment();\r\n    TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());\r\n  }\r\n\r\n  private static createRootNode(selector = 'app-root'): void {\r\n    const document = TestBed.inject(DOCUMENT);\r\n    const adapter = new BrowserDomAdapter();\r\n    const root = adapter.createElement(selector);\r\n    document.body.appendChild(root);\r\n  }\r\n}\r\n","import { TestBed } from '@angular/core/testing';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\r\nimport { VERSION, destroyPlatform, createPlatform } from '@angular/core';\r\n\r\nfunction createRootElement() {\r\n  const document = TestBed.inject(DOCUMENT);\r\n  const root = getDOM().createElement('app-root', document);\r\n  document.body.appendChild(root);\r\n}\r\n\r\nfunction removeRootElement() {\r\n  const root: Element = document.getElementsByTagName('app-root').item(0)!;\r\n  try {\r\n    document.body.removeChild(root);\r\n  } catch {}\r\n}\r\n\r\nfunction destroyPlatformBeforeBootstrappingTheNewOne() {\r\n  destroyPlatform();\r\n  createRootElement();\r\n}\r\n\r\n// As we create our custom platform via `bootstrapModule`\r\n// we have to destroy it after assetions and revert\r\n// the previous one\r\nfunction resetPlatformAfterBootstrapping() {\r\n  removeRootElement();\r\n  destroyPlatform();\r\n  const version = +VERSION.major;\r\n  // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa\r\n  if (version < 14) {\r\n    createPlatform(TestBed);\r\n  }\r\n}\r\n\r\nexport function freshPlatform(fn: (done?: VoidFunction) => Promise<void>) {\r\n  let resolve: VoidFunction | null = null;\r\n  let reject: ((error: Error) => void) | null = null;\r\n  let whenDoneIsCalledPromise: Promise<void> | null = null;\r\n\r\n  const hasDoneArgument = fn.length === 1;\r\n\r\n  if (hasDoneArgument) {\r\n    whenDoneIsCalledPromise = new Promise<void>((_resolve, _reject) => {\r\n      resolve = _resolve;\r\n      reject = _reject;\r\n    });\r\n  }\r\n\r\n  return async function testWithAFreshPlatform() {\r\n    try {\r\n      destroyPlatformBeforeBootstrappingTheNewOne();\r\n\r\n      if (hasDoneArgument) {\r\n        await fn((error?: Error) => {\r\n          if (error) {\r\n            reject!(error);\r\n          } else {\r\n            resolve!();\r\n          }\r\n        });\r\n        await whenDoneIsCalledPromise!;\r\n      } else {\r\n        await fn();\r\n      }\r\n    } finally {\r\n      resetPlatformAfterBootstrapping();\r\n    }\r\n  };\r\n}\r\n","/// <reference types=\"jest\" />\r\n\r\nexport function skipConsoleLogging<T extends (...args: any[]) => any>(fn: T): ReturnType<T> {\r\n  const consoleSpies = [\r\n    jest.spyOn(console, 'log').mockImplementation(() => {}),\r\n    jest.spyOn(console, 'warn').mockImplementation(() => {}),\r\n    jest.spyOn(console, 'error').mockImplementation(() => {}),\r\n    jest.spyOn(console, 'info').mockImplementation(() => {})\r\n  ];\r\n  function restoreSpies() {\r\n    consoleSpies.forEach(spy => spy.mockRestore());\r\n  }\r\n  let restoreSpyAsync = false;\r\n  try {\r\n    const returnValue = fn();\r\n    if (returnValue instanceof Promise) {\r\n      restoreSpyAsync = true;\r\n      return returnValue.finally(() => restoreSpies()) as ReturnType<T>;\r\n    }\r\n    return returnValue;\r\n  } finally {\r\n    if (!restoreSpyAsync) {\r\n      restoreSpies();\r\n    }\r\n  }\r\n}\r\n"],"names":["BrowserDomAdapter","getDOM"],"mappings":"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"}