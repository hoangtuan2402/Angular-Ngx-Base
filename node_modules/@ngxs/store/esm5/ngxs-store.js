/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { NgxsModule, Action, Store, State, Select, SelectorOptions, Actions, getSelectorMetadata, getStoreMetadata, ensureStoreMetadata, ensureSelectorMetadata, ofAction, ofActionDispatched, ofActionSuccessful, ofActionCanceled, ofActionErrored, ofActionCompleted, NgxsSimpleChange, Selector, getActionTypeFromInstance, actionMatcher, createSelector, NoopNgxsExecutionStrategy, StateToken, NGXS_PLUGINS, StateStream, setValue, getValue, InitState, UpdateState } from './index';
export { InternalActions as ɵb, OrderedSubject as ɵa } from './src/actions-stream';
export { InternalNgxsExecutionStrategy as ɵq } from './src/execution/internal-ngxs-execution-strategy';
export { NGXS_EXECUTION_STRATEGY as ɵi, USER_PROVIDED_NGXS_EXECUTION_STRATEGY as ɵh } from './src/execution/symbols';
export { InternalDispatchedActionResults as ɵl, InternalDispatcher as ɵm } from './src/internal/dispatcher';
export { ensureSelectorMetadata as ɵu, ensureStoreMetadata as ɵs, getSelectorMetadata as ɵv, getStoreMetadata as ɵt } from './src/internal/internals';
export { LifecycleStateManager as ɵw } from './src/internal/lifecycle-state-manager';
export { StateContextFactory as ɵn } from './src/internal/state-context-factory';
export { StateFactory as ɵk } from './src/internal/state-factory';
export { InternalStateOperations as ɵo } from './src/internal/state-operations';
export { NgxsFeatureModule as ɵx } from './src/modules/ngxs-feature.module';
export { NgxsRootModule as ɵj } from './src/modules/ngxs-root.module';
export { PluginManager as ɵp } from './src/plugin-manager';
export { FEATURE_STATE_TOKEN as ɵd, NgxsConfig as ɵf, ROOT_STATE_TOKEN as ɵc, SELECTOR_META_KEY as ɵe } from './src/symbols';
export { mergeDeep as ɵg } from './src/utils/utils';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsibmd4cy1zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsbWRBQWMsU0FBUyxDQUFDO0FBRXhCLE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLGNBQWMsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRixPQUFPLEVBQUMsNkJBQTZCLElBQUksRUFBRSxFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFDckcsT0FBTyxFQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBQyxxQ0FBcUMsSUFBSSxFQUFFLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsSCxPQUFPLEVBQUMsK0JBQStCLElBQUksRUFBRSxFQUFDLGtCQUFrQixJQUFJLEVBQUUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pHLE9BQU8sRUFBMEIsc0JBQXNCLElBQUksRUFBRSxFQUFDLG1CQUFtQixJQUFJLEVBQUUsRUFBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUMsZ0JBQWdCLElBQUksRUFBRSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDMUssT0FBTyxFQUFDLHFCQUFxQixJQUFJLEVBQUUsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ25GLE9BQU8sRUFBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUMsWUFBWSxJQUFJLEVBQUUsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyx1QkFBdUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RSxPQUFPLEVBQUMsaUJBQWlCLElBQUksRUFBRSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDMUUsT0FBTyxFQUFDLGNBQWMsSUFBSSxFQUFFLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUMsYUFBYSxJQUFJLEVBQUUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXpELE9BQU8sRUFBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUMsVUFBVSxJQUFJLEVBQUUsRUFBQyxnQkFBZ0IsSUFBSSxFQUFFLEVBQUMsaUJBQWlCLElBQUksRUFBRSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBQyxTQUFTLElBQUksRUFBRSxFQUFDLE1BQU0sbUJBQW1CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5kZXgnO1xuXG5leHBvcnQge0ludGVybmFsQWN0aW9ucyBhcyDJtWIsT3JkZXJlZFN1YmplY3QgYXMgybVhfSBmcm9tICcuL3NyYy9hY3Rpb25zLXN0cmVhbSc7XG5leHBvcnQge0ludGVybmFsTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IGFzIMm1cX0gZnJvbSAnLi9zcmMvZXhlY3V0aW9uL2ludGVybmFsLW5neHMtZXhlY3V0aW9uLXN0cmF0ZWd5JztcbmV4cG9ydCB7TkdYU19FWEVDVVRJT05fU1RSQVRFR1kgYXMgybVpLFVTRVJfUFJPVklERURfTkdYU19FWEVDVVRJT05fU1RSQVRFR1kgYXMgybVofSBmcm9tICcuL3NyYy9leGVjdXRpb24vc3ltYm9scyc7XG5leHBvcnQge0ludGVybmFsRGlzcGF0Y2hlZEFjdGlvblJlc3VsdHMgYXMgybVsLEludGVybmFsRGlzcGF0Y2hlciBhcyDJtW19IGZyb20gJy4vc3JjL2ludGVybmFsL2Rpc3BhdGNoZXInO1xuZXhwb3J0IHtTdGF0ZUNsYXNzSW50ZXJuYWwgYXMgybVyLGVuc3VyZVNlbGVjdG9yTWV0YWRhdGEgYXMgybV1LGVuc3VyZVN0b3JlTWV0YWRhdGEgYXMgybVzLGdldFNlbGVjdG9yTWV0YWRhdGEgYXMgybV2LGdldFN0b3JlTWV0YWRhdGEgYXMgybV0fSBmcm9tICcuL3NyYy9pbnRlcm5hbC9pbnRlcm5hbHMnO1xuZXhwb3J0IHtMaWZlY3ljbGVTdGF0ZU1hbmFnZXIgYXMgybV3fSBmcm9tICcuL3NyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlcic7XG5leHBvcnQge1N0YXRlQ29udGV4dEZhY3RvcnkgYXMgybVufSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1jb250ZXh0LWZhY3RvcnknO1xuZXhwb3J0IHtTdGF0ZUZhY3RvcnkgYXMgybVrfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1mYWN0b3J5JztcbmV4cG9ydCB7SW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnMgYXMgybVvfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1vcGVyYXRpb25zJztcbmV4cG9ydCB7Tmd4c0ZlYXR1cmVNb2R1bGUgYXMgybV4fSBmcm9tICcuL3NyYy9tb2R1bGVzL25neHMtZmVhdHVyZS5tb2R1bGUnO1xuZXhwb3J0IHtOZ3hzUm9vdE1vZHVsZSBhcyDJtWp9IGZyb20gJy4vc3JjL21vZHVsZXMvbmd4cy1yb290Lm1vZHVsZSc7XG5leHBvcnQge1BsdWdpbk1hbmFnZXIgYXMgybVwfSBmcm9tICcuL3NyYy9wbHVnaW4tbWFuYWdlcic7XG5leHBvcnQge1Rva2VuTmFtZSBhcyDJtXl9IGZyb20gJy4vc3JjL3N0YXRlLXRva2VuL3N5bWJvbHMnO1xuZXhwb3J0IHtGRUFUVVJFX1NUQVRFX1RPS0VOIGFzIMm1ZCxOZ3hzQ29uZmlnIGFzIMm1ZixST09UX1NUQVRFX1RPS0VOIGFzIMm1YyxTRUxFQ1RPUl9NRVRBX0tFWSBhcyDJtWV9IGZyb20gJy4vc3JjL3N5bWJvbHMnO1xuZXhwb3J0IHttZXJnZURlZXAgYXMgybVnfSBmcm9tICcuL3NyYy91dGlscy91dGlscyc7Il19