/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, inject, INJECTOR, ɵglobal } from '@angular/core';
import { NoopNgxsExecutionStrategy } from './noop-ngxs-execution-strategy';
import { DispatchOutsideZoneNgxsExecutionStrategy } from './dispatch-outside-zone-ngxs-execution-strategy';
/**
 * The strategy that might be provided by users through `options.executionStrategy`.
 * @type {?}
 */
export var USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');
/*
 * Internal execution strategy injection token
 */
/** @type {?} */
export var NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var injector = inject(INJECTOR);
        /** @type {?} */
        var executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);
        return executionStrategy
            ? injector.get(executionStrategy)
            : injector.get(typeof ɵglobal.Zone !== 'undefined'
                ? DispatchOutsideZoneNgxsExecutionStrategy
                : NoopNgxsExecutionStrategy);
    })
});
/**
 * @record
 */
export function NgxsExecutionStrategy() { }
if (false) {
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    NgxsExecutionStrategy.prototype.enter = function (func) { };
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    NgxsExecutionStrategy.prototype.leave = function (func) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2V4ZWN1dGlvbi9zeW1ib2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQVEsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDOzs7OztBQUszRyxNQUFNLEtBQU8scUNBQXFDLEdBQUcsSUFBSSxjQUFjLENBRXJFLHVDQUF1QyxDQUFDOzs7OztBQUsxQyxNQUFNLEtBQU8sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3ZELHlCQUF5QixFQUN6QjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFOztZQUNELFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDOztZQUMzQixpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDO1FBQzdFLE9BQU8saUJBQWlCO1lBQ3RCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNWLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxXQUFXO2dCQUNqQyxDQUFDLENBQUMsd0NBQXdDO2dCQUMxQyxDQUFDLENBQUMseUJBQXlCLENBQzlCLENBQUM7SUFDUixDQUFDLENBQUE7Q0FDRixDQUNGOzs7O0FBS0QsMkNBR0M7Ozs7Ozs7SUFGQyw0REFBMkI7Ozs7OztJQUMzQiw0REFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgaW5qZWN0LCBJTkpFQ1RPUiwgVHlwZSwgybVnbG9iYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5vb3BOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25vb3Atbmd4cy1leGVjdXRpb24tc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBEaXNwYXRjaE91dHNpZGVab25lTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9kaXNwYXRjaC1vdXRzaWRlLXpvbmUtbmd4cy1leGVjdXRpb24tc3RyYXRlZ3knO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBzdHJhdGVneSB0aGF0IG1pZ2h0IGJlIHByb3ZpZGVkIGJ5IHVzZXJzIHRocm91Z2ggYG9wdGlvbnMuZXhlY3V0aW9uU3RyYXRlZ3lgLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVTRVJfUFJPVklERURfTkdYU19FWEVDVVRJT05fU1RSQVRFR1kgPSBuZXcgSW5qZWN0aW9uVG9rZW48XHJcbiAgVHlwZTxOZ3hzRXhlY3V0aW9uU3RyYXRlZ3k+IHwgdW5kZWZpbmVkXHJcbj4oJ1VTRVJfUFJPVklERURfTkdYU19FWEVDVVRJT05fU1RSQVRFR1knKTtcclxuXHJcbi8qXHJcbiAqIEludGVybmFsIGV4ZWN1dGlvbiBzdHJhdGVneSBpbmplY3Rpb24gdG9rZW5cclxuICovXHJcbmV4cG9ydCBjb25zdCBOR1hTX0VYRUNVVElPTl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOZ3hzRXhlY3V0aW9uU3RyYXRlZ3k+KFxyXG4gICdOR1hTX0VYRUNVVElPTl9TVFJBVEVHWScsXHJcbiAge1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gICAgZmFjdG9yeTogKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbmplY3RvciA9IGluamVjdChJTkpFQ1RPUik7XHJcbiAgICAgIGNvbnN0IGV4ZWN1dGlvblN0cmF0ZWd5ID0gaW5qZWN0b3IuZ2V0KFVTRVJfUFJPVklERURfTkdYU19FWEVDVVRJT05fU1RSQVRFR1kpO1xyXG4gICAgICByZXR1cm4gZXhlY3V0aW9uU3RyYXRlZ3lcclxuICAgICAgICA/IGluamVjdG9yLmdldChleGVjdXRpb25TdHJhdGVneSlcclxuICAgICAgICA6IGluamVjdG9yLmdldChcclxuICAgICAgICAgICAgdHlwZW9mIMm1Z2xvYmFsLlpvbmUgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgPyBEaXNwYXRjaE91dHNpZGVab25lTmd4c0V4ZWN1dGlvblN0cmF0ZWd5XHJcbiAgICAgICAgICAgICAgOiBOb29wTmd4c0V4ZWN1dGlvblN0cmF0ZWd5XHJcbiAgICAgICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuKTtcclxuXHJcbi8qXHJcbiAqIEV4ZWN1dGlvbiBzdHJhdGVneSBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IHtcclxuICBlbnRlcjxUPihmdW5jOiAoKSA9PiBUKTogVDtcclxuICBsZWF2ZTxUPihmdW5jOiAoKSA9PiBUKTogVDtcclxufVxyXG4iXX0=