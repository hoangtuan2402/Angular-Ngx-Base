/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ɵivyEnabled } from '@angular/core';
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';
/** @type {?} */
var DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
export function createSelectObservable(selector, store) {
    // We're doing this stuff to tree-shake the `SelectFactory` when the user
    // is running Ivy since NGXS will select the state from the provided `store` argument.
    return ɵivyEnabled
        ? createSelectObservableIvy(selector, store)
        : createSelectObservableViewEngine(selector);
}
/**
 * @param {?} config
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(config, name, rawSelector, paths) {
    if (paths === void 0) { paths = []; }
    rawSelector = rawSelector || removeDollarAtTheEnd(name);
    if (typeof rawSelector !== 'string') {
        return rawSelector;
    }
    else {
        /** @type {?} */
        var propsArray = paths.length
            ? tslib_1.__spread([rawSelector], paths) : rawSelector.split('.');
        return ɵivyEnabled
            ? createSelectorFnIvy(propsArray, config)
            : createSelectorFnViewEngine(propsArray);
    }
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    var lastCharIndex = name.length - 1;
    /** @type {?} */
    var dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
function createSelectObservableIvy(selector, store) {
    return ngDevMode && !store ? throwSelectFactoryNotConnectedError() : (/** @type {?} */ (store)).select(selector);
}
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
function createSelectObservableViewEngine(selector) {
    return SelectFactory.store
        ? SelectFactory.store.select(selector)
        : throwSelectFactoryNotConnectedError();
}
/**
 * @param {?} propsArray
 * @param {?} config
 * @return {?}
 */
function createSelectorFnIvy(propsArray, config) {
    return ngDevMode && !config
        ? throwSelectFactoryNotConnectedError()
        : propGetter(propsArray, (/** @type {?} */ (config)));
}
/**
 * @param {?} propsArray
 * @return {?}
 */
function createSelectorFnViewEngine(propsArray) {
    return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQVEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHakQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0JBQStCLENBQUM7O0lBRTlFLGdCQUFnQixHQUFHLEVBQUU7Ozs7Ozs7QUFFM0IsTUFBTSxVQUFVLHNCQUFzQixDQUNwQyxRQUFhLEVBQ2IsS0FBbUI7SUFFbkIseUVBQXlFO0lBQ3pFLHNGQUFzRjtJQUN0RixPQUFPLFdBQVc7UUFDaEIsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7UUFDNUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pELENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixNQUF5QixFQUN6QixJQUFZLEVBQ1osV0FBaUIsRUFDakIsS0FBb0I7SUFBcEIsc0JBQUEsRUFBQSxVQUFvQjtJQUVwQixXQUFXLEdBQUcsV0FBVyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXhELElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ25DLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO1NBQU07O1lBQ0MsVUFBVSxHQUFhLEtBQUssQ0FBQyxNQUFNO1lBQ3ZDLENBQUMsbUJBQUUsV0FBVyxHQUFLLEtBQUssRUFDeEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBRTFCLE9BQU8sV0FBVztZQUNoQixDQUFDLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQztZQUN6QyxDQUFDLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDNUM7QUFDSCxDQUFDOzs7Ozs7QUFLRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBWTs7UUFDekMsYUFBYSxHQUFXLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQzs7UUFDdkMsY0FBYyxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssZ0JBQWdCO0lBQ25GLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzlELENBQUM7Ozs7Ozs7QUFjRCxTQUFTLHlCQUF5QixDQUNoQyxRQUFhLEVBQ2IsS0FBbUI7SUFFbkIsT0FBTyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFBLEtBQUssRUFBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvRixDQUFDOzs7Ozs7QUFFRCxTQUFTLGdDQUFnQyxDQUFVLFFBQWE7SUFDOUQsT0FBTyxhQUFhLENBQUMsS0FBSztRQUN4QixDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO0FBQzVDLENBQUM7Ozs7OztBQUVELFNBQVMsbUJBQW1CLENBQUMsVUFBb0IsRUFBRSxNQUF5QjtJQUMxRSxPQUFPLFNBQVMsSUFBSSxDQUFDLE1BQU07UUFDekIsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFO1FBQ3ZDLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLG1CQUFBLE1BQU0sRUFBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQzs7Ozs7QUFFRCxTQUFTLDBCQUEwQixDQUFDLFVBQW9CO0lBQ3RELE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBQSxhQUFhLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgybVpdnlFbmFibGVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IHByb3BHZXR0ZXIgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBTZWxlY3RGYWN0b3J5IH0gZnJvbSAnLi9zZWxlY3QtZmFjdG9yeSc7XHJcbmltcG9ydCB7IFN0YXRlVG9rZW4gfSBmcm9tICcuLi8uLi9zdGF0ZS10b2tlbi9zdGF0ZS10b2tlbic7XHJcbmltcG9ydCB7IEV4dHJhY3RUb2tlblR5cGUgfSBmcm9tICcuLi8uLi9zdGF0ZS10b2tlbi9zeW1ib2xzJztcclxuaW1wb3J0IHsgdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IgfSBmcm9tICcuLi8uLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcblxyXG5jb25zdCBET0xMQVJfQ0hBUl9DT0RFID0gMzY7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZTxUID0gYW55PihcclxuICBzZWxlY3RvcjogYW55LFxyXG4gIHN0b3JlOiBTdG9yZSB8IG51bGxcclxuKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgLy8gV2UncmUgZG9pbmcgdGhpcyBzdHVmZiB0byB0cmVlLXNoYWtlIHRoZSBgU2VsZWN0RmFjdG9yeWAgd2hlbiB0aGUgdXNlclxyXG4gIC8vIGlzIHJ1bm5pbmcgSXZ5IHNpbmNlIE5HWFMgd2lsbCBzZWxlY3QgdGhlIHN0YXRlIGZyb20gdGhlIHByb3ZpZGVkIGBzdG9yZWAgYXJndW1lbnQuXHJcbiAgcmV0dXJuIMm1aXZ5RW5hYmxlZFxyXG4gICAgPyBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlSXZ5KHNlbGVjdG9yLCBzdG9yZSlcclxuICAgIDogY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZVZpZXdFbmdpbmUoc2VsZWN0b3IpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGbihcclxuICBjb25maWc6IE5neHNDb25maWcgfCBudWxsLFxyXG4gIG5hbWU6IHN0cmluZyxcclxuICByYXdTZWxlY3Rvcj86IGFueSxcclxuICBwYXRoczogc3RyaW5nW10gPSBbXVxyXG4pOiBTZWxlY3RvckZuIHtcclxuICByYXdTZWxlY3RvciA9IHJhd1NlbGVjdG9yIHx8IHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWUpO1xyXG5cclxuICBpZiAodHlwZW9mIHJhd1NlbGVjdG9yICE9PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIHJhd1NlbGVjdG9yO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBwcm9wc0FycmF5OiBzdHJpbmdbXSA9IHBhdGhzLmxlbmd0aFxyXG4gICAgICA/IFtyYXdTZWxlY3RvciwgLi4ucGF0aHNdXHJcbiAgICAgIDogcmF3U2VsZWN0b3Iuc3BsaXQoJy4nKTtcclxuXHJcbiAgICByZXR1cm4gybVpdnlFbmFibGVkXHJcbiAgICAgID8gY3JlYXRlU2VsZWN0b3JGbkl2eShwcm9wc0FycmF5LCBjb25maWcpXHJcbiAgICAgIDogY3JlYXRlU2VsZWN0b3JGblZpZXdFbmdpbmUocHJvcHNBcnJheSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQGV4YW1wbGUgSWYgYGZvbyRgID0+IG1ha2UgaXQganVzdCBgZm9vYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgbGFzdENoYXJJbmRleDogbnVtYmVyID0gbmFtZS5sZW5ndGggLSAxO1xyXG4gIGNvbnN0IGRvbGxhckF0VGhlRW5kOiBib29sZWFuID0gbmFtZS5jaGFyQ29kZUF0KGxhc3RDaGFySW5kZXgpID09PSBET0xMQVJfQ0hBUl9DT0RFO1xyXG4gIHJldHVybiBkb2xsYXJBdFRoZUVuZCA/IG5hbWUuc2xpY2UoMCwgbGFzdENoYXJJbmRleCkgOiBuYW1lO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTZWxlY3RvckZuID1cclxuICB8ICgoc3RhdGU6IGFueSwgLi4uc3RhdGVzOiBhbnlbXSkgPT4gYW55KVxyXG4gIHwgc3RyaW5nXHJcbiAgfCBUeXBlPGFueT5cclxuICB8IFN0YXRlVG9rZW48YW55PjtcclxuXHJcbmV4cG9ydCB0eXBlIFByb3BlcnR5VHlwZTxUPiA9IFQgZXh0ZW5kcyBTdGF0ZVRva2VuPGFueT5cclxuICA/IE9ic2VydmFibGU8RXh0cmFjdFRva2VuVHlwZTxUPj5cclxuICA6IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueVxyXG4gID8gT2JzZXJ2YWJsZTxSZXR1cm5UeXBlPFQ+PlxyXG4gIDogYW55O1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZUl2eTxUID0gYW55PihcclxuICBzZWxlY3RvcjogYW55LFxyXG4gIHN0b3JlOiBTdG9yZSB8IG51bGxcclxuKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgcmV0dXJuIG5nRGV2TW9kZSAmJiAhc3RvcmUgPyB0aHJvd1NlbGVjdEZhY3RvcnlOb3RDb25uZWN0ZWRFcnJvcigpIDogc3RvcmUhLnNlbGVjdChzZWxlY3Rvcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9ic2VydmFibGVWaWV3RW5naW5lPFQgPSBhbnk+KHNlbGVjdG9yOiBhbnkpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICByZXR1cm4gU2VsZWN0RmFjdG9yeS5zdG9yZVxyXG4gICAgPyBTZWxlY3RGYWN0b3J5LnN0b3JlLnNlbGVjdChzZWxlY3RvcilcclxuICAgIDogdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGbkl2eShwcm9wc0FycmF5OiBzdHJpbmdbXSwgY29uZmlnOiBOZ3hzQ29uZmlnIHwgbnVsbCkge1xyXG4gIHJldHVybiBuZ0Rldk1vZGUgJiYgIWNvbmZpZ1xyXG4gICAgPyB0aHJvd1NlbGVjdEZhY3RvcnlOb3RDb25uZWN0ZWRFcnJvcigpXHJcbiAgICA6IHByb3BHZXR0ZXIocHJvcHNBcnJheSwgY29uZmlnISk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRm5WaWV3RW5naW5lKHByb3BzQXJyYXk6IHN0cmluZ1tdKSB7XHJcbiAgcmV0dXJuIHByb3BHZXR0ZXIocHJvcHNBcnJheSwgU2VsZWN0RmFjdG9yeS5jb25maWchKTtcclxufVxyXG4iXX0=