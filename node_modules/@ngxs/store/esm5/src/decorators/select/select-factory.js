/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Store } from '../../store';
import { NgxsConfig } from '../../symbols';
import * as i0 from "@angular/core";
import * as i1 from "../../store";
import * as i2 from "../../symbols";
/**
 * Allows the select decorator to get access to the DI store, this is used internally
 * in `\@Select` decorator.
 */
var SelectFactory = /** @class */ (function () {
    function SelectFactory(store, config) {
        SelectFactory.store = store;
        SelectFactory.config = config;
    }
    /**
     * @return {?}
     */
    SelectFactory.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        SelectFactory.store = null;
        SelectFactory.config = null;
    };
    SelectFactory.store = null;
    SelectFactory.config = null;
    SelectFactory.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    SelectFactory.ctorParameters = function () { return [
        { type: Store },
        { type: NgxsConfig }
    ]; };
    /** @nocollapse */ SelectFactory.ngInjectableDef = i0.defineInjectable({ factory: function SelectFactory_Factory() { return new SelectFactory(i0.inject(i1.Store), i0.inject(i2.NgxsConfig)); }, token: SelectFactory, providedIn: "root" });
    return SelectFactory;
}());
export { SelectFactory };
if (false) {
    /** @type {?} */
    SelectFactory.store;
    /** @type {?} */
    SelectFactory.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3NlbGVjdC9zZWxlY3QtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUV0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBTTNDO0lBS0UsdUJBQVksS0FBWSxFQUFFLE1BQWtCO1FBQzFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDRSxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUMzQixhQUFhLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDO0lBWGEsbUJBQUssR0FBaUIsSUFBSSxDQUFDO0lBQzNCLG9CQUFNLEdBQXNCLElBQUksQ0FBQzs7Z0JBSGhELFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBUHpCLEtBQUs7Z0JBQ0wsVUFBVTs7O3dCQUhuQjtDQXVCQyxBQWRELElBY0M7U0FiWSxhQUFhOzs7SUFDeEIsb0JBQXlDOztJQUN6QyxxQkFBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogQWxsb3dzIHRoZSBzZWxlY3QgZGVjb3JhdG9yIHRvIGdldCBhY2Nlc3MgdG8gdGhlIERJIHN0b3JlLCB0aGlzIGlzIHVzZWQgaW50ZXJuYWxseVxyXG4gKiBpbiBgQFNlbGVjdGAgZGVjb3JhdG9yLlxyXG4gKi9cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNlbGVjdEZhY3RvcnkgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gIHB1YmxpYyBzdGF0aWMgc3RvcmU6IFN0b3JlIHwgbnVsbCA9IG51bGw7XHJcbiAgcHVibGljIHN0YXRpYyBjb25maWc6IE5neHNDb25maWcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3Ioc3RvcmU6IFN0b3JlLCBjb25maWc6IE5neHNDb25maWcpIHtcclxuICAgIFNlbGVjdEZhY3Rvcnkuc3RvcmUgPSBzdG9yZTtcclxuICAgIFNlbGVjdEZhY3RvcnkuY29uZmlnID0gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBTZWxlY3RGYWN0b3J5LnN0b3JlID0gbnVsbDtcclxuICAgIFNlbGVjdEZhY3RvcnkuY29uZmlnID0gbnVsbDtcclxuICB9XHJcbn1cclxuIl19