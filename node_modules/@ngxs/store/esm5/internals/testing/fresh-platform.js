/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    var document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    var root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    var root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    var version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    var resolve = null;
    /** @type {?} */
    var reject = null;
    /** @type {?} */
    var whenDoneIsCalledPromise = null;
    /** @type {?} */
    var hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        function (_resolve, _reject) {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 6, 7]);
                        destroyPlatformBeforeBootstrappingTheNewOne();
                        if (!hasDoneArgument) return [3 /*break*/, 3];
                        return [4 /*yield*/, fn((/**
                             * @param {?=} error
                             * @return {?}
                             */
                            function (error) {
                                if (error) {
                                    (/** @type {?} */ (reject))(error);
                                }
                                else {
                                    (/** @type {?} */ (resolve))();
                                }
                            }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (/** @type {?} */ (whenDoneIsCalledPromise))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, fn()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        resetPlatformAfterBootstrapping();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV6RSxTQUFTLGlCQUFpQjs7UUFDbEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztRQUNuQyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7SUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQzs7OztBQUVELFNBQVMsaUJBQWlCOztRQUNsQixJQUFJLEdBQVksbUJBQUEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQztJQUN4RSxJQUFJO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFBQyxXQUFNLEdBQUU7QUFDWixDQUFDOzs7O0FBRUQsU0FBUywyQ0FBMkM7SUFDbEQsZUFBZSxFQUFFLENBQUM7SUFDbEIsaUJBQWlCLEVBQUUsQ0FBQztBQUN0QixDQUFDOzs7Ozs7O0FBS0QsU0FBUywrQkFBK0I7SUFDdEMsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixlQUFlLEVBQUUsQ0FBQzs7UUFDWixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztJQUM5QixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUEwQzs7UUFDbEUsT0FBTyxHQUF3QixJQUFJOztRQUNuQyxNQUFNLEdBQW9DLElBQUk7O1FBQzlDLHVCQUF1QixHQUF5QixJQUFJOztRQUVsRCxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO0lBRXZDLElBQUksZUFBZSxFQUFFO1FBQ25CLHVCQUF1QixHQUFHLElBQUksT0FBTzs7Ozs7UUFBTyxVQUFDLFFBQVEsRUFBRSxPQUFPO1lBQzVELE9BQU8sR0FBRyxRQUFRLENBQUM7WUFDbkIsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUNuQixDQUFDLEVBQUMsQ0FBQztLQUNKO0lBRUQ7OztJQUFPLFNBQWUsc0JBQXNCOzs7Ozs7d0JBRXhDLDJDQUEyQyxFQUFFLENBQUM7NkJBRTFDLGVBQWUsRUFBZix3QkFBZTt3QkFDakIscUJBQU0sRUFBRTs7Ozs0QkFBQyxVQUFDLEtBQWE7Z0NBQ3JCLElBQUksS0FBSyxFQUFFO29DQUNULG1CQUFBLE1BQU0sRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lDQUNoQjtxQ0FBTTtvQ0FDTCxtQkFBQSxPQUFPLEVBQUMsRUFBRSxDQUFDO2lDQUNaOzRCQUNILENBQUMsRUFBQyxFQUFBOzt3QkFORixTQU1FLENBQUM7d0JBQ0gscUJBQU0sbUJBQUEsdUJBQXVCLEVBQUMsRUFBQTs7d0JBQTlCLFNBQThCLENBQUM7OzRCQUUvQixxQkFBTSxFQUFFLEVBQUUsRUFBQTs7d0JBQVYsU0FBVSxDQUFDOzs7O3dCQUdiLCtCQUErQixFQUFFLENBQUM7Ozs7OztLQUVyQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IMm1Z2V0RE9NIGFzIGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBWRVJTSU9OLCBkZXN0cm95UGxhdGZvcm0sIGNyZWF0ZVBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVSb290RWxlbWVudCgpIHtcclxuICBjb25zdCBkb2N1bWVudCA9IFRlc3RCZWQuaW5qZWN0KERPQ1VNRU5UKTtcclxuICBjb25zdCByb290ID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnYXBwLXJvb3QnLCBkb2N1bWVudCk7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUm9vdEVsZW1lbnQoKSB7XHJcbiAgY29uc3Qgcm9vdDogRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhcHAtcm9vdCcpLml0ZW0oMCkhO1xyXG4gIHRyeSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHJvb3QpO1xyXG4gIH0gY2F0Y2gge31cclxufVxyXG5cclxuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpIHtcclxuICBkZXN0cm95UGxhdGZvcm0oKTtcclxuICBjcmVhdGVSb290RWxlbWVudCgpO1xyXG59XHJcblxyXG4vLyBBcyB3ZSBjcmVhdGUgb3VyIGN1c3RvbSBwbGF0Zm9ybSB2aWEgYGJvb3RzdHJhcE1vZHVsZWBcclxuLy8gd2UgaGF2ZSB0byBkZXN0cm95IGl0IGFmdGVyIGFzc2V0aW9ucyBhbmQgcmV2ZXJ0XHJcbi8vIHRoZSBwcmV2aW91cyBvbmVcclxuZnVuY3Rpb24gcmVzZXRQbGF0Zm9ybUFmdGVyQm9vdHN0cmFwcGluZygpIHtcclxuICByZW1vdmVSb290RWxlbWVudCgpO1xyXG4gIGRlc3Ryb3lQbGF0Zm9ybSgpO1xyXG4gIGNvbnN0IHZlcnNpb24gPSArVkVSU0lPTi5tYWpvcjtcclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2NvbW1pdC9lMjUwZGI0ZjI2MTc0MWIwNGVlNGNiYWQ0ZGVjNDFhODkwOGExMmFhXHJcbiAgaWYgKHZlcnNpb24gPCAxNCkge1xyXG4gICAgY3JlYXRlUGxhdGZvcm0oVGVzdEJlZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJlc2hQbGF0Zm9ybShmbjogKGRvbmU/OiBWb2lkRnVuY3Rpb24pID0+IFByb21pc2U8dm9pZD4pIHtcclxuICBsZXQgcmVzb2x2ZTogVm9pZEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IHJlamVjdDogKChlcnJvcjogRXJyb3IpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGNvbnN0IGhhc0RvbmVBcmd1bWVudCA9IGZuLmxlbmd0aCA9PT0gMTtcclxuXHJcbiAgaWYgKGhhc0RvbmVBcmd1bWVudCkge1xyXG4gICAgd2hlbkRvbmVJc0NhbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcclxuICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xyXG4gICAgICByZWplY3QgPSBfcmVqZWN0O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gdGVzdFdpdGhBRnJlc2hQbGF0Zm9ybSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoKTtcclxuXHJcbiAgICAgIGlmIChoYXNEb25lQXJndW1lbnQpIHtcclxuICAgICAgICBhd2FpdCBmbigoZXJyb3I/OiBFcnJvcikgPT4ge1xyXG4gICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdCEoZXJyb3IpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSEoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXdhaXQgZm4oKTtcclxuICAgICAgfVxyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgcmVzZXRQbGF0Zm9ybUFmdGVyQm9vdHN0cmFwcGluZygpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19