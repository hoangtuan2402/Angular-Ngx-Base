/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { INJECTOR, ɵɵdirectiveInject, ɵglobal } from '@angular/core';
import { ReplaySubject } from 'rxjs';
// Angular doesn't export `NG_FACTORY_DEF`.
/** @type {?} */
var NG_FACTORY_DEF = 'ɵfac';
// A `Symbol` which is used to save the `Injector` onto the class instance.
/** @type {?} */
var InjectorInstance = Symbol('InjectorInstance');
// A `Symbol` which is used to determine if factory has been decorated previously or not.
/** @type {?} */
var FactoryHasBeenDecorated = Symbol('FactoryHasBeenDecorated');
// A `Symbol` which is used to save the notifier on the class instance. The `InjectorInstance` cannot
// be retrieved within the `constructor` since it's set after the `factory()` is called.
/** @type {?} */
var InjectorNotifier = Symbol('InjectorNotifier');
/**
 * @record
 */
function PrototypeWithInjectorNotifier() { }
if (false) {
    /* Skipping unnamed member:
    [InjectorNotifier]?: ReplaySubject<boolean>;*/
}
/**
 * @param {?} target
 * @return {?}
 */
export function ensureInjectorNotifierIsCaptured(target) {
    if (target[InjectorNotifier]) {
        return (/** @type {?} */ (target[InjectorNotifier]));
    }
    else {
        /** @type {?} */
        var injectorNotifier$_1 = new ReplaySubject(1);
        Object.defineProperty(target, InjectorNotifier, {
            get: (/**
             * @return {?}
             */
            function () { return injectorNotifier$_1; })
        });
        return injectorNotifier$_1;
    }
}
// eslint-disable-next-line @typescript-eslint/ban-types
/**
 * @param {?} target
 * @return {?}
 */
export function ensureLocalInjectorCaptured(target) {
    if (FactoryHasBeenDecorated in target.constructor.prototype) {
        return;
    }
    /** @type {?} */
    var constructor = target.constructor;
    // Means we're in AOT mode.
    if (typeof constructor[NG_FACTORY_DEF] === 'function') {
        decorateFactory(constructor);
    }
    else if (ngDevMode) {
        // We're running in JIT mode and that means we're not able to get the compiled definition
        // on the class inside the property decorator during the current message loop tick. We have
        // to wait for the next message loop tick. Note that this is safe since this Promise will be
        // resolved even before the `APP_INITIALIZER` is resolved.
        // The below code also will be executed only in development mode, since it's never recommended
        // to use the JIT compiler in production mode (by setting "aot: false").
        decorateFactoryLater(constructor);
    }
    target.constructor.prototype[FactoryHasBeenDecorated] = true;
}
/**
 * @template T
 * @param {?} instance
 * @param {?} token
 * @return {?}
 */
export function localInject(instance, token) {
    /** @type {?} */
    var injector = instance[InjectorInstance];
    return injector ? injector.get(token) : null;
}
/**
 * @param {?} constructor
 * @return {?}
 */
function decorateFactory(constructor) {
    /** @type {?} */
    var factory = constructor[NG_FACTORY_DEF];
    if (typeof factory !== 'function') {
        return;
    }
    // Let's try to get any definition.
    // Caretaker note: this will be compatible only with Angular 9+, since Angular 9 is the first
    // Ivy-stable version. Previously definition properties were named differently (e.g. `ngComponentDef`).
    /** @type {?} */
    var def = constructor.ɵprov || constructor.ɵpipe || constructor.ɵcmp || constructor.ɵdir;
    /** @type {?} */
    var decoratedFactory = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = factory();
        // Caretaker note: `inject()` won't work here.
        // We can use the `directiveInject` only during the component
        // construction, since Angular captures the currently active injector.
        // We're not able to use this function inside the getter (when the `selectorId` property is
        // requested for the first time), since the currently active injector will be null.
        instance[InjectorInstance] = ɵɵdirectiveInject(
        // We're using `INJECTOR` token except of the `Injector` class since the compiler
        // throws: `Cannot assign an abstract constructor type to a non-abstract constructor type.`.
        // Caretaker note: that this is the same way of getting the injector.
        INJECTOR);
        // Caretaker note: the notifier will be available only if consumers call the `ensureInjectorNotifierIsCaptured()`.
        /** @type {?} */
        var injectorNotifier$ = instance[InjectorNotifier];
        if (injectorNotifier$) {
            injectorNotifier$.next(true);
            injectorNotifier$.complete();
        }
        return instance;
    });
    // If we've found any definition then it's enough to override the `def.factory` since Angular
    // code uses the `def.factory` and then fallbacks to `ɵfac`.
    if (def) {
        def.factory = decoratedFactory;
    }
    // `@NgModule()` doesn't doesn't have definition factory, also providers have definitions but Angular
    // still uses the `ɵfac`.
    Object.defineProperty(constructor, NG_FACTORY_DEF, {
        get: (/**
         * @return {?}
         */
        function () { return decoratedFactory; })
    });
}
/**
 * @param {?} constructor
 * @return {?}
 */
function decorateFactoryLater(constructor) {
    // This function actually will be tree-shaken away when building for production since it's guarded with `ngDevMode`.
    // We're having the `try-catch` here because of the `SyncTestZoneSpec`, which throws
    // an error when micro or macrotask is used within a synchronous test. E.g. `Cannot call
    // Promise.then from within a sync test`.
    try {
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            decorateFactory(constructor);
        }));
    }
    catch (_a) {
        // This is kind of a "hack", but we try to be backwards-compatible,
        // tho this `catch` block will only be executed when tests are run with Jasmine or Jest.
        ɵglobal.process &&
            ɵglobal.process.nextTick &&
            ɵglobal.process.nextTick((/**
             * @return {?}
             */
            function () {
                decorateFactory(constructor);
            }));
    }
}
/**
 * @record
 */
function Definition() { }
if (false) {
    /** @type {?} */
    Definition.prototype.factory;
}
/**
 * @record
 */
function ConstructorWithDefinitionAndFactory() { }
if (false) {
    /** @type {?|undefined} */
    ConstructorWithDefinitionAndFactory.prototype.ɵprov;
    /** @type {?|undefined} */
    ConstructorWithDefinitionAndFactory.prototype.ɵpipe;
    /** @type {?|undefined} */
    ConstructorWithDefinitionAndFactory.prototype.ɵcmp;
    /** @type {?|undefined} */
    ConstructorWithDefinitionAndFactory.prototype.ɵdir;
    /* Skipping unnamed member:
    [NG_FACTORY_DEF]?: Factory;*/
}
/**
 * @record
 */
function PrivateInstance() { }
if (false) {
    /* Skipping unnamed member:
    [InjectorInstance]?: Injector;*/
    /* Skipping unnamed member:
    [InjectorNotifier]?: ReplaySubject<boolean>;*/
}
//# sourceMappingURL=data:application/json;base64,