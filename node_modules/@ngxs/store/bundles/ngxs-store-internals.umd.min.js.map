{"version":3,"sources":["ng://@ngxs/store/internals/ngxs-bootstrapper.ts","ng://@ngxs/store/internals/memoize.ts","ng://@ngxs/store/internals/initial-state.ts","ng://@ngxs/store/internals/internal-tokens.ts","ng://@ngxs/store/internals/decorator-injector-adapter.ts","ng://@ngxs/store/internals/angular.ts"],"names":["NgxsBootstrapper","this","bootstrap$","ReplaySubject","Object","defineProperty","prototype","asObservable","bootstrap","next","complete","Injectable","defaultEqualityCheck","a","b","INITIAL_STATE_TOKEN","InjectionToken","InitialState","set","state","value","pop","NGXS_STATE_CONTEXT_FACTORY","NGXS_STATE_FACTORY","NG_FACTORY_DEF","InjectorInstance","Symbol","FactoryHasBeenDecorated","InjectorNotifier","decorateFactory","constructor","factory","def","ɵprov","ɵpipe","ɵcmp","ɵdir","decoratedFactory","instance","ɵɵdirectiveInject","INJECTOR","injectorNotifier$","get","target","injectorNotifier$_1","ngDevMode","Promise","resolve","then","_a","ɵglobal","process","nextTick","decorateFactoryLater","__karma__","jasmine","jest","Mocha","token","injector","func","equalityCheck","lastArgs","lastResult","memoized","prev","length","i","areArgumentsShallowlyEqual","arguments","apply","reset"],"mappings":"iXAAA,IAAAA,EAAA,WAGA,SAAAA,IAKUC,KAAAC,WAAa,IAAIC,EAAAA,cAAuB,GAclD,OAZEC,OAAAC,eAAIL,EAAAM,UAAA,mBAAgB,KAApB,WACE,OAAOL,KAAKC,WAAWK,gDAOzBP,EAAAM,UAAAE,UAAA,WACEP,KAAKC,WAAWO,MAAK,GACrBR,KAAKC,WAAWQ,gCAjBnBC,EAAAA,aAmBDX,EAtBA,GCAA,SAASY,EAAqBC,EAAQC,GACpC,OAAOD,IAAMC,ECEf,IAAaC,EAAsB,IAAIC,EAAAA,eAAoB,uBAE3DC,EAAA,WAAA,SAAAA,KAYA,OATgBA,EAAAC,IAAd,SAAkBC,GAChBlB,KAAKmB,MAAQD,GAGDF,EAAAI,IAAd,eACQF,EAAqBlB,KAAKmB,MAEhC,OADAnB,KAAKmB,MAAQ,GACND,GATMF,EAAAG,MAAqB,GAWtCH,EAZA,GCAA,IAAaK,EAAkD,IAAIN,EAAAA,eACjE,iCAMWO,EAA0C,IAAIP,EAAAA,eACzD,0BCEIQ,EAAiB,OAGjBC,EAAkCC,OAAO,oBAGzCC,EAAyCD,OAAO,2BAIhDE,EAAkCF,OAAO,oBAmD/C,SAASG,EAAgBC,OACjBC,EAAUD,EAAYN,GAE5B,GAAuB,mBAAZO,EAAX,KAOMC,EAAMF,EAAYG,OAASH,EAAYI,OAASJ,EAAYK,MAAQL,EAAYM,KAEhFC,EAAgB,eACdC,EAAWP,IAMjBO,EAASb,GAAoBc,EAAAA,kBAI3BC,EAAAA,cAIIC,EAAoBH,EAASV,GAMnC,OALIa,IACFA,EAAkBhC,MAAK,GACvBgC,EAAkB/B,YAGb4B,GAKLN,IACFA,EAAID,QAAUM,GAKhBjC,OAAOC,eAAeyB,EAAaN,EAAgB,CACjDkB,IAAG,WAAQ,OAAAL,6JA1Ff,SACEM,GAEA,GAAIA,EAAOf,GACT,OAAOe,EAAOf,OAERgB,EAAoB,IAAIzC,EAAAA,cAAuB,GAIrD,OAHAC,OAAOC,eAAesC,EAAQf,EAAkB,CAC9Cc,IAAG,WAAQ,OAAAE,KAENA,iCAKX,SAA4CD,GAC1C,KAAIhB,KAA2BgB,EAAOb,YAAYxB,WAAlD,KAIMwB,EAAmDa,EAAOb,YAErB,mBAAhCA,EAAYN,GACrBK,EAAgBC,GACPe,WAsEb,SAA8Bf,GAK5B,IACEgB,QAAQC,UAAUC,MAAI,WACpBnB,EAAgBC,MAElB,MAAAmB,GAGAC,EAAAA,QAAQC,SACND,EAAAA,QAAQC,QAAQC,UAChBF,EAAAA,QAAQC,QAAQC,UAAQ,WACtBvB,EAAgBC,OA9EpBuB,CAAqBvB,GAGvBa,EAAOb,YAAYxB,UAAUqB,IAA2B,0BC5D1D,WAOE,MACuB,oBAAd2B,WACY,oBAAZC,SACS,oBAATC,MACU,oBAAVC,qBDoDX,SACEnB,EACAoB,OAEMC,EAAiCrB,EAASb,GAChD,OAAOkC,EAAWA,EAASjB,IAAIgB,GAAS,gBH3C1C,SACEE,EACAC,QAAA,IAAAA,IAAAA,EAAAjD,OAEIkD,EAA8B,KAC9BC,EAAkB,KAEtB,SAASC,IAOP,OAxCJ,SACEH,EACAI,EACAxD,GAEA,GAAa,OAATwD,GAA0B,OAATxD,GAAiBwD,EAAKC,SAAWzD,EAAKyD,OACzD,OAAO,EAKT,QADMA,EAASD,EAAKC,OACXC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKN,EAAcI,EAAKE,GAAI1D,EAAK0D,IAC/B,OAAO,EAIX,OAAO,EAiBAC,CAA2BP,EAAeC,EAAUO,aAEvDN,EAAa,EAAiBO,MAAM,KAAMD,YAG5CP,EAAWO,UACJN,EAOT,OALA,EAAgBQ,MAAK,WAEnBT,EAAW,KACXC,EAAa,MAEf","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxsBootstrapper {\r\n  /**\r\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n   */\r\n  private bootstrap$ = new ReplaySubject<boolean>(1);\r\n\r\n  get appBootstrapped$(): Observable<boolean> {\r\n    return this.bootstrap$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This event will be emitted after attaching `ComponentRef` of the root component\r\n   * to the tree of views, that's a signal that application has been fully rendered\r\n   */\r\n  bootstrap(): void {\r\n    this.bootstrap$.next(true);\r\n    this.bootstrap$.complete();\r\n  }\r\n}\r\n","function defaultEqualityCheck(a: any, b: any) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(\r\n  equalityCheck: (a: any, b: any) => boolean,\r\n  prev: IArguments | null,\r\n  next: IArguments | null\r\n) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  equalityCheck = defaultEqualityCheck\r\n): T {\r\n  let lastArgs: IArguments | null = null;\r\n  let lastResult: any = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = (<Function>func).apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  }\r\n  (<any>memoized).reset = function() {\r\n    // The hidden (for now) ability to reset the memoization\r\n    lastArgs = null;\r\n    lastResult = null;\r\n  };\r\n  return memoized as T;\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { PlainObject } from './symbols';\r\n\r\nexport const INITIAL_STATE_TOKEN = new InjectionToken<any>('INITIAL_STATE_TOKEN');\r\n\r\nexport class InitialState {\r\n  private static value: PlainObject = {};\r\n\r\n  public static set(state: PlainObject) {\r\n    this.value = state;\r\n  }\r\n\r\n  public static pop(): PlainObject {\r\n    const state: PlainObject = this.value;\r\n    this.value = {};\r\n    return state;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_CONTEXT_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateContextFactory'\r\n);\r\n\r\n/**\r\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateFactory'\r\n);\r\n","import {\r\n  InjectionToken,\r\n  Injector,\r\n  INJECTOR,\r\n  Type,\r\n  ÉµÉµdirectiveInject,\r\n  Éµglobal\r\n} from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\n// Will be provided through Terser global definitions by Angular CLI\r\n// during the production build. This is how Angular does tree-shaking internally.\r\ndeclare const ngDevMode: boolean;\r\n\r\n// Angular doesn't export `NG_FACTORY_DEF`.\r\nconst NG_FACTORY_DEF = 'Éµfac';\r\n\r\n// A `Symbol` which is used to save the `Injector` onto the class instance.\r\nconst InjectorInstance: unique symbol = Symbol('InjectorInstance');\r\n\r\n// A `Symbol` which is used to determine if factory has been decorated previously or not.\r\nconst FactoryHasBeenDecorated: unique symbol = Symbol('FactoryHasBeenDecorated');\r\n\r\n// A `Symbol` which is used to save the notifier on the class instance. The `InjectorInstance` cannot\r\n// be retrieved within the `constructor` since it's set after the `factory()` is called.\r\nconst InjectorNotifier: unique symbol = Symbol('InjectorNotifier');\r\n\r\ninterface PrototypeWithInjectorNotifier extends Object {\r\n  [InjectorNotifier]?: ReplaySubject<boolean>;\r\n}\r\n\r\nexport function ensureInjectorNotifierIsCaptured(\r\n  target: PrototypeWithInjectorNotifier | PrivateInstance\r\n): ReplaySubject<boolean> {\r\n  if (target[InjectorNotifier]) {\r\n    return target[InjectorNotifier]!;\r\n  } else {\r\n    const injectorNotifier$ = new ReplaySubject<boolean>(1);\r\n    Object.defineProperty(target, InjectorNotifier, {\r\n      get: () => injectorNotifier$\r\n    });\r\n    return injectorNotifier$;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function ensureLocalInjectorCaptured(target: Object): void {\r\n  if (FactoryHasBeenDecorated in target.constructor.prototype) {\r\n    return;\r\n  }\r\n\r\n  const constructor: ConstructorWithDefinitionAndFactory = target.constructor;\r\n  // Means we're in AOT mode.\r\n  if (typeof constructor[NG_FACTORY_DEF] === 'function') {\r\n    decorateFactory(constructor);\r\n  } else if (ngDevMode) {\r\n    // We're running in JIT mode and that means we're not able to get the compiled definition\r\n    // on the class inside the property decorator during the current message loop tick. We have\r\n    // to wait for the next message loop tick. Note that this is safe since this Promise will be\r\n    // resolved even before the `APP_INITIALIZER` is resolved.\r\n    // The below code also will be executed only in development mode, since it's never recommended\r\n    // to use the JIT compiler in production mode (by setting \"aot: false\").\r\n    decorateFactoryLater(constructor);\r\n  }\r\n\r\n  target.constructor.prototype[FactoryHasBeenDecorated] = true;\r\n}\r\n\r\nexport function localInject<T>(\r\n  instance: PrivateInstance,\r\n  token: InjectionToken<T> | Type<T>\r\n): T | null {\r\n  const injector: Injector | undefined = instance[InjectorInstance];\r\n  return injector ? injector.get(token) : null;\r\n}\r\n\r\nfunction decorateFactory(constructor: ConstructorWithDefinitionAndFactory): void {\r\n  const factory = constructor[NG_FACTORY_DEF];\r\n\r\n  if (typeof factory !== 'function') {\r\n    return;\r\n  }\r\n\r\n  // Let's try to get any definition.\r\n  // Caretaker note: this will be compatible only with Angular 9+, since Angular 9 is the first\r\n  // Ivy-stable version. Previously definition properties were named differently (e.g. `ngComponentDef`).\r\n  const def = constructor.Éµprov || constructor.Éµpipe || constructor.Éµcmp || constructor.Éµdir;\r\n\r\n  const decoratedFactory = () => {\r\n    const instance = factory();\r\n    // Caretaker note: `inject()` won't work here.\r\n    // We can use the `directiveInject` only during the component\r\n    // construction, since Angular captures the currently active injector.\r\n    // We're not able to use this function inside the getter (when the `selectorId` property is\r\n    // requested for the first time), since the currently active injector will be null.\r\n    instance[InjectorInstance] = ÉµÉµdirectiveInject(\r\n      // We're using `INJECTOR` token except of the `Injector` class since the compiler\r\n      // throws: `Cannot assign an abstract constructor type to a non-abstract constructor type.`.\r\n      // Caretaker note: that this is the same way of getting the injector.\r\n      INJECTOR\r\n    );\r\n\r\n    // Caretaker note: the notifier will be available only if consumers call the `ensureInjectorNotifierIsCaptured()`.\r\n    const injectorNotifier$ = instance[InjectorNotifier];\r\n    if (injectorNotifier$) {\r\n      injectorNotifier$.next(true);\r\n      injectorNotifier$.complete();\r\n    }\r\n\r\n    return instance;\r\n  };\r\n\r\n  // If we've found any definition then it's enough to override the `def.factory` since Angular\r\n  // code uses the `def.factory` and then fallbacks to `Éµfac`.\r\n  if (def) {\r\n    def.factory = decoratedFactory;\r\n  }\r\n\r\n  // `@NgModule()` doesn't doesn't have definition factory, also providers have definitions but Angular\r\n  // still uses the `Éµfac`.\r\n  Object.defineProperty(constructor, NG_FACTORY_DEF, {\r\n    get: () => decoratedFactory\r\n  });\r\n}\r\n\r\nfunction decorateFactoryLater(constructor: ConstructorWithDefinitionAndFactory): void {\r\n  // This function actually will be tree-shaken away when building for production since it's guarded with `ngDevMode`.\r\n  // We're having the `try-catch` here because of the `SyncTestZoneSpec`, which throws\r\n  // an error when micro or macrotask is used within a synchronous test. E.g. `Cannot call\r\n  // Promise.then from within a sync test`.\r\n  try {\r\n    Promise.resolve().then(() => {\r\n      decorateFactory(constructor);\r\n    });\r\n  } catch {\r\n    // This is kind of a \"hack\", but we try to be backwards-compatible,\r\n    // tho this `catch` block will only be executed when tests are run with Jasmine or Jest.\r\n    Éµglobal.process &&\r\n      Éµglobal.process.nextTick &&\r\n      Éµglobal.process.nextTick(() => {\r\n        decorateFactory(constructor);\r\n      });\r\n  }\r\n}\r\n\r\n// We could've used `ÉµÉµFactoryDef` but we try to be backwards-compatible,\r\n// since it's not exported in older Angular versions.\r\ntype Factory = () => PrivateInstance;\r\n\r\n// We could've used `ÉµÉµInjectableDef`, `ÉµÉµPipeDef`, etc. We try to be backwards-compatible\r\n// since they're not exported in older Angular versions.\r\ninterface Definition {\r\n  factory: Factory | null;\r\n}\r\n\r\ninterface ConstructorWithDefinitionAndFactory extends Function {\r\n  // Provider definition for the `@Injectable()` class.\r\n  Éµprov?: Definition;\r\n  // Pipe definition for the `@Pipe()` class.\r\n  Éµpipe?: Definition;\r\n  // Component definition for the `@Component()` class.\r\n  Éµcmp?: Definition;\r\n  // Directive definition for the `@Directive()` class.\r\n  Éµdir?: Definition;\r\n  [NG_FACTORY_DEF]?: Factory;\r\n}\r\n\r\ninterface PrivateInstance {\r\n  [InjectorInstance]?: Injector;\r\n  [InjectorNotifier]?: ReplaySubject<boolean>;\r\n}\r\n","declare const __karma__: unknown;\r\ndeclare const jasmine: unknown;\r\ndeclare const jest: unknown;\r\ndeclare const Mocha: unknown;\r\n\r\nexport function isAngularInTestMode(): boolean {\r\n  // This is safe to check for these properties in the following way since `typeof` does not\r\n  // throw an exception if the value does not exist in the scope.\r\n  // We should not try to read these values from the global scope (e.g. `Éµglobal` from the `@angular/core`).\r\n  // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\r\n  // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\r\n  // this will return undefined `global.jest`, but `jest` will not equal undefined.\r\n  return (\r\n    typeof __karma__ !== 'undefined' ||\r\n    typeof jasmine !== 'undefined' ||\r\n    typeof jest !== 'undefined' ||\r\n    typeof Mocha !== 'undefined'\r\n  );\r\n}\r\n"]}