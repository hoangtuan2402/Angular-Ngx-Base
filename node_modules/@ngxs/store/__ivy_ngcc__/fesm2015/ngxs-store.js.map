{"version":3,"file":"ngxs-store.js","sources":["@ngxs/store/src/configs/messages.config.ts","@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","@ngxs/store/src/symbols.ts","@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","@ngxs/store/src/execution/symbols.ts","@ngxs/store/src/utils/utils.ts","@ngxs/store/src/internal/internals.ts","@ngxs/store/src/operators/of-action.ts","@ngxs/store/src/operators/leave-ngxs.ts","@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","@ngxs/store/src/actions-stream.ts","@ngxs/store/src/utils/compose.ts","@ngxs/store/src/internal/state-stream.ts","@ngxs/store/src/plugin-manager.ts","@ngxs/store/src/internal/dispatcher.ts","@ngxs/store/src/utils/freeze.ts","@ngxs/store/src/internal/state-operations.ts","@ngxs/store/src/internal/state-operators.ts","@ngxs/store/src/internal/state-context-factory.ts","@ngxs/store/src/utils/store-validators.ts","@ngxs/store/src/internal/state-factory.ts","@ngxs/store/src/internal/lifecycle-state-manager.ts","@ngxs/store/src/utils/selector-utils.ts","@ngxs/store/src/store.ts","@ngxs/store/src/decorators/select/select-factory.ts","@ngxs/store/src/actions/actions.ts","@ngxs/store/src/modules/ngxs-root.module.ts","@ngxs/store/src/modules/ngxs-feature.module.ts","@ngxs/store/src/module.ts","@ngxs/store/src/decorators/action.ts","@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","@ngxs/store/src/decorators/state.ts","@ngxs/store/src/decorators/select/symbols.ts","@ngxs/store/src/decorators/select/select.ts","@ngxs/store/src/decorators/selector-options.ts","@ngxs/store/src/public_to_deprecate.ts","@ngxs/store/src/decorators/selector/selector.ts","@ngxs/store/src/state-token/state-token.ts"],"names":["isObject","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":"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","sourcesContent":["export function throwStateNameError(name: string): never {\r\n  throw new Error(\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`\r\n  );\r\n}\r\n\r\nexport function throwStateNamePropertyError(): never {\r\n  throw new Error(`States must register a 'name' property.`);\r\n}\r\n\r\nexport function throwStateUniqueError(\r\n  current: string,\r\n  newName: string,\r\n  oldName: string\r\n): never {\r\n  throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);\r\n}\r\n\r\nexport function throwStateDecoratorError(name: string): never {\r\n  throw new Error(`States must be decorated with @State() decorator, but \"${name}\" isn't.`);\r\n}\r\n\r\nexport function throwActionDecoratorError(): never {\r\n  throw new Error('@Action() decorator cannot be used with static methods.');\r\n}\r\n\r\nexport function throwSelectorDecoratorError(): never {\r\n  throw new Error('Selectors only work on methods.');\r\n}\r\n\r\nexport function getZoneWarningMessage(): string {\r\n  return (\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })'\r\n  );\r\n}\r\n\r\nexport function getUndecoratedStateInIvyWarningMessage(name: string): string {\r\n  return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;\r\n}\r\n\r\nexport function throwSelectFactoryNotConnectedError(): never {\r\n  throw new Error('You have forgotten to import the NGXS module!');\r\n}\r\n\r\nexport function throwPatchingArrayError(): never {\r\n  throw new Error('Patching arrays is not supported.');\r\n}\r\n\r\nexport function throwPatchingPrimitiveError(): never {\r\n  throw new Error('Patching primitives is not supported.');\r\n}\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { getZoneWarningMessage } from '../configs/messages.config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      verifyZoneIsNotNooped(_ngZone);\r\n    }\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n}\r\n\r\n// Caretaker note: this should exist as a separate function and not a class method,\r\n// since class methods are not tree-shakable.\r\nfunction verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n  // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n  // to be used outside of the core Angular code, thus we just have\r\n  // to check if the zone doesn't extend or instanceof `NgZone`.\r\n  if (ngZone instanceof NgZone) {\r\n    return;\r\n  }\r\n\r\n  console.warn(getZoneWarningMessage());\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   *\r\n   * @deprecated This property is no longer necessary when the Ivy compiler is used.\r\n   * We'll determine the development mode through the `ngDevMode`. It's still essential with View Engine.\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n\r\n/** @internal */\r\ndeclare global {\r\n  const ngDevMode: boolean;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { InjectionToken, inject, INJECTOR, Type, Éµglobal } from '@angular/core';\r\n\r\nimport { NoopNgxsExecutionStrategy } from './noop-ngxs-execution-strategy';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './dispatch-outside-zone-ngxs-execution-strategy';\r\n\r\n/**\r\n * The strategy that might be provided by users through `options.executionStrategy`.\r\n */\r\nexport const USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken<\r\n  Type<NgxsExecutionStrategy> | undefined\r\n>('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const injector = inject(INJECTOR);\r\n      const executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);\r\n      return executionStrategy\r\n        ? injector.get(executionStrategy)\r\n        : injector.get(\r\n            typeof Éµglobal.Zone !== 'undefined'\r\n              ? DispatchOutsideZoneNgxsExecutionStrategy\r\n              : NoopNgxsExecutionStrategy\r\n          );\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  } else {\r\n    return action.type;\r\n  }\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n\r\n/**\r\n * Simple object check.\r\n *\r\n *    isObject({a:1}) //=> true\r\n *    isObject(1) //=> false\r\n *\r\n * @ignore\r\n */\r\nexport const isObject = (item: any) => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n/**\r\n * Deep merge two objects.\r\n *\r\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\r\n *\r\n * @param base base object onto which `sources` will be applied\r\n */\r\nexport const mergeDeep = (base: any, ...sources: any[]): any => {\r\n  if (!sources.length) return base;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(base) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!base[key]) Object.assign(base, { [key]: {} });\r\n        mergeDeep(base[key], source[key]);\r\n      } else {\r\n        Object.assign(base, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(base, ...sources);\r\n};\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actionOrActions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  makeRootSelector: SelectorFactory | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport interface RuntimeSelectorContext {\r\n  getStateGetter(key: any): (state: any) => any;\r\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\r\n}\r\n\r\nexport type SelectFromRootState = (rootState: any) => any;\r\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  makeRootSelector: SelectorFactory | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  path: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      makeRootSelector(context: RuntimeSelectorContext) {\r\n        return context.getStateGetter(defaultMetadata.name);\r\n      },\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      makeRootSelector: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta![META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n      // creating a breaking change for projects that still use the View Engine.\r\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActionType } from '../actions/symbols';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T = any>(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, ActionCompletion> {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator(\r\n  allowedTypes: ActionType[],\r\n  statuses?: ActionStatus[],\r\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\r\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\r\n  // defaults to `any`, thus there is no sense from union type.\r\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\r\n): OperatorFunction<ActionContext, any> {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\r\n  return types.reduce((filterMap: FilterMap, klass: any) => {\r\n    filterMap[getActionTypeFromInstance(klass)!] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\r\n    filterMap[status] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> implements OnDestroy {\r\n  constructor() {\r\n    super({});\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // The `StateStream` should never emit values once the root view is removed, e.g. when the `NgModuleRef.destroy()` is called.\r\n    // This will eliminate memory leaks in server-side rendered apps where the `StateStream` is created per each HTTP request, users\r\n    // might forget to unsubscribe from `store.select` or `store.subscribe`, thus this will lead to huge memory leaks in SSR apps.\r\n    this.complete();\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  private _errorHandler: ErrorHandler;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            // Retrieve lazily to avoid cyclic dependency exception\r\n            this._errorHandler = this._errorHandler || this._injector.get(ErrorHandler);\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\r\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const type: string | undefined = getActionTypeFromInstance(action);\r\n    if (!type) {\r\n      const error = new Error(\r\n        `This action doesn't have a type property: ${action.constructor.name}`\r\n      );\r\n      return throwError(error);\r\n    }\r\n\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { isAngularInTestMode } from '@ngxs/store/internals';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\r\n    };\r\n\r\n    // We have to have that duplication since this will allow us to tree-shake `ensureStateAndActionsAreImmutable`\r\n    // and `deepFreeze` in Ivy production build.\r\n    // The below `if` condition checks 2 things:\r\n    // 1) if we're in View Engine (`ngDevMode` is `undefined`)\r\n    // 2) if we're running tests, we should fallback to `config.developmentMode` to be backwards-compatible\r\n    if (typeof ngDevMode === 'undefined' || (ngDevMode && isAngularInTestMode())) {\r\n      return this._config.developmentMode\r\n        ? ensureStateAndActionsAreImmutable(rootStateOperations)\r\n        : rootStateOperations;\r\n    } else {\r\n      // If we're in Ivy and not running tests, then tree-shake `ensureStateAndActionsAreImmutable` and `deepFreeze`.\r\n      return ngDevMode\r\n        ? ensureStateAndActionsAreImmutable(rootStateOperations)\r\n        : rootStateOperations;\r\n    }\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n\r\nfunction ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n  return {\r\n    getState: () => root.getState(),\r\n    setState: value => {\r\n      const frozenValue = deepFreeze(value);\r\n      return root.setState(frozenValue);\r\n    },\r\n    dispatch: actions => {\r\n      return root.dispatch(actions);\r\n    }\r\n  };\r\n}\r\n","import {\r\n  throwPatchingArrayError,\r\n  throwPatchingPrimitiveError\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throwPatchingArrayError();\r\n    } else if (typeof val !== 'object') {\r\n      throwPatchingPrimitiveError();\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.path);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { getStoreMetadata, StateClassInternal, StatesByName } from '../internal/internals';\r\nimport {\r\n  throwStateDecoratorError,\r\n  throwStateNameError,\r\n  throwStateNamePropertyError,\r\n  throwStateUniqueError\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  private static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  static checkThatStateIsNamedCorrectly(name: string | null): void | never {\r\n    if (!name) {\r\n      throwStateNamePropertyError();\r\n    } else if (!this.stateNameRegex.test(name)) {\r\n      throwStateNameError(name);\r\n    }\r\n  }\r\n\r\n  static checkThatStateNameIsUnique(\r\n    stateName: string,\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): void | never {\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throwStateUniqueError(stateName, state.name, existingState.name);\r\n    }\r\n  }\r\n\r\n  static checkThatStateClassesHaveBeenDecorated(\r\n    stateClasses: StateClassInternal[]\r\n  ): void | never {\r\n    stateClasses.forEach((stateClass: StateClassInternal) => {\r\n      if (!getStoreMetadata(stateClass)) {\r\n        throwStateDecoratorError(stateClass.name);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject, OnDestroy } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError, Subscription, Subject } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort,\r\n  RuntimeSelectorContext,\r\n  SharedSelectorOptions,\r\n  getStoreMetadata\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory implements OnDestroy {\r\n  private _actionsSubscription: Subscription | null = null;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private _statePaths: PlainObjectOf<string> = {};\r\n\r\n  private get statePaths(): PlainObjectOf<string> {\r\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n  }\r\n\r\n  getRuntimeSelectorContext = memoize(() => {\r\n    const stateFactory = this;\r\n\r\n    function resolveGetter(key: string) {\r\n      const path = stateFactory.statePaths[key];\r\n      return path ? propGetter(path.split('.'), stateFactory._config) : null;\r\n    }\r\n\r\n    const context: RuntimeSelectorContext = this._parentFactory\r\n      ? this._parentFactory.getRuntimeSelectorContext()\r\n      : {\r\n          getStateGetter(key: string) {\r\n            let getter = resolveGetter(key);\r\n            if (getter) {\r\n              return getter;\r\n            }\r\n            return (...args) => {\r\n              // Late loaded getter\r\n              if (!getter) {\r\n                getter = resolveGetter(key);\r\n              }\r\n              return getter ? getter(...args) : undefined;\r\n            };\r\n          },\r\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\r\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\r\n            return {\r\n              ...globalSelectorOptions,\r\n              ...(localOptions || {})\r\n            };\r\n          }\r\n        };\r\n    return context;\r\n  });\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // I'm using non-null assertion here since `_actionsSubscrition` will\r\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\r\n    // on the `StateFactory` until its initialized :) An it's initialized\r\n    // for the first time along with the `NgxsRootModule`.\r\n    this._actionsSubscription!.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      StoreValidators.checkThatStateClassesHaveBeenDecorated(stateClasses);\r\n    }\r\n\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const path: string = paths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, path);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        path,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.path, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._actionsSubscription !== null) return;\r\n    const dispatched$ = new Subject<ActionContext>();\r\n    this._actionsSubscription = this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(ctx => {\r\n          dispatched$.next(ctx);\r\n          const action = ctx.action;\r\n          return this.invokeActions(dispatched$, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(dispatched$: Observable<ActionContext>, action: any) {\r\n    const type = getActionTypeFromInstance(action)!;\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              // If this observable has been completed w/o emitting\r\n              // any value then we wouldn't want to complete the whole chain\r\n              // of actions. Since if any observable completes then\r\n              // action will be canceled.\r\n              // For instance if any action handler would've had such statement:\r\n              // `handler(ctx) { return EMPTY; }`\r\n              // then the action will be canceled.\r\n              // See https://github.com/ngxs/store/issues/1568\r\n              result = result.pipe(\r\n                mergeMap((value: any) => {\r\n                  if (value instanceof Promise) {\r\n                    return from(value);\r\n                  }\r\n                  if (value instanceof Observable) {\r\n                    return value;\r\n                  }\r\n                  return of(value);\r\n                }),\r\n                defaultIfEmpty({})\r\n              );\r\n\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(dispatched$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName = getStoreMetadata(stateClass).name!;\r\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n      // creating a breaking change for projects that still use the View Engine.\r\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        StoreValidators.checkThatStateNameIsUnique(stateName, stateClass, statesMap);\r\n      }\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\r\n    this.statePaths[meta.name!] = path;\r\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n    // We will need to come up with an alternative in v4 because this is used by many plugins\r\n    meta.path = path;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions,\r\n  RuntimeSelectorContext,\r\n  SelectorFactory,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: SelectFromRootState[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  Object.setPrototypeOf(memoizedFn, originalFn);\r\n\r\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\r\n\r\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\r\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\r\n      context,\r\n      selectorMetaData,\r\n      selectors\r\n    );\r\n\r\n    return function selectFromRoot(rootState: any) {\r\n      // Determine arguments from the app state using the selectors\r\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\r\n\r\n      // if the lambda tries to access a something on the\r\n      // state that doesn't exist, it will throw a TypeError.\r\n      // since this is quite usual behaviour, we simply return undefined if so.\r\n      try {\r\n        return memoizedFn(...results);\r\n      } catch (ex) {\r\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n          return undefined;\r\n        }\r\n\r\n        throw ex;\r\n      }\r\n    };\r\n  };\r\n\r\n  selectorMetaData.makeRootSelector = makeRootSelector;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  context: RuntimeSelectorContext,\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n  const selectorsToApply = getSelectorsToApply(\r\n    selectors,\r\n    selectorOptions,\r\n    selectorMetaData.containerClass\r\n  );\r\n\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\r\n    const factory = getRootSelectorFactory(selector);\r\n    return factory(context);\r\n  });\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getLocalSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  return {\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectors: any[] | undefined = [],\r\n  selectorOptions: SharedSelectorOptions,\r\n  containerClass: any\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorOptions.injectContainerState;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.makeRootSelector) || (() => selector);\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  map,\r\n  publishReplay,\r\n  refCount,\r\n  take\r\n} from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getRootSelectorFactory } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  /**\r\n   * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\r\n   * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\r\n   * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\r\n   */\r\n  private _selectableStateStream = this._stateStream.pipe(\r\n    leaveNgxs(this._internalExecutionStrategy),\r\n    publishReplay(1),\r\n    refCount()\r\n  );\r\n\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    private _stateFactory: StateFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return this._selectableStateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._selectableStateStream\r\n      .pipe(leaveNgxs(this._internalExecutionStrategy))\r\n      .subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private getStoreBoundSelectorFn(selector: any) {\r\n    const makeSelectorFn = getRootSelectorFactory(selector);\r\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n    return makeSelectorFn(runtimeContext);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store, this is used internally\r\n * in `@Select` decorator.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SelectFactory implements OnDestroy {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    SelectFactory.store = null;\r\n    SelectFactory.config = null;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { Inject, Injector, NgModule, Optional, ÉµivyEnabled } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { ROOT_STATE_TOKEN } from '../symbols';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    injector: Injector,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // If the user is running View Engine then we create the `SelectFactory` instance,\r\n    // otherwise it'll be tree-shaken away in Ivy.\r\n    !ÉµivyEnabled && injector.get(SelectFactory);\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { USER_PROVIDED_NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { mergeDeep } from './utils/utils';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,\r\n        useValue: options.executionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return mergeDeep(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { throwActionDecoratorError } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n      if (isStaticMethod) {\r\n        throwActionDecoratorError();\r\n      }\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ÉµivyEnabled } from '@angular/core';\r\n\r\nimport { getUndecoratedStateInIvyWarningMessage } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `Éµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  if (ÉµivyEnabled) {\r\n    const ngInjectableDef = target.Éµprov;\r\n    if (!ngInjectableDef) {\r\n      // Don't warn if Ivy is disabled or `Éµprov` exists on the class\r\n      console.warn(getUndecoratedStateInIvyWarningMessage(target.name));\r\n    }\r\n  }\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      StoreValidators.checkThatStateIsNamedCorrectly(stateName);\r\n    }\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      ensureStateClassIsInjectable(target);\r\n    }\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { Type, ÉµivyEnabled } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\nimport { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(\r\n  selector: any,\r\n  store: Store | null\r\n): Observable<T> {\r\n  // We're doing this stuff to tree-shake the `SelectFactory` when the user\r\n  // is running Ivy since NGXS will select the state from the provided `store` argument.\r\n  return ÉµivyEnabled\r\n    ? createSelectObservableIvy(selector, store)\r\n    : createSelectObservableViewEngine(selector);\r\n}\r\n\r\nexport function createSelectorFn(\r\n  config: NgxsConfig | null,\r\n  name: string,\r\n  rawSelector?: any,\r\n  paths: string[] = []\r\n): SelectorFn {\r\n  rawSelector = rawSelector || removeDollarAtTheEnd(name);\r\n\r\n  if (typeof rawSelector !== 'string') {\r\n    return rawSelector;\r\n  } else {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n\r\n    return ÉµivyEnabled\r\n      ? createSelectorFnIvy(propsArray, config)\r\n      : createSelectorFnViewEngine(propsArray);\r\n  }\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type SelectorFn =\r\n  | ((state: any, ...states: any[]) => any)\r\n  | string\r\n  | Type<any>\r\n  | StateToken<any>;\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n\r\nfunction createSelectObservableIvy<T = any>(\r\n  selector: any,\r\n  store: Store | null\r\n): Observable<T> {\r\n  return ngDevMode && !store ? throwSelectFactoryNotConnectedError() : store!.select(selector);\r\n}\r\n\r\nfunction createSelectObservableViewEngine<T = any>(selector: any): Observable<T> {\r\n  return SelectFactory.store\r\n    ? SelectFactory.store.select(selector)\r\n    : throwSelectFactoryNotConnectedError();\r\n}\r\n\r\nfunction createSelectorFnIvy(propsArray: string[], config: NgxsConfig | null) {\r\n  return ngDevMode && !config\r\n    ? throwSelectFactoryNotConnectedError()\r\n    : propGetter(propsArray, config!);\r\n}\r\n\r\nfunction createSelectorFnViewEngine(propsArray: string[]) {\r\n  return propGetter(propsArray, SelectFactory.config!);\r\n}\r\n","import { ÉµivyEnabled } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport {\r\n  localInject,\r\n  ensureLocalInjectorCaptured,\r\n  ensureInjectorNotifierIsCaptured\r\n} from '@ngxs/store/internals';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\nimport { createSelectObservable, createSelectorFn, SelectorFn } from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\r\n  return function(target, key): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    let selector: SelectorFn | null = null;\r\n    let injectorNotifier$: ReplaySubject<boolean> | null = null;\r\n\r\n    if (ÉµivyEnabled) {\r\n      injectorNotifier$ = ensureInjectorNotifierIsCaptured(target);\r\n    }\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          if (this[selectorId]) {\r\n            return this[selectorId];\r\n          }\r\n          // The `localInject` will be tree-shaken away in apps that\r\n          // still use the View Engine.\r\n          if (ÉµivyEnabled) {\r\n            this[selectorId] = injectorNotifier$!.pipe(\r\n              mergeMap(() => {\r\n                const store = localInject(this, Store);\r\n                const config = localInject(this, NgxsConfig);\r\n                selector = selector || createSelectorFn(config, name, rawSelector, paths);\r\n                return createSelectObservable(selector, store);\r\n              })\r\n            );\r\n          } else {\r\n            selector = selector || createSelectorFn(null, name, rawSelector, paths);\r\n            this[selectorId] = createSelectObservable(selector, null);\r\n          }\r\n          return this[selectorId];\r\n        }\r\n      }\r\n    });\r\n\r\n    // Keep this `if` guard here so the below stuff will be tree-shaken away in apps that still use the View Engine.\r\n    if (ÉµivyEnabled) {\r\n      ensureLocalInjectorCaptured(target);\r\n    }\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import {\r\n  getSelectorMetadata as getSelectorMetadataInternal,\r\n  getStoreMetadata as getStoreMetadataInternal,\r\n  ensureStoreMetadata as ensureStoreMetadataInternal,\r\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\r\n  StateClassInternal,\r\n  SharedSelectorOptions\r\n} from './internal/internals';\r\nimport { PlainObjectOf } from '../internals/src/symbols';\r\nimport { ActionHandlerMetaData } from './actions/symbols';\r\n\r\ninterface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  children?: StateClassInternal[];\r\n}\r\n\r\ninterface SelectorMetaDataModel {\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return ensureStoreMetadataInternal(target);\r\n}\r\n\r\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return getStoreMetadataInternal(target);\r\n}\r\n\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  return ensureSelectorMetadataInternal(target);\r\n}\r\n\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return getSelectorMetadataInternal(target);\r\n}\r\n","import { throwSelectorDecoratorError } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\r\n    // creating a breaking change for projects that still use the View Engine.\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n      if (isNotMethod) {\r\n        throwSelectorDecoratorError();\r\n      }\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    const memoizedFn = createSelector(selectors, originalFn as any, {\r\n      containerClass: target,\r\n      selectorName: key.toString(),\r\n      getSelectorOptions() {\r\n        return {};\r\n      }\r\n    });\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { TokenName } from './symbols';\r\nimport {\r\n  ensureSelectorMetadata,\r\n  RuntimeSelectorContext,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.makeRootSelector = (\r\n      runtimeContext: RuntimeSelectorContext\r\n    ): SelectFromRootState => {\r\n      return runtimeContext.getStateGetter(this.name);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n"]}