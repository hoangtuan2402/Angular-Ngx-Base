/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getStoreMetadata } from '../internal/internals';
import { throwStateDecoratorError, throwStateNameError, throwStateNamePropertyError, throwStateUniqueError } from '../configs/messages.config';
/**
 * @abstract
 */
export class StoreValidators {
    /**
     * @param {?} name
     * @return {?}
     */
    static checkThatStateIsNamedCorrectly(name) {
        if (!name) {
            throwStateNamePropertyError();
        }
        else if (!this.stateNameRegex.test(name)) {
            throwStateNameError(name);
        }
    }
    /**
     * @param {?} stateName
     * @param {?} state
     * @param {?} statesByName
     * @return {?}
     */
    static checkThatStateNameIsUnique(stateName, state, statesByName) {
        /** @type {?} */
        const existingState = statesByName[stateName];
        if (existingState && existingState !== state) {
            throwStateUniqueError(stateName, state.name, existingState.name);
        }
    }
    /**
     * @param {?} stateClasses
     * @return {?}
     */
    static checkThatStateClassesHaveBeenDecorated(stateClasses) {
        stateClasses.forEach((/**
         * @param {?} stateClass
         * @return {?}
         */
        (stateClass) => {
            if (!getStoreMetadata(stateClass)) {
                throwStateDecoratorError(stateClass.name);
            }
        }));
    }
}
StoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');
if (false) {
    /**
     * @type {?}
     * @private
     */
    StoreValidators.stateNameRegex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzL3N0b3JlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBb0MsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRixPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLG1CQUFtQixFQUNuQiwyQkFBMkIsRUFDM0IscUJBQXFCLEVBQ3RCLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFFcEMsTUFBTSxPQUFnQixlQUFlOzs7OztJQUduQyxNQUFNLENBQUMsOEJBQThCLENBQUMsSUFBbUI7UUFDdkQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULDJCQUEyQixFQUFFLENBQUM7U0FDL0I7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLDBCQUEwQixDQUMvQixTQUFpQixFQUNqQixLQUF5QixFQUN6QixZQUEwQjs7Y0FFcEIsYUFBYSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDN0MsSUFBSSxhQUFhLElBQUksYUFBYSxLQUFLLEtBQUssRUFBRTtZQUM1QyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxzQ0FBc0MsQ0FDM0MsWUFBa0M7UUFFbEMsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLFVBQThCLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ2pDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQztRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7QUE3QmMsOEJBQWMsR0FBVyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOzs7Ozs7SUFBdEUsK0JBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U3RvcmVNZXRhZGF0YSwgU3RhdGVDbGFzc0ludGVybmFsLCBTdGF0ZXNCeU5hbWUgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQge1xyXG4gIHRocm93U3RhdGVEZWNvcmF0b3JFcnJvcixcclxuICB0aHJvd1N0YXRlTmFtZUVycm9yLFxyXG4gIHRocm93U3RhdGVOYW1lUHJvcGVydHlFcnJvcixcclxuICB0aHJvd1N0YXRlVW5pcXVlRXJyb3JcclxufSBmcm9tICcuLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RvcmVWYWxpZGF0b3JzIHtcclxuICBwcml2YXRlIHN0YXRpYyBzdGF0ZU5hbWVSZWdleDogUmVnRXhwID0gbmV3IFJlZ0V4cCgnXlthLXpBLVowLTlfXSskJyk7XHJcblxyXG4gIHN0YXRpYyBjaGVja1RoYXRTdGF0ZUlzTmFtZWRDb3JyZWN0bHkobmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQgfCBuZXZlciB7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgdGhyb3dTdGF0ZU5hbWVQcm9wZXJ0eUVycm9yKCk7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlTmFtZVJlZ2V4LnRlc3QobmFtZSkpIHtcclxuICAgICAgdGhyb3dTdGF0ZU5hbWVFcnJvcihuYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjaGVja1RoYXRTdGF0ZU5hbWVJc1VuaXF1ZShcclxuICAgIHN0YXRlTmFtZTogc3RyaW5nLFxyXG4gICAgc3RhdGU6IFN0YXRlQ2xhc3NJbnRlcm5hbCxcclxuICAgIHN0YXRlc0J5TmFtZTogU3RhdGVzQnlOYW1lXHJcbiAgKTogdm9pZCB8IG5ldmVyIHtcclxuICAgIGNvbnN0IGV4aXN0aW5nU3RhdGUgPSBzdGF0ZXNCeU5hbWVbc3RhdGVOYW1lXTtcclxuICAgIGlmIChleGlzdGluZ1N0YXRlICYmIGV4aXN0aW5nU3RhdGUgIT09IHN0YXRlKSB7XHJcbiAgICAgIHRocm93U3RhdGVVbmlxdWVFcnJvcihzdGF0ZU5hbWUsIHN0YXRlLm5hbWUsIGV4aXN0aW5nU3RhdGUubmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hlY2tUaGF0U3RhdGVDbGFzc2VzSGF2ZUJlZW5EZWNvcmF0ZWQoXHJcbiAgICBzdGF0ZUNsYXNzZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdXHJcbiAgKTogdm9pZCB8IG5ldmVyIHtcclxuICAgIHN0YXRlQ2xhc3Nlcy5mb3JFYWNoKChzdGF0ZUNsYXNzOiBTdGF0ZUNsYXNzSW50ZXJuYWwpID0+IHtcclxuICAgICAgaWYgKCFnZXRTdG9yZU1ldGFkYXRhKHN0YXRlQ2xhc3MpKSB7XHJcbiAgICAgICAgdGhyb3dTdGF0ZURlY29yYXRvckVycm9yKHN0YXRlQ2xhc3MubmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=