/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ɵivyEnabled } from '@angular/core';
import { mergeMap } from 'rxjs/operators';
import { localInject, ensureLocalInjectorCaptured, ensureInjectorNotifierIsCaptured } from '@ngxs/store/internals';
import { Store } from '../../store';
import { NgxsConfig } from '../../symbols';
import { createSelectObservable, createSelectorFn } from './symbols';
/**
 * Decorator for selecting a slice of state from the store.
 * @template T
 * @param {?=} rawSelector
 * @param {...?} paths
 * @return {?}
 */
export function Select(rawSelector, ...paths) {
    return (/**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        /** @type {?} */
        const name = key.toString();
        /** @type {?} */
        const selectorId = `__${name}__selector`;
        /** @type {?} */
        let selector = null;
        /** @type {?} */
        let injectorNotifier$ = null;
        if (ɵivyEnabled) {
            injectorNotifier$ = ensureInjectorNotifierIsCaptured(target);
        }
        Object.defineProperties(target, {
            [selectorId]: {
                writable: true,
                enumerable: false,
                configurable: true
            },
            [name]: {
                enumerable: true,
                configurable: true,
                /**
                 * @return {?}
                 */
                get() {
                    if (this[selectorId]) {
                        return this[selectorId];
                    }
                    // The `localInject` will be tree-shaken away in apps that
                    // still use the View Engine.
                    if (ɵivyEnabled) {
                        this[selectorId] = (/** @type {?} */ (injectorNotifier$)).pipe(mergeMap((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const store = localInject(this, Store);
                            /** @type {?} */
                            const config = localInject(this, NgxsConfig);
                            selector = selector || createSelectorFn(config, name, rawSelector, paths);
                            return createSelectObservable(selector, store);
                        })));
                    }
                    else {
                        selector = selector || createSelectorFn(null, name, rawSelector, paths);
                        this[selectorId] = createSelectObservable(selector, null);
                    }
                    return this[selectorId];
                }
            }
        });
        // Keep this `if` guard here so the below stuff will be tree-shaken away in apps that still use the View Engine.
        if (ɵivyEnabled) {
            ensureLocalInjectorCaptured(target);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3Qvc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsV0FBVyxFQUNYLDJCQUEyQixFQUMzQixnQ0FBZ0MsRUFDakMsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFjLE1BQU0sV0FBVyxDQUFDOzs7Ozs7OztBQUtqRixNQUFNLFVBQVUsTUFBTSxDQUFJLFdBQWUsRUFBRSxHQUFHLEtBQWU7SUFDM0Q7Ozs7O0lBQU8sVUFBUyxNQUFNLEVBQUUsR0FBRzs7Y0FDbkIsSUFBSSxHQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUU7O2NBQzdCLFVBQVUsR0FBRyxLQUFLLElBQUksWUFBWTs7WUFDcEMsUUFBUSxHQUFzQixJQUFJOztZQUNsQyxpQkFBaUIsR0FBa0MsSUFBSTtRQUUzRCxJQUFJLFdBQVcsRUFBRTtZQUNmLGlCQUFpQixHQUFHLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlEO1FBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUM5QixDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNaLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFVBQVUsRUFBRSxLQUFLO2dCQUNqQixZQUFZLEVBQUUsSUFBSTthQUNuQjtZQUNELENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ04sVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJOzs7O2dCQUNsQixHQUFHO29CQUNELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO3dCQUNwQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztxQkFDekI7b0JBQ0QsMERBQTBEO29CQUMxRCw2QkFBNkI7b0JBQzdCLElBQUksV0FBVyxFQUFFO3dCQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxtQkFBQSxpQkFBaUIsRUFBQyxDQUFDLElBQUksQ0FDeEMsUUFBUTs7O3dCQUFDLEdBQUcsRUFBRTs7a0NBQ04sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDOztrQ0FDaEMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDOzRCQUM1QyxRQUFRLEdBQUcsUUFBUSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDOzRCQUMxRSxPQUFPLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDakQsQ0FBQyxFQUFDLENBQ0gsQ0FBQztxQkFDSDt5QkFBTTt3QkFDTCxRQUFRLEdBQUcsUUFBUSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUN4RSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsc0JBQXNCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUMzRDtvQkFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDMUIsQ0FBQzthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsZ0hBQWdIO1FBQ2hILElBQUksV0FBVyxFQUFFO1lBQ2YsMkJBQTJCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVpdnlFbmFibGVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7XHJcbiAgbG9jYWxJbmplY3QsXHJcbiAgZW5zdXJlTG9jYWxJbmplY3RvckNhcHR1cmVkLFxyXG4gIGVuc3VyZUluamVjdG9yTm90aWZpZXJJc0NhcHR1cmVkXHJcbn0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcclxuXHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdE9ic2VydmFibGUsIGNyZWF0ZVNlbGVjdG9yRm4sIFNlbGVjdG9yRm4gfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmb3Igc2VsZWN0aW5nIGEgc2xpY2Ugb2Ygc3RhdGUgZnJvbSB0aGUgc3RvcmUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0PFQ+KHJhd1NlbGVjdG9yPzogVCwgLi4ucGF0aHM6IHN0cmluZ1tdKTogUHJvcGVydHlEZWNvcmF0b3Ige1xyXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQsIGtleSk6IHZvaWQge1xyXG4gICAgY29uc3QgbmFtZTogc3RyaW5nID0ga2V5LnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBzZWxlY3RvcklkID0gYF9fJHtuYW1lfV9fc2VsZWN0b3JgO1xyXG4gICAgbGV0IHNlbGVjdG9yOiBTZWxlY3RvckZuIHwgbnVsbCA9IG51bGw7XHJcbiAgICBsZXQgaW5qZWN0b3JOb3RpZmllciQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBpZiAoybVpdnlFbmFibGVkKSB7XHJcbiAgICAgIGluamVjdG9yTm90aWZpZXIkID0gZW5zdXJlSW5qZWN0b3JOb3RpZmllcklzQ2FwdHVyZWQodGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHtcclxuICAgICAgW3NlbGVjdG9ySWRdOiB7XHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIFtuYW1lXToge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldCgpIHtcclxuICAgICAgICAgIGlmICh0aGlzW3NlbGVjdG9ySWRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3NlbGVjdG9ySWRdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gVGhlIGBsb2NhbEluamVjdGAgd2lsbCBiZSB0cmVlLXNoYWtlbiBhd2F5IGluIGFwcHMgdGhhdFxyXG4gICAgICAgICAgLy8gc3RpbGwgdXNlIHRoZSBWaWV3IEVuZ2luZS5cclxuICAgICAgICAgIGlmICjJtWl2eUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpc1tzZWxlY3RvcklkXSA9IGluamVjdG9yTm90aWZpZXIkIS5waXBlKFxyXG4gICAgICAgICAgICAgIG1lcmdlTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gbG9jYWxJbmplY3QodGhpcywgU3RvcmUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbG9jYWxJbmplY3QodGhpcywgTmd4c0NvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8IGNyZWF0ZVNlbGVjdG9yRm4oY29uZmlnLCBuYW1lLCByYXdTZWxlY3RvciwgcGF0aHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNlbGVjdE9ic2VydmFibGUoc2VsZWN0b3IsIHN0b3JlKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCBjcmVhdGVTZWxlY3RvckZuKG51bGwsIG5hbWUsIHJhd1NlbGVjdG9yLCBwYXRocyk7XHJcbiAgICAgICAgICAgIHRoaXNbc2VsZWN0b3JJZF0gPSBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlKHNlbGVjdG9yLCBudWxsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0aGlzW3NlbGVjdG9ySWRdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gS2VlcCB0aGlzIGBpZmAgZ3VhcmQgaGVyZSBzbyB0aGUgYmVsb3cgc3R1ZmYgd2lsbCBiZSB0cmVlLXNoYWtlbiBhd2F5IGluIGFwcHMgdGhhdCBzdGlsbCB1c2UgdGhlIFZpZXcgRW5naW5lLlxyXG4gICAgaWYgKMm1aXZ5RW5hYmxlZCkge1xyXG4gICAgICBlbnN1cmVMb2NhbEluamVjdG9yQ2FwdHVyZWQodGFyZ2V0KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==