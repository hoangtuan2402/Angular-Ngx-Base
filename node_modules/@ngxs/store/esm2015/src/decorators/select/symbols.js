/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ɵivyEnabled } from '@angular/core';
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';
/** @type {?} */
const DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
export function createSelectObservable(selector, store) {
    // We're doing this stuff to tree-shake the `SelectFactory` when the user
    // is running Ivy since NGXS will select the state from the provided `store` argument.
    return ɵivyEnabled
        ? createSelectObservableIvy(selector, store)
        : createSelectObservableViewEngine(selector);
}
/**
 * @param {?} config
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(config, name, rawSelector, paths = []) {
    rawSelector = rawSelector || removeDollarAtTheEnd(name);
    if (typeof rawSelector !== 'string') {
        return rawSelector;
    }
    else {
        /** @type {?} */
        const propsArray = paths.length
            ? [rawSelector, ...paths]
            : rawSelector.split('.');
        return ɵivyEnabled
            ? createSelectorFnIvy(propsArray, config)
            : createSelectorFnViewEngine(propsArray);
    }
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    const lastCharIndex = name.length - 1;
    /** @type {?} */
    const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
function createSelectObservableIvy(selector, store) {
    return ngDevMode && !store ? throwSelectFactoryNotConnectedError() : (/** @type {?} */ (store)).select(selector);
}
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
function createSelectObservableViewEngine(selector) {
    return SelectFactory.store
        ? SelectFactory.store.select(selector)
        : throwSelectFactoryNotConnectedError();
}
/**
 * @param {?} propsArray
 * @param {?} config
 * @return {?}
 */
function createSelectorFnIvy(propsArray, config) {
    return ngDevMode && !config
        ? throwSelectFactoryNotConnectedError()
        : propGetter(propsArray, (/** @type {?} */ (config)));
}
/**
 * @param {?} propsArray
 * @return {?}
 */
function createSelectorFnViewEngine(propsArray) {
    return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBUSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7TUFFOUUsZ0JBQWdCLEdBQUcsRUFBRTs7Ozs7OztBQUUzQixNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFFBQWEsRUFDYixLQUFtQjtJQUVuQix5RUFBeUU7SUFDekUsc0ZBQXNGO0lBQ3RGLE9BQU8sV0FBVztRQUNoQixDQUFDLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztRQUM1QyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQzs7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLE1BQXlCLEVBQ3pCLElBQVksRUFDWixXQUFpQixFQUNqQixRQUFrQixFQUFFO0lBRXBCLFdBQVcsR0FBRyxXQUFXLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsT0FBTyxXQUFXLENBQUM7S0FDcEI7U0FBTTs7Y0FDQyxVQUFVLEdBQWEsS0FBSyxDQUFDLE1BQU07WUFDdkMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUUxQixPQUFPLFdBQVc7WUFDaEIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUM7WUFDekMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzVDO0FBQ0gsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLG9CQUFvQixDQUFDLElBQVk7O1VBQ3pDLGFBQWEsR0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O1VBQ3ZDLGNBQWMsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLGdCQUFnQjtJQUNuRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5RCxDQUFDOzs7Ozs7O0FBY0QsU0FBUyx5QkFBeUIsQ0FDaEMsUUFBYSxFQUNiLEtBQW1CO0lBRW5CLE9BQU8sU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBQSxLQUFLLEVBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0YsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBVSxRQUFhO0lBQzlELE9BQU8sYUFBYSxDQUFDLEtBQUs7UUFDeEIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxDQUFDLENBQUMsbUNBQW1DLEVBQUUsQ0FBQztBQUM1QyxDQUFDOzs7Ozs7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFVBQW9CLEVBQUUsTUFBeUI7SUFDMUUsT0FBTyxTQUFTLElBQUksQ0FBQyxNQUFNO1FBQ3pCLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRTtRQUN2QyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBQSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7Ozs7O0FBRUQsU0FBUywwQkFBMEIsQ0FBQyxVQUFvQjtJQUN0RCxPQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsbUJBQUEsYUFBYSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUsIMm1aXZ5RW5hYmxlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4uLy4uL3N0b3JlJztcclxuaW1wb3J0IHsgTmd4c0NvbmZpZyB9IGZyb20gJy4uLy4uL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBwcm9wR2V0dGVyIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgU2VsZWN0RmFjdG9yeSB9IGZyb20gJy4vc2VsZWN0LWZhY3RvcnknO1xyXG5pbXBvcnQgeyBTdGF0ZVRva2VuIH0gZnJvbSAnLi4vLi4vc3RhdGUtdG9rZW4vc3RhdGUtdG9rZW4nO1xyXG5pbXBvcnQgeyBFeHRyYWN0VG9rZW5UeXBlIH0gZnJvbSAnLi4vLi4vc3RhdGUtdG9rZW4vc3ltYm9scyc7XHJcbmltcG9ydCB7IHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yIH0gZnJvbSAnLi4vLi4vY29uZmlncy9tZXNzYWdlcy5jb25maWcnO1xyXG5cclxuY29uc3QgRE9MTEFSX0NIQVJfQ09ERSA9IDM2O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9ic2VydmFibGU8VCA9IGFueT4oXHJcbiAgc2VsZWN0b3I6IGFueSxcclxuICBzdG9yZTogU3RvcmUgfCBudWxsXHJcbik6IE9ic2VydmFibGU8VD4ge1xyXG4gIC8vIFdlJ3JlIGRvaW5nIHRoaXMgc3R1ZmYgdG8gdHJlZS1zaGFrZSB0aGUgYFNlbGVjdEZhY3RvcnlgIHdoZW4gdGhlIHVzZXJcclxuICAvLyBpcyBydW5uaW5nIEl2eSBzaW5jZSBOR1hTIHdpbGwgc2VsZWN0IHRoZSBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCBgc3RvcmVgIGFyZ3VtZW50LlxyXG4gIHJldHVybiDJtWl2eUVuYWJsZWRcclxuICAgID8gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZUl2eShzZWxlY3Rvciwgc3RvcmUpXHJcbiAgICA6IGNyZWF0ZVNlbGVjdE9ic2VydmFibGVWaWV3RW5naW5lKHNlbGVjdG9yKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRm4oXHJcbiAgY29uZmlnOiBOZ3hzQ29uZmlnIHwgbnVsbCxcclxuICBuYW1lOiBzdHJpbmcsXHJcbiAgcmF3U2VsZWN0b3I/OiBhbnksXHJcbiAgcGF0aHM6IHN0cmluZ1tdID0gW11cclxuKTogU2VsZWN0b3JGbiB7XHJcbiAgcmF3U2VsZWN0b3IgPSByYXdTZWxlY3RvciB8fCByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lKTtcclxuXHJcbiAgaWYgKHR5cGVvZiByYXdTZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiByYXdTZWxlY3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgcHJvcHNBcnJheTogc3RyaW5nW10gPSBwYXRocy5sZW5ndGhcclxuICAgICAgPyBbcmF3U2VsZWN0b3IsIC4uLnBhdGhzXVxyXG4gICAgICA6IHJhd1NlbGVjdG9yLnNwbGl0KCcuJyk7XHJcblxyXG4gICAgcmV0dXJuIMm1aXZ5RW5hYmxlZFxyXG4gICAgICA/IGNyZWF0ZVNlbGVjdG9yRm5JdnkocHJvcHNBcnJheSwgY29uZmlnKVxyXG4gICAgICA6IGNyZWF0ZVNlbGVjdG9yRm5WaWV3RW5naW5lKHByb3BzQXJyYXkpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBleGFtcGxlIElmIGBmb28kYCA9PiBtYWtlIGl0IGp1c3QgYGZvb2BcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGxhc3RDaGFySW5kZXg6IG51bWJlciA9IG5hbWUubGVuZ3RoIC0gMTtcclxuICBjb25zdCBkb2xsYXJBdFRoZUVuZDogYm9vbGVhbiA9IG5hbWUuY2hhckNvZGVBdChsYXN0Q2hhckluZGV4KSA9PT0gRE9MTEFSX0NIQVJfQ09ERTtcclxuICByZXR1cm4gZG9sbGFyQXRUaGVFbmQgPyBuYW1lLnNsaWNlKDAsIGxhc3RDaGFySW5kZXgpIDogbmFtZTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU2VsZWN0b3JGbiA9XHJcbiAgfCAoKHN0YXRlOiBhbnksIC4uLnN0YXRlczogYW55W10pID0+IGFueSlcclxuICB8IHN0cmluZ1xyXG4gIHwgVHlwZTxhbnk+XHJcbiAgfCBTdGF0ZVRva2VuPGFueT47XHJcblxyXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVR5cGU8VD4gPSBUIGV4dGVuZHMgU3RhdGVUb2tlbjxhbnk+XHJcbiAgPyBPYnNlcnZhYmxlPEV4dHJhY3RUb2tlblR5cGU8VD4+XHJcbiAgOiBUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnlcclxuICA/IE9ic2VydmFibGU8UmV0dXJuVHlwZTxUPj5cclxuICA6IGFueTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9ic2VydmFibGVJdnk8VCA9IGFueT4oXHJcbiAgc2VsZWN0b3I6IGFueSxcclxuICBzdG9yZTogU3RvcmUgfCBudWxsXHJcbik6IE9ic2VydmFibGU8VD4ge1xyXG4gIHJldHVybiBuZ0Rldk1vZGUgJiYgIXN0b3JlID8gdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKSA6IHN0b3JlIS5zZWxlY3Qoc2VsZWN0b3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlVmlld0VuZ2luZTxUID0gYW55PihzZWxlY3RvcjogYW55KTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgcmV0dXJuIFNlbGVjdEZhY3Rvcnkuc3RvcmVcclxuICAgID8gU2VsZWN0RmFjdG9yeS5zdG9yZS5zZWxlY3Qoc2VsZWN0b3IpXHJcbiAgICA6IHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRm5JdnkocHJvcHNBcnJheTogc3RyaW5nW10sIGNvbmZpZzogTmd4c0NvbmZpZyB8IG51bGwpIHtcclxuICByZXR1cm4gbmdEZXZNb2RlICYmICFjb25maWdcclxuICAgID8gdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKVxyXG4gICAgOiBwcm9wR2V0dGVyKHByb3BzQXJyYXksIGNvbmZpZyEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZuVmlld0VuZ2luZShwcm9wc0FycmF5OiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBwcm9wR2V0dGVyKHByb3BzQXJyYXksIFNlbGVjdEZhY3RvcnkuY29uZmlnISk7XHJcbn1cclxuIl19