/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { APP_BOOTSTRAP_LISTENER, InjectionToken, NgModule } from '@angular/core';
import { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper } from '@ngxs/store/internals';
import { FEATURE_STATE_TOKEN, NgxsConfig, ROOT_STATE_TOKEN } from './symbols';
import { USER_PROVIDED_NGXS_EXECUTION_STRATEGY } from './execution/symbols';
import { StateFactory } from './internal/state-factory';
import { StateContextFactory } from './internal/state-context-factory';
import { Actions, InternalActions } from './actions-stream';
import { LifecycleStateManager } from './internal/lifecycle-state-manager';
import { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';
import { InternalStateOperations } from './internal/state-operations';
import { Store } from './store';
import { StateStream } from './internal/state-stream';
import { PluginManager } from './plugin-manager';
import { NgxsRootModule } from './modules/ngxs-root.module';
import { NgxsFeatureModule } from './modules/ngxs-feature.module';
import { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';
import { mergeDeep } from './utils/utils';
/**
 * Ngxs Module
 */
export class NgxsModule {
    /**
     * Root module factory
     * @param {?=} states
     * @param {?=} options
     * @return {?}
     */
    static forRoot(states = [], options = {}) {
        return {
            ngModule: NgxsRootModule,
            providers: [
                StateFactory,
                StateContextFactory,
                Actions,
                InternalActions,
                NgxsBootstrapper,
                LifecycleStateManager,
                InternalDispatcher,
                InternalDispatchedActionResults,
                InternalStateOperations,
                InternalNgxsExecutionStrategy,
                Store,
                StateStream,
                PluginManager,
                ...states,
                ...NgxsModule.ngxsTokenProviders(states, options)
            ]
        };
    }
    /**
     * Feature module factory
     * @param {?=} states
     * @return {?}
     */
    static forFeature(states = []) {
        return {
            ngModule: NgxsFeatureModule,
            providers: [
                StateFactory,
                PluginManager,
                ...states,
                {
                    provide: FEATURE_STATE_TOKEN,
                    multi: true,
                    useValue: states
                }
            ]
        };
    }
    /**
     * @private
     * @param {?} states
     * @param {?} options
     * @return {?}
     */
    static ngxsTokenProviders(states, options) {
        return [
            {
                provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,
                useValue: options.executionStrategy
            },
            {
                provide: ROOT_STATE_TOKEN,
                useValue: states
            },
            {
                provide: NgxsModule.ROOT_OPTIONS,
                useValue: options
            },
            {
                provide: NgxsConfig,
                useFactory: NgxsModule.ngxsConfigFactory,
                deps: [NgxsModule.ROOT_OPTIONS]
            },
            {
                provide: APP_BOOTSTRAP_LISTENER,
                useFactory: NgxsModule.appBootstrapListenerFactory,
                multi: true,
                deps: [NgxsBootstrapper]
            },
            {
                provide: INITIAL_STATE_TOKEN,
                useFactory: NgxsModule.getInitialState
            },
            {
                provide: NGXS_STATE_CONTEXT_FACTORY,
                useExisting: StateContextFactory
            },
            {
                provide: NGXS_STATE_FACTORY,
                useExisting: StateFactory
            }
        ];
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    static ngxsConfigFactory(options) {
        return mergeDeep(new NgxsConfig(), options);
    }
    /**
     * @private
     * @param {?} bootstrapper
     * @return {?}
     */
    static appBootstrapListenerFactory(bootstrapper) {
        return (/**
         * @return {?}
         */
        () => bootstrapper.bootstrap());
    }
    /**
     * @private
     * @return {?}
     */
    static getInitialState() {
        return InitialState.pop();
    }
}
NgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');
NgxsModule.decorators = [
    { type: NgModule }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsModule.ROOT_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,