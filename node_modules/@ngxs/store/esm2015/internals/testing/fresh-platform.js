/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    const document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    const root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    let resolve = null;
    /** @type {?} */
    let reject = null;
    /** @type {?} */
    let whenDoneIsCalledPromise = null;
    /** @type {?} */
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        (_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (hasDoneArgument) {
                    yield fn((/**
                     * @param {?=} error
                     * @return {?}
                     */
                    (error) => {
                        if (error) {
                            (/** @type {?} */ (reject))(error);
                        }
                        else {
                            (/** @type {?} */ (resolve))();
                        }
                    }));
                    yield (/** @type {?} */ (whenDoneIsCalledPromise));
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV6RSxTQUFTLGlCQUFpQjs7VUFDbEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztVQUNuQyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7SUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQzs7OztBQUVELFNBQVMsaUJBQWlCOztVQUNsQixJQUFJLEdBQVksbUJBQUEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQztJQUN4RSxJQUFJO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFBQyxXQUFNLEdBQUU7QUFDWixDQUFDOzs7O0FBRUQsU0FBUywyQ0FBMkM7SUFDbEQsZUFBZSxFQUFFLENBQUM7SUFDbEIsaUJBQWlCLEVBQUUsQ0FBQztBQUN0QixDQUFDOzs7Ozs7O0FBS0QsU0FBUywrQkFBK0I7SUFDdEMsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixlQUFlLEVBQUUsQ0FBQzs7VUFDWixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztJQUM5QixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUEwQzs7UUFDbEUsT0FBTyxHQUF3QixJQUFJOztRQUNuQyxNQUFNLEdBQW9DLElBQUk7O1FBQzlDLHVCQUF1QixHQUF5QixJQUFJOztVQUVsRCxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO0lBRXZDLElBQUksZUFBZSxFQUFFO1FBQ25CLHVCQUF1QixHQUFHLElBQUksT0FBTzs7Ozs7UUFBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNoRSxPQUFPLEdBQUcsUUFBUSxDQUFDO1lBQ25CLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxFQUFDLENBQUM7S0FDSjtJQUVEOzs7SUFBTyxTQUFlLHNCQUFzQjs7WUFDMUMsSUFBSTtnQkFDRiwyQ0FBMkMsRUFBRSxDQUFDO2dCQUU5QyxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsTUFBTSxFQUFFOzs7O29CQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7d0JBQ3pCLElBQUksS0FBSyxFQUFFOzRCQUNULG1CQUFBLE1BQU0sRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUNoQjs2QkFBTTs0QkFDTCxtQkFBQSxPQUFPLEVBQUMsRUFBRSxDQUFDO3lCQUNaO29CQUNILENBQUMsRUFBQyxDQUFDO29CQUNILE1BQU0sbUJBQUEsdUJBQXVCLEVBQUMsQ0FBQztpQkFDaEM7cUJBQU07b0JBQ0wsTUFBTSxFQUFFLEVBQUUsQ0FBQztpQkFDWjthQUNGO29CQUFTO2dCQUNSLCtCQUErQixFQUFFLENBQUM7YUFDbkM7UUFDSCxDQUFDO0tBQUEsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgVkVSU0lPTiwgZGVzdHJveVBsYXRmb3JtLCBjcmVhdGVQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlUm9vdEVsZW1lbnQoKSB7XHJcbiAgY29uc3QgZG9jdW1lbnQgPSBUZXN0QmVkLmluamVjdChET0NVTUVOVCk7XHJcbiAgY29uc3Qgcm9vdCA9IGdldERPTSgpLmNyZWF0ZUVsZW1lbnQoJ2FwcC1yb290JywgZG9jdW1lbnQpO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocm9vdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVJvb3RFbGVtZW50KCkge1xyXG4gIGNvbnN0IHJvb3Q6IEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXBwLXJvb3QnKS5pdGVtKDApITtcclxuICB0cnkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChyb290KTtcclxuICB9IGNhdGNoIHt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoKSB7XHJcbiAgZGVzdHJveVBsYXRmb3JtKCk7XHJcbiAgY3JlYXRlUm9vdEVsZW1lbnQoKTtcclxufVxyXG5cclxuLy8gQXMgd2UgY3JlYXRlIG91ciBjdXN0b20gcGxhdGZvcm0gdmlhIGBib290c3RyYXBNb2R1bGVgXHJcbi8vIHdlIGhhdmUgdG8gZGVzdHJveSBpdCBhZnRlciBhc3NldGlvbnMgYW5kIHJldmVydFxyXG4vLyB0aGUgcHJldmlvdXMgb25lXHJcbmZ1bmN0aW9uIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKSB7XHJcbiAgcmVtb3ZlUm9vdEVsZW1lbnQoKTtcclxuICBkZXN0cm95UGxhdGZvcm0oKTtcclxuICBjb25zdCB2ZXJzaW9uID0gK1ZFUlNJT04ubWFqb3I7XHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9jb21taXQvZTI1MGRiNGYyNjE3NDFiMDRlZTRjYmFkNGRlYzQxYTg5MDhhMTJhYVxyXG4gIGlmICh2ZXJzaW9uIDwgMTQpIHtcclxuICAgIGNyZWF0ZVBsYXRmb3JtKFRlc3RCZWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyZXNoUGxhdGZvcm0oZm46IChkb25lPzogVm9pZEZ1bmN0aW9uKSA9PiBQcm9taXNlPHZvaWQ+KSB7XHJcbiAgbGV0IHJlc29sdmU6IFZvaWRGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xyXG4gIGxldCByZWplY3Q6ICgoZXJyb3I6IEVycm9yKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xyXG4gIGxldCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdCBoYXNEb25lQXJndW1lbnQgPSBmbi5sZW5ndGggPT09IDE7XHJcblxyXG4gIGlmIChoYXNEb25lQXJndW1lbnQpIHtcclxuICAgIHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4oKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XHJcbiAgICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcclxuICAgICAgcmVqZWN0ID0gX3JlamVjdDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHRlc3RXaXRoQUZyZXNoUGxhdGZvcm0oKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKCk7XHJcblxyXG4gICAgICBpZiAoaGFzRG9uZUFyZ3VtZW50KSB7XHJcbiAgICAgICAgYXdhaXQgZm4oKGVycm9yPzogRXJyb3IpID0+IHtcclxuICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QhKGVycm9yKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUhKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgd2hlbkRvbmVJc0NhbGxlZFByb21pc2UhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IGZuKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==