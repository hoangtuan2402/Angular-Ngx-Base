/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { setValue, getValue, InitState, UpdateState, actionMatcher } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { STORAGE_ENGINE, NGXS_STORAGE_PLUGIN_OPTIONS } from './symbols';
import { DEFAULT_STATE_KEY } from './internals';
var NgxsStoragePlugin = /** @class */ (function () {
    function NgxsStoragePlugin(_options, _engine, _platformId) {
        this._options = _options;
        this._engine = _engine;
        this._platformId = _platformId;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsStoragePlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        var e_1, _a;
        if (isPlatformServer(this._platformId) && this._engine === null) {
            return next(state, event);
        }
        // We cast to `string[]` here as we're sure that this option has been
        // transformed by the `storageOptionsFactory` function that provided token
        /** @type {?} */
        var keys = (/** @type {?} */ (this._options.key));
        /** @type {?} */
        var matches = actionMatcher(event);
        /** @type {?} */
        var isInitAction = matches(InitState);
        /** @type {?} */
        var isUpdateAction = matches(UpdateState);
        /** @type {?} */
        var isInitOrUpdateAction = isInitAction || isUpdateAction;
        /** @type {?} */
        var hasMigration = false;
        if (isInitOrUpdateAction) {
            var _loop_1 = function (key) {
                // We're checking what states have been added by NGXS and if any of these states should be handled by
                // the storage plugin. For instance, we only want to deserialize the `auth` state, NGXS has added
                // the `user` state, the storage plugin will be rerun and will do redundant deserialization.
                if (isUpdateAction && event.addedStates && !event.addedStates.hasOwnProperty(key)) {
                    return "continue";
                }
                /** @type {?} */
                var isMaster = key === DEFAULT_STATE_KEY;
                /** @type {?} */
                var val = this_1._engine.getItem((/** @type {?} */ (key)));
                if (val !== 'undefined' && val != null) {
                    try {
                        /** @type {?} */
                        var newVal = (/** @type {?} */ (this_1._options.deserialize))(val);
                        val = (/** @type {?} */ (this_1._options.afterDeserialize))(newVal, key);
                    }
                    catch (e) {
                        // Caretaker note: we have still left the `typeof` condition in order to avoid
                        // creating a breaking change for projects that still use the View Engine.
                        if (typeof ngDevMode === 'undefined' || ngDevMode) {
                            console.error("Error ocurred while deserializing the " + key + " store value, falling back to empty object, the value obtained from the store: ", val);
                        }
                        val = {};
                    }
                    if (this_1._options.migrations) {
                        this_1._options.migrations.forEach((/**
                         * @param {?} strategy
                         * @return {?}
                         */
                        function (strategy) {
                            /** @type {?} */
                            var versionMatch = strategy.version === getValue(val, strategy.versionKey || 'version');
                            /** @type {?} */
                            var keyMatch = (!strategy.key && isMaster) || strategy.key === key;
                            if (versionMatch && keyMatch) {
                                val = strategy.migrate(val);
                                hasMigration = true;
                            }
                        }));
                    }
                    if (!isMaster) {
                        state = setValue(state, (/** @type {?} */ (key)), val);
                    }
                    else {
                        state = tslib_1.__assign({}, state, val);
                    }
                }
            };
            var this_1 = this;
            try {
                for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        function (nextState) {
            var e_2, _a;
            if (!isInitOrUpdateAction || (isInitOrUpdateAction && hasMigration)) {
                try {
                    for (var keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                        var key = keys_2_1.value;
                        /** @type {?} */
                        var val = nextState;
                        if (key !== DEFAULT_STATE_KEY) {
                            val = getValue(nextState, (/** @type {?} */ (key)));
                        }
                        try {
                            /** @type {?} */
                            var newVal = (/** @type {?} */ (_this._options.beforeSerialize))(val, key);
                            _this._engine.setItem((/** @type {?} */ (key)), (/** @type {?} */ (_this._options.serialize))(newVal));
                        }
                        catch (e) {
                            // Caretaker note: we have still left the `typeof` condition in order to avoid
                            // creating a breaking change for projects that still use the View Engine.
                            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                                console.error("Error ocurred while serializing the " + key + " store value, value not updated, the value obtained from the store: ", val);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        })));
    };
    NgxsStoragePlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsStoragePlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_STORAGE_PLUGIN_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STORAGE_ENGINE,] }] },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return NgxsStoragePlugin;
}());
export { NgxsStoragePlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._engine;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._platformId;
}
//# sourceMappingURL=data:application/json;base64,