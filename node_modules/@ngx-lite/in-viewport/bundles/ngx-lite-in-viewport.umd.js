(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/in-viewport', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['in-viewport'] = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, common, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var NgxInViewportDirective = /** @class */ (function () {
        function NgxInViewportDirective(platformId, elementRef) {
            this.platformId = platformId;
            this.elementRef = elementRef;
            this.offset = 0;
            this.inViewport = new i0.EventEmitter();
        }
        NgxInViewportDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (common.isPlatformBrowser(this.platformId)) {
                this.subscription = rxjs.fromEvent(window, 'scroll')
                    .pipe(operators.merge(rxjs.fromEvent(window, 'resize')), operators.debounceTime(100))
                    .subscribe(function () { return _this.check(); });
            }
        };
        NgxInViewportDirective.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        NgxInViewportDirective.prototype.check = function () {
            var event = {
                target: this.elementRef.nativeElement,
                value: document.body.contains(this.elementRef.nativeElement) &&
                    this.elementRef.nativeElement.getBoundingClientRect().top <=
                        window.innerHeight + this.offset,
            };
            this.inViewport.emit(event);
        };
        return NgxInViewportDirective;
    }());
    NgxInViewportDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportDirective, deps: [{ token: i0.PLATFORM_ID }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    NgxInViewportDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: NgxInViewportDirective, selector: "[ngxInViewport]", inputs: { offset: "offset" }, outputs: { inViewport: "inViewport" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[ngxInViewport]',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: i0__namespace.ElementRef }];
        }, propDecorators: { offset: [{
                    type: i0.Input
                }], inViewport: [{
                    type: i0.Output
                }] } });

    var NgxInViewportModule = /** @class */ (function () {
        function NgxInViewportModule() {
        }
        return NgxInViewportModule;
    }());
    NgxInViewportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgxInViewportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportModule, declarations: [NgxInViewportDirective], imports: [common.CommonModule], exports: [NgxInViewportDirective] });
    NgxInViewportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxInViewportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxInViewportDirective],
                        exports: [NgxInViewportDirective],
                    }]
            }] });

    /*
     * Public API Surface of ngx-in-viewport
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxInViewportDirective = NgxInViewportDirective;
    exports.NgxInViewportModule = NgxInViewportModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lite-in-viewport.umd.js.map
