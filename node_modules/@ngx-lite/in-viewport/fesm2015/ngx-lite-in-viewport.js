import * as i0 from '@angular/core';
import { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { fromEvent } from 'rxjs';
import { merge, debounceTime } from 'rxjs/operators';

class NgxInViewportDirective {
    constructor(platformId, elementRef) {
        this.platformId = platformId;
        this.elementRef = elementRef;
        this.offset = 0;
        this.inViewport = new EventEmitter();
    }
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.subscription = fromEvent(window, 'scroll')
                .pipe(merge(fromEvent(window, 'resize')), debounceTime(100))
                .subscribe(() => this.check());
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    check() {
        const event = {
            target: this.elementRef.nativeElement,
            value: document.body.contains(this.elementRef.nativeElement) &&
                this.elementRef.nativeElement.getBoundingClientRect().top <=
                    window.innerHeight + this.offset,
        };
        this.inViewport.emit(event);
    }
}
NgxInViewportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportDirective, deps: [{ token: PLATFORM_ID }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxInViewportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: NgxInViewportDirective, selector: "[ngxInViewport]", inputs: { offset: "offset" }, outputs: { inViewport: "inViewport" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxInViewport]',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ElementRef }]; }, propDecorators: { offset: [{
                type: Input
            }], inViewport: [{
                type: Output
            }] } });

class NgxInViewportModule {
}
NgxInViewportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxInViewportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportModule, declarations: [NgxInViewportDirective], imports: [CommonModule], exports: [NgxInViewportDirective] });
NgxInViewportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInViewportModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NgxInViewportDirective],
                    exports: [NgxInViewportDirective],
                }]
        }] });

/*
 * Public API Surface of ngx-in-viewport
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxInViewportDirective, NgxInViewportModule };
//# sourceMappingURL=ngx-lite-in-viewport.js.map
