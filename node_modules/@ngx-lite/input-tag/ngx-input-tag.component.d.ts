import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TagFormatter } from './ngx-input-tag.di-tokens';
import * as i0 from "@angular/core";
export declare enum KeyCodes {
    Backspace = 8,
    Tab = 9,
    Enter = 13,
    Escape = 27,
    LeftArrow = 37,
    UpArrow = 38,
    RightArrow = 39,
    DownArrow = 40,
    Comma = 188
}
export declare class NgxInputTagComponent implements ControlValueAccessor {
    private tagFormatter;
    get value(): string[];
    set value(val: string[]);
    inputElement?: ElementRef;
    tagSuggestions: string[];
    maxTagLength: number;
    maxNumberOfTags: number;
    readonly textChange: EventEmitter<string>;
    private _value;
    private prevTagInput;
    private currentNumberOfTags;
    private tagError;
    constructor(tagFormatter: TagFormatter);
    onChange: (_value: string[]) => void;
    onTouched: () => void;
    registerOnChange(fn: (value: string[]) => void): void;
    registerOnTouched(fn: () => void): void;
    writeValue(value: string[]): void;
    validate(): {
        message: string;
    } | null;
    handleClick(event: MouseEvent): void;
    addTag(tag: string): void;
    addTagEvent(event: KeyboardEvent): void;
    preventDefaultTabBehavior(event: KeyboardEvent): void;
    addTagClick(event: MouseEvent, value: string): void;
    addSuggestedTag(tag: string): void;
    removeTag(tag: string, event: any): void;
    focus(): void;
    setCurrentNumberOfTags(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxInputTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxInputTagComponent, "ngx-input-tag", never, { "tagSuggestions": "tagSuggestions"; "maxTagLength": "maxTagLength"; "maxNumberOfTags": "maxNumberOfTags"; }, { "textChange": "textChange"; }, never, never>;
}
export declare function formatter(tag: string): string;
