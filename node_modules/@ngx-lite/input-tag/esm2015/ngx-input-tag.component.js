import { forwardRef, Component, EventEmitter, HostListener, Input, Output, ViewChild, Inject, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { NGX_INPUT_TAG_TAG_FORMATTER, } from './ngx-input-tag.di-tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export var KeyCodes;
(function (KeyCodes) {
    KeyCodes[KeyCodes["Backspace"] = 8] = "Backspace";
    KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
    KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
    KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
    KeyCodes[KeyCodes["LeftArrow"] = 37] = "LeftArrow";
    KeyCodes[KeyCodes["UpArrow"] = 38] = "UpArrow";
    KeyCodes[KeyCodes["RightArrow"] = 39] = "RightArrow";
    KeyCodes[KeyCodes["DownArrow"] = 40] = "DownArrow";
    KeyCodes[KeyCodes["Comma"] = 188] = "Comma";
})(KeyCodes || (KeyCodes = {}));
export class NgxInputTagComponent {
    constructor(tagFormatter) {
        this.tagFormatter = tagFormatter;
        this.tagSuggestions = [];
        this.maxTagLength = 25;
        this.maxNumberOfTags = 1000;
        this.textChange = new EventEmitter();
        this._value = [];
        this.prevTagInput = '';
        this.currentNumberOfTags = 0;
        this.tagError = null;
        this.onChange = (_value) => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.onTouched();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value) {
            this.value = value.map((v) => this.tagFormatter(v));
            this.setCurrentNumberOfTags();
        }
    }
    validate() {
        return this.tagError;
    }
    handleClick(event) {
        if (this.inputElement &&
            !this.inputElement.nativeElement.contains(event.target) &&
            this.inputElement.nativeElement.value) {
            this.addTag(this.inputElement.nativeElement.value);
        }
    }
    addTag(tag) {
        const formattedTag = this.tagFormatter(tag);
        const tagIsEmpty = formattedTag.length === 0;
        const invalidTagLength = !formattedTag.length ||
            (this.maxTagLength && formattedTag.length > this.maxTagLength);
        const duplicateTag = this.value.indexOf(formattedTag) > -1;
        const exceedsMaxNumberOfTags = this.currentNumberOfTags > this.maxNumberOfTags;
        if (!tagIsEmpty && invalidTagLength) {
            this.tagError = {
                message: `Tag length cannot exceed ${this.maxTagLength} characters`,
            };
        }
        if (duplicateTag) {
            this.tagError = { message: 'Cannot add duplicate tag' };
        }
        if (exceedsMaxNumberOfTags) {
            const plural = this.maxNumberOfTags === 1 ? '' : 's';
            this.tagError = {
                message: `Cannot exceed ${this.maxNumberOfTags} tag${plural}`,
            };
        }
        if (!tagIsEmpty &&
            !invalidTagLength &&
            !duplicateTag &&
            !exceedsMaxNumberOfTags &&
            this.inputElement) {
            this.tagError = null;
            this.value.push(formattedTag);
            this.setCurrentNumberOfTags();
            this.inputElement.nativeElement.value = '';
        }
        this.value = this.value;
        this.focus();
    }
    addTagEvent(event) {
        const input = event.target;
        this.tagError = null;
        this.value = this.value;
        this.textChange.emit(input.value);
        if (event.keyCode === KeyCodes.Backspace &&
            this.prevTagInput.length === 0) {
            this._value.pop();
            this.setCurrentNumberOfTags();
        }
        else if (event.keyCode === KeyCodes.Enter ||
            event.keyCode === KeyCodes.Comma ||
            event.keyCode === KeyCodes.Tab) {
            this.addTag(input.value);
        }
        this.prevTagInput = input.value;
    }
    preventDefaultTabBehavior(event) {
        if (event.keyCode === KeyCodes.Tab && this.prevTagInput.length > 0) {
            event.preventDefault();
        }
    }
    addTagClick(event, value) {
        event.preventDefault();
        if (value.length > 0) {
            this.addTag(value);
        }
    }
    addSuggestedTag(tag) {
        this.addTag(tag);
    }
    removeTag(tag, event) {
        if (event.keyCode !== KeyCodes.Enter) {
            this.value = this._value.filter((t) => t !== tag);
            this.setCurrentNumberOfTags();
        }
    }
    focus() {
        var _a;
        (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();
    }
    setCurrentNumberOfTags() {
        this.currentNumberOfTags = this.value.length
            ? this.value.toString().split(',').length
            : 0;
    }
}
NgxInputTagComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInputTagComponent, deps: [{ token: NGX_INPUT_TAG_TAG_FORMATTER }], target: i0.ɵɵFactoryTarget.Component });
NgxInputTagComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxInputTagComponent, selector: "ngx-input-tag", inputs: { tagSuggestions: "tagSuggestions", maxTagLength: "maxTagLength", maxNumberOfTags: "maxNumberOfTags" }, outputs: { textChange: "textChange" }, host: { listeners: { "document:click": "handleClick($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NgxInputTagComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => NgxInputTagComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputElement", first: true, predicate: ["inputElement"], descendants: true }], ngImport: i0, template: "<div (click)=\"focus()\" class=\"ngx-input-tag\">\n  <div *ngFor=\"let tag of value\" class=\"ngx-input-tag__tag\">\n    {{tag}}\n    <button type=\"button\" (click)=\"removeTag(tag, $event)\">\n      &#10006;\n    </button>\n  </div>\n  <input type=\"text\" #inputElement aria-label=\"Tags\" [style.width]=\"inputElement.value.length * 10 + 10 + 'px'\" (keyup)=\"addTagEvent($event)\" (keydown)=\"preventDefaultTabBehavior($event)\"\n    class=\"ngx-input-tag__input\" />\n  <button type=\"button\" aria-label=\"Add Tag\" title=\"Add Tag\" (click)=\"addTagClick($event, inputElement.value)\" class=\"ngx-input-tag__btn\">\n    +\n  </button>\n</div>\n\n<div *ngIf=\"inputElement.value.length && tagSuggestions && tagSuggestions.length\" class=\"ngx-input-tag-suggestions\">\n  <button type=\"button\" (click)=\"addSuggestedTag(tag)\" *ngFor=\"let tag of tagSuggestions\" class=\"ngx-input-tag-suggestions__tag\">{{tag}}</button>\n</div>", styles: ["*,:after,:before{box-sizing:border-box}ngx-input-tag{display:inline-block;margin-bottom:12px;width:100%;--color-border:#dbdbdb;--color-background:#fff;--color-tag-close:#ccc;--color-add-button:#ccc;--color-add-button-background:#fff;--color-tag-suggestion-hover:#f2f2f2}.ngx-input-tag{padding:5px 80px 4.5px 4px;position:relative;margin-bottom:0;border:1px solid #dbdbdb;border:1px solid var(--color-border);background-color:#fff;background-color:var(--color-background);font-size:16px}.ngx-input-tag:focus{outline:initial}.ngx-input-tag__input{border:0;padding:4px 0;outline:none;width:8px;max-width:calc(100% + 70px);margin-left:4px;min-width:4px;margin-bottom:0;font-size:16px;min-height:29px}.ngx-input-tag__tag{display:inline-block;border:1px solid #dbdbdb;border:1px solid var(--color-border);padding:4px;margin-right:4px;border-radius:2px;height:29px;line-height:18px}.ngx-input-tag__tag button{background:#0000;border:0;cursor:pointer;color:var(--color-tag-close)}.ngx-input-tag__btn{position:absolute;width:50px;height:41px;color:#ccc;color:var(--color-add-button);background-color:#fff;background-color:var(--color-add-button-background);top:-1px;right:-1px;cursor:pointer;font-size:30px}.ngx-input-tag-suggestions,.ngx-input-tag__btn{border:1px solid #dbdbdb;border:1px solid var(--color-border)}.ngx-input-tag-suggestions{background-color:#fff;background-color:var(--color-background)}.ngx-input-tag-suggestions__tag{padding:10px 14px;border:0;background:#0000;display:block;cursor:pointer;width:100%;text-align:left}.ngx-input-tag-suggestions__tag:hover{background:#f2f2f2;background:var(--color-tag-suggestion-hover)}"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInputTagComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-input-tag',
                    templateUrl: './ngx-input-tag.component.html',
                    styleUrls: ['./ngx-input-tag.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NgxInputTagComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => NgxInputTagComponent),
                            multi: true,
                        },
                    ],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_INPUT_TAG_TAG_FORMATTER]
                }] }]; }, propDecorators: { inputElement: [{
                type: ViewChild,
                args: ['inputElement', { static: false }]
            }], tagSuggestions: [{
                type: Input
            }], maxTagLength: [{
                type: Input
            }], maxNumberOfTags: [{
                type: Input
            }], textChange: [{
                type: Output
            }], handleClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });
export function formatter(tag) {
    return tag
        .trim()
        .replace(/(\s|-)+/g, '-')
        .replace(/\,/g, '')
        .toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlucHV0LXRhZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaW5wdXQtdGFnL3NyYy9uZ3gtaW5wdXQtdGFnLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3Byb2plY3RzL25neC1pbnB1dC10YWcvc3JjL25neC1pbnB1dC10YWcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFVBQVUsRUFDVixTQUFTLEVBRVQsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04saUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsYUFBYSxFQUNiLGlCQUFpQixHQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFDTCwyQkFBMkIsR0FFNUIsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBRW5DLE1BQU0sQ0FBTixJQUFZLFFBVVg7QUFWRCxXQUFZLFFBQVE7SUFDbEIsaURBQWEsQ0FBQTtJQUNiLHFDQUFPLENBQUE7SUFDUCwwQ0FBVSxDQUFBO0lBQ1YsNENBQVcsQ0FBQTtJQUNYLGtEQUFjLENBQUE7SUFDZCw4Q0FBWSxDQUFBO0lBQ1osb0RBQWUsQ0FBQTtJQUNmLGtEQUFjLENBQUE7SUFDZCwyQ0FBVyxDQUFBO0FBQ2IsQ0FBQyxFQVZXLFFBQVEsS0FBUixRQUFRLFFBVW5CO0FBcUJELE1BQU0sT0FBTyxvQkFBb0I7SUFzQi9CLFlBQytDLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWGhFLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBQzlCLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ2IsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFbkQsV0FBTSxHQUFhLEVBQUUs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QUFLLEVBQUU7Z0JBQ25DLGNBQWM7c0JBQXRCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNhLFVBQVU7c0JBQTVCLE1BQU07Z0JBbUNQLFdBQVc7c0JBRFYsWUFBWTt1QkFBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7QUFrSDVDLE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBVztJQUNuQyxPQUFPLEdBQUc7U0FDUCxJQUFJLEVBQUU7U0FDTixPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQztTQUN4QixPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztTQUNsQixXQUFXLEVBQUUsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkLFxuICBJbmplY3QsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb250cm9sVmFsdWVBY2Nlc3NvcixcbiAgTkdfVkFMSURBVE9SUyxcbiAgTkdfVkFMVUVfQUNDRVNTT1IsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gIE5HWF9JTlBVVF9UQUdfVEFHX0ZPUk1BVFRFUixcbiAgVGFnRm9ybWF0dGVyLFxufSBmcm9tICcuL25neC1pbnB1dC10YWcuZGktdG9rZW5zJztcblxuZXhwb3J0IGVudW0gS2V5Q29kZXMge1xuICBCYWNrc3BhY2UgPSA4LFxuICBUYWIgPSA5LFxuICBFbnRlciA9IDEzLFxuICBFc2NhcGUgPSAyNyxcbiAgTGVmdEFycm93ID0gMzcsXG4gIFVwQXJyb3cgPSAzOCxcbiAgUmlnaHRBcnJvdyA9IDM5LFxuICBEb3duQXJyb3cgPSA0MCxcbiAgQ29tbWEgPSAxODgsXG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1pbnB1dC10YWcnLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LWlucHV0LXRhZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL25neC1pbnB1dC10YWcuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4SW5wdXRUYWdDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4SW5wdXRUYWdDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW5wdXRUYWdDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5vbkNoYW5nZSh2YWwpO1xuICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gIH1cblxuICBAVmlld0NoaWxkKCdpbnB1dEVsZW1lbnQnLCB7IHN0YXRpYzogZmFsc2UgfSkgaW5wdXRFbGVtZW50PzogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgdGFnU3VnZ2VzdGlvbnM6IHN0cmluZ1tdID0gW107XG4gIEBJbnB1dCgpIG1heFRhZ0xlbmd0aCA9IDI1O1xuICBASW5wdXQoKSBtYXhOdW1iZXJPZlRhZ3MgPSAxMDAwO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgdGV4dENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIHByZXZUYWdJbnB1dCA9ICcnO1xuICBwcml2YXRlIGN1cnJlbnROdW1iZXJPZlRhZ3MgPSAwO1xuICBwcml2YXRlIHRhZ0Vycm9yOiB7IG1lc3NhZ2U6IHN0cmluZyB9IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1hfSU5QVVRfVEFHX1RBR19GT1JNQVRURVIpIHByaXZhdGUgdGFnRm9ybWF0dGVyOiBUYWdGb3JtYXR0ZXJcbiAgKSB7fVxuXG4gIG9uQ2hhbmdlID0gKF92YWx1ZTogc3RyaW5nW10pID0+IHt9O1xuXG4gIG9uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogc3RyaW5nW10pID0+IHZvaWQpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcCgodikgPT4gdGhpcy50YWdGb3JtYXR0ZXIodikpO1xuICAgICAgdGhpcy5zZXRDdXJyZW50TnVtYmVyT2ZUYWdzKCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFnRXJyb3I7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50J10pXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgJiZcbiAgICAgICF0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiZcbiAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWVcbiAgICApIHtcbiAgICAgIHRoaXMuYWRkVGFnKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFRhZyh0YWc6IHN0cmluZykge1xuICAgIGNvbnN0IGZvcm1hdHRlZFRhZyA9IHRoaXMudGFnRm9ybWF0dGVyKHRhZyk7XG4gICAgY29uc3QgdGFnSXNFbXB0eSA9IGZvcm1hdHRlZFRhZy5sZW5ndGggPT09IDA7XG4gICAgY29uc3QgaW52YWxpZFRhZ0xlbmd0aCA9XG4gICAgICAhZm9ybWF0dGVkVGFnLmxlbmd0aCB8fFxuICAgICAgKHRoaXMubWF4VGFnTGVuZ3RoICYmIGZvcm1hdHRlZFRhZy5sZW5ndGggPiB0aGlzLm1heFRhZ0xlbmd0aCk7XG4gICAgY29uc3QgZHVwbGljYXRlVGFnID0gdGhpcy52YWx1ZS5pbmRleE9mKGZvcm1hdHRlZFRhZykgPiAtMTtcbiAgICBjb25zdCBleGNlZWRzTWF4TnVtYmVyT2ZUYWdzID1cbiAgICAgIHRoaXMuY3VycmVudE51bWJlck9mVGFncyA+IHRoaXMubWF4TnVtYmVyT2ZUYWdzO1xuXG4gICAgaWYgKCF0YWdJc0VtcHR5ICYmIGludmFsaWRUYWdMZW5ndGgpIHtcbiAgICAgIHRoaXMudGFnRXJyb3IgPSB7XG4gICAgICAgIG1lc3NhZ2U6IGBUYWcgbGVuZ3RoIGNhbm5vdCBleGNlZWQgJHt0aGlzLm1heFRhZ0xlbmd0aH0gY2hhcmFjdGVyc2AsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChkdXBsaWNhdGVUYWcpIHtcbiAgICAgIHRoaXMudGFnRXJyb3IgPSB7IG1lc3NhZ2U6ICdDYW5ub3QgYWRkIGR1cGxpY2F0ZSB0YWcnIH07XG4gICAgfVxuXG4gICAgaWYgKGV4Y2VlZHNNYXhOdW1iZXJPZlRhZ3MpIHtcbiAgICAgIGNvbnN0IHBsdXJhbCA9IHRoaXMubWF4TnVtYmVyT2ZUYWdzID09PSAxID8gJycgOiAncyc7XG4gICAgICB0aGlzLnRhZ0Vycm9yID0ge1xuICAgICAgICBtZXNzYWdlOiBgQ2Fubm90IGV4Y2VlZCAke3RoaXMubWF4TnVtYmVyT2ZUYWdzfSB0YWcke3BsdXJhbH1gLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhdGFnSXNFbXB0eSAmJlxuICAgICAgIWludmFsaWRUYWdMZW5ndGggJiZcbiAgICAgICFkdXBsaWNhdGVUYWcgJiZcbiAgICAgICFleGNlZWRzTWF4TnVtYmVyT2ZUYWdzICYmXG4gICAgICB0aGlzLmlucHV0RWxlbWVudFxuICAgICkge1xuICAgICAgdGhpcy50YWdFcnJvciA9IG51bGw7XG4gICAgICB0aGlzLnZhbHVlLnB1c2goZm9ybWF0dGVkVGFnKTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudE51bWJlck9mVGFncygpO1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxuXG4gIGFkZFRhZ0V2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIHRoaXMudGFnRXJyb3IgPSBudWxsO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgdGhpcy50ZXh0Q2hhbmdlLmVtaXQoaW5wdXQudmFsdWUpO1xuICAgIGlmIChcbiAgICAgIGV2ZW50LmtleUNvZGUgPT09IEtleUNvZGVzLkJhY2tzcGFjZSAmJlxuICAgICAgdGhpcy5wcmV2VGFnSW5wdXQubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICB0aGlzLl92YWx1ZS5wb3AoKTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudE51bWJlck9mVGFncygpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBldmVudC5rZXlDb2RlID09PSBLZXlDb2Rlcy5FbnRlciB8fFxuICAgICAgZXZlbnQua2V5Q29kZSA9PT0gS2V5Q29kZXMuQ29tbWEgfHxcbiAgICAgIGV2ZW50LmtleUNvZGUgPT09IEtleUNvZGVzLlRhYlxuICAgICkge1xuICAgICAgdGhpcy5hZGRUYWcoaW5wdXQudmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMucHJldlRhZ0lucHV0ID0gaW5wdXQudmFsdWU7XG4gIH1cblxuICBwcmV2ZW50RGVmYXVsdFRhYkJlaGF2aW9yKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtleUNvZGVzLlRhYiAmJiB0aGlzLnByZXZUYWdJbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFRhZ0NsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5hZGRUYWcodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFN1Z2dlc3RlZFRhZyh0YWc6IHN0cmluZykge1xuICAgIHRoaXMuYWRkVGFnKHRhZyk7XG4gIH1cblxuICByZW1vdmVUYWcodGFnOiBzdHJpbmcsIGV2ZW50OiBhbnkpIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gS2V5Q29kZXMuRW50ZXIpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl92YWx1ZS5maWx0ZXIoKHQpID0+IHQgIT09IHRhZyk7XG4gICAgICB0aGlzLnNldEN1cnJlbnROdW1iZXJPZlRhZ3MoKTtcbiAgICB9XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudD8ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgc2V0Q3VycmVudE51bWJlck9mVGFncygpIHtcbiAgICB0aGlzLmN1cnJlbnROdW1iZXJPZlRhZ3MgPSB0aGlzLnZhbHVlLmxlbmd0aFxuICAgICAgPyB0aGlzLnZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJywnKS5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0dGVyKHRhZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRhZ1xuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvKFxcc3wtKSsvZywgJy0nKVxuICAgIC5yZXBsYWNlKC9cXCwvZywgJycpXG4gICAgLnRvTG93ZXJDYXNlKCk7XG59XG4iLCI8ZGl2IChjbGljayk9XCJmb2N1cygpXCIgY2xhc3M9XCJuZ3gtaW5wdXQtdGFnXCI+XG4gIDxkaXYgKm5nRm9yPVwibGV0IHRhZyBvZiB2YWx1ZVwiIGNsYXNzPVwibmd4LWlucHV0LXRhZ19fdGFnXCI+XG4gICAge3t0YWd9fVxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJyZW1vdmVUYWcodGFnLCAkZXZlbnQpXCI+XG4gICAgICAmIzEwMDA2O1xuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgI2lucHV0RWxlbWVudCBhcmlhLWxhYmVsPVwiVGFnc1wiIFtzdHlsZS53aWR0aF09XCJpbnB1dEVsZW1lbnQudmFsdWUubGVuZ3RoICogMTAgKyAxMCArICdweCdcIiAoa2V5dXApPVwiYWRkVGFnRXZlbnQoJGV2ZW50KVwiIChrZXlkb3duKT1cInByZXZlbnREZWZhdWx0VGFiQmVoYXZpb3IoJGV2ZW50KVwiXG4gICAgY2xhc3M9XCJuZ3gtaW5wdXQtdGFnX19pbnB1dFwiIC8+XG4gIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGFyaWEtbGFiZWw9XCJBZGQgVGFnXCIgdGl0bGU9XCJBZGQgVGFnXCIgKGNsaWNrKT1cImFkZFRhZ0NsaWNrKCRldmVudCwgaW5wdXRFbGVtZW50LnZhbHVlKVwiIGNsYXNzPVwibmd4LWlucHV0LXRhZ19fYnRuXCI+XG4gICAgK1xuICA8L2J1dHRvbj5cbjwvZGl2PlxuXG48ZGl2ICpuZ0lmPVwiaW5wdXRFbGVtZW50LnZhbHVlLmxlbmd0aCAmJiB0YWdTdWdnZXN0aW9ucyAmJiB0YWdTdWdnZXN0aW9ucy5sZW5ndGhcIiBjbGFzcz1cIm5neC1pbnB1dC10YWctc3VnZ2VzdGlvbnNcIj5cbiAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cImFkZFN1Z2dlc3RlZFRhZyh0YWcpXCIgKm5nRm9yPVwibGV0IHRhZyBvZiB0YWdTdWdnZXN0aW9uc1wiIGNsYXNzPVwibmd4LWlucHV0LXRhZy1zdWdnZXN0aW9uc19fdGFnXCI+e3t0YWd9fTwvYnV0dG9uPlxuPC9kaXY+Il19