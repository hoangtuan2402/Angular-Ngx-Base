import { forwardRef, Component, Input, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const starIcons = {
    outline: 'outline',
    full: 'full',
    half: 'half',
};
export class NgxInputStarRatingComponent {
    constructor() {
        this._value = 0;
        this.count = 5;
        this.disabled = false;
        this.starIcons = starIcons;
        this.buttons = [];
        // tslint:disable-next-line:no-empty
        this.onChange = (_value) => { };
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.valueUpdate(this._value);
        this.onTouched();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.value) {
            this.value = value;
        }
    }
    ngOnInit() {
        for (let i = 0; i < this.count; i++) {
            this.buttons.push({ active: false, icon: starIcons.outline });
        }
        this.valueUpdate(this.value);
    }
    ngOnChanges(changes) {
        if (changes.value && changes.value.currentValue) {
            this.valueUpdate(changes.value.currentValue);
        }
    }
    rate(index) {
        this.buttons.forEach((btn, i) => {
            if (i <= index) {
                btn.icon = starIcons.full;
            }
            else {
                btn.icon = starIcons.outline;
            }
        });
        const total = this.buttons.reduce((prev, next) => {
            if (next.icon === starIcons.full) {
                return prev + 1;
            }
            else {
                return prev;
            }
        }, 0);
        this.value = total;
    }
    mouseEnter(index) {
        this.buttons.forEach((btn, i) => {
            if (i <= index) {
                btn.active = true;
            }
            else {
                btn.active = false;
            }
        });
    }
    mouseLeave() {
        this.buttons.forEach((i) => (i.active = false));
    }
    valueUpdate(value) {
        this.buttons.forEach((btn, i) => {
            const starValue = i + 1;
            if (value >= starValue) {
                btn.icon = starIcons.full;
            }
            if (value >= starValue - 0.5 && value < starValue) {
                btn.icon = starIcons.half;
            }
        });
    }
}
NgxInputStarRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInputStarRatingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxInputStarRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxInputStarRatingComponent, selector: "ngx-input-star-rating", inputs: { _value: ["value", "_value"], count: "count", disabled: "disabled" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NgxInputStarRatingComponent),
            multi: true,
        },
    ], usesOnChanges: true, ngImport: i0, template: "<div class=\"ngx-input-rating\" (mouseleave)=\"mouseLeave()\">\n  <button type=\"button\" [disabled]=\"disabled\" *ngFor=\"let btn of buttons; let i = index\" class=\"ngx-input-rating__btn\" (click)=\"rate(i)\" [attr.aria-label]=\"'rate ' + (i + 1) + ' of ' + buttons.length\"\n    (mouseenter)=\"mouseEnter(i)\" class=\"ngx-input-star-rating__btn\">\n    <span *ngIf=\"btn.active || btn.icon === starIcons.full\" class=\"ngx-input-star-rating__full\">\n      <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n    </span>\n    <ng-container *ngIf=\"!btn.active\">\n      <span *ngIf=\"btn.icon === starIcons.half\" class=\"ngx-input-star-rating__half\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n        <svg height=\"25\" width=\"10\" class=\"ngx-input-star-rating__star-half\">\n          <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n        </svg>\n      </span>\n      <span *ngIf=\"btn.icon !== starIcons.full && btn.icon !== starIcons.half\" class=\"empty\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n      </span>\n    </ng-container>\n  </button>\n</div>\n\n<ng-template #star>\n  <svg height=\"25\" width=\"23\" class=\"ngx-input-star-rating__star\">\n    <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n  </svg>\n</ng-template>", styles: ["*,:after,:before{box-sizing:border-box}ngx-input-star-rating{display:inline-block;--color-star-default:#ccc;--color-star-highlight:#3d3d3d}.ngx-input-star-rating__star{fill:#ccc;fill:var(--color-star-default)}.ngx-input-star-rating__btn{background-color:initial;border:0;cursor:pointer;position:relative;width:30px;height:25px}.ngx-input-star-rating__btn svg{position:absolute;top:0;left:5px}.ngx-input-star-rating__full .ngx-input-star-rating__star,.ngx-input-star-rating__half .ngx-input-star-rating__star-half{fill:#3d3d3d;fill:var(--color-star-highlight)}"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxInputStarRatingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-input-star-rating',
                    templateUrl: './ngx-input-star-rating.component.html',
                    styleUrls: ['./ngx-input-star-rating.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NgxInputStarRatingComponent),
                            multi: true,
                        },
                    ],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { _value: [{
                type: Input,
                args: ['value']
            }], count: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,