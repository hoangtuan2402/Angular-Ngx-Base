"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
function runExecutor(options, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        options.debug && console.log('Prepare Compodoc...\n', options);
        const project = context.workspace.projects[context.projectName];
        const args = toCompodocOptions(options, context);
        const cwd = options.workspaceDocs
            ? context.root
            : (0, devkit_1.joinPathFragments)(context.root, project.root);
        const cmd = (0, path_1.relative)(cwd, (0, devkit_1.joinPathFragments)(context.root, 'node_modules', '.bin', 'compodoc'));
        const cmdArgs = toArguments(args);
        const cmdOpts = { cwd, shell: true };
        if (options.watch && options.exportFormat === 'json') {
            createInitialCompodocJson(args);
        }
        return new Promise((resolve) => {
            let childProcess;
            if (options.watch && options.workspaceDocs) {
                const _cmd = `${(0, devkit_1.getPackageManagerCommand)().exec} nodemon`;
                const _cmdArgs = [
                    '--ignore dist',
                    '--ext ts',
                    `--exec "${cmd} ${cmdArgs
                        .filter((arg) => !arg.startsWith('--watch'))
                        .join(' ')}"`,
                ];
                options.debug &&
                    console.log('Spawn Compodoc in nodemon...', {
                        command: _cmd,
                        arguments: _cmdArgs,
                        options: cmdOpts,
                    });
                childProcess = (0, child_process_1.spawn)(_cmd, _cmdArgs, cmdOpts);
            }
            else {
                options.debug &&
                    console.log('Spawn Compodoc...', {
                        command: cmd,
                        arguments: cmdArgs,
                        options: cmdOpts,
                    });
                childProcess = (0, child_process_1.spawn)(cmd, cmdArgs, cmdOpts);
            }
            process.on('exit', () => childProcess.kill());
            process.on('SIGTERM', () => childProcess.kill());
            childProcess.stdout.on('data', (data) => {
                console.info(data.toString());
            });
            childProcess.stderr.on('data', (data) => {
                console.error(data.toString());
            });
            childProcess.on('close', (code) => {
                resolve({ success: code === 0 });
            });
        });
    });
}
exports.default = runExecutor;
function toCompodocOptions(options, context) {
    var _a, _b, _c, _d;
    const _ = [options, context];
    const project = context.workspace.projects[context.projectName];
    (_a = options.tsConfig) !== null && _a !== void 0 ? _a : (options.tsConfig = `${project.root}/tsconfig.json`);
    (_b = options.outputPath) !== null && _b !== void 0 ? _b : (options.outputPath = `dist/compodoc/${context.projectName}`);
    return {
        tsconfig: toRelativePath(options.tsConfig, ..._),
        output: toRelativePath(options.outputPath, ..._),
        exportFormat: options.exportFormat,
        minimal: options.exportFormat === 'json',
        name: options.name ||
            (options.workspaceDocs
                ? (0, devkit_1.readJsonFile)('package.json').name
                : context.projectName),
        includes: options.workspaceDocs
            ? createIncludesForWorkspace(..._)
            : toRelativePath(options.includes, ..._),
        includesName: options.includesName || (options.workspaceDocs ? 'Projects' : undefined),
        assetsFolder: toRelativePath(options.assetsFolder, ..._),
        unitTestCoverage: toRelativePath(options.unitTestCoverage, ..._),
        disableCoverage: options.disableCoverage,
        disableSourceCode: options.disableSourceCode,
        disableDomTree: options.disableDomTree,
        disableTemplateTab: options.disableTemplateTab,
        disableStyleTab: options.disableStyleTab,
        disableGraph: options.disableGraph,
        disablePrivate: options.disablePrivate,
        disableProtected: options.disableProtected,
        disableInternal: options.disableInternal,
        disableLifeCycleHooks: options.disableLifeCycleHooks,
        disableRoutesGraph: options.disableRoutesGraph,
        disableSearch: options.disableSearch,
        disableDependencies: options.disableDependencies,
        language: options.language,
        theme: options.theme,
        extTheme: toRelativePath(options.extTheme, ..._),
        templates: toRelativePath(options.templates, ..._),
        customLogo: toRelativePath(options.customLogo, ..._),
        customFavicon: toRelativePath(options.customFavicon, ..._),
        hideGenerator: options.hideGenerator,
        serve: (_c = options.serve) !== null && _c !== void 0 ? _c : options.watch,
        port: options.serve ? options.port : undefined,
        watch: options.watch,
        silent: (_d = options.silent) !== null && _d !== void 0 ? _d : (!options.serve && !options.watch),
    };
}
function createIncludesForWorkspace(options, context) {
    const tmpDirectory = (0, fs_1.mkdtempSync)((0, path_1.join)((0, os_1.tmpdir)(), 'compodoc-includes-'));
    (0, fs_1.writeFileSync)((0, path_1.join)(tmpDirectory, 'summary.json'), JSON.stringify(Object.entries(context.workspace.projects)
        .map(([projectName, project]) => {
        const readmeFile = (0, path_1.join)(project.root, 'README.md');
        return { projectName, readmeFile };
    })
        .filter(({ readmeFile }) => (0, fs_1.existsSync)(readmeFile))
        .map(({ projectName, readmeFile }) => {
        const tmpFilename = `${projectName}.md`;
        (0, fs_1.copyFileSync)(readmeFile, (0, path_1.join)(tmpDirectory, tmpFilename));
        return { title: projectName, file: tmpFilename };
    })));
    return (0, path_1.relative)(context.root, tmpDirectory);
}
function toRelativePath(pathInWorkspace, options, context) {
    if (!pathInWorkspace) {
        return undefined;
    }
    const project = context.workspace.projects[context.projectName];
    const currentDirectory = options.workspaceDocs
        ? context.root
        : (0, devkit_1.joinPathFragments)(context.root, project.root);
    const absolutePath = (0, path_1.resolve)(context.root, pathInWorkspace);
    return (0, path_1.relative)(currentDirectory, absolutePath);
}
function toArguments(options) {
    return Object.entries(options)
        .filter(([, value]) => !!value)
        .reduce((args, [key, value]) => {
        let arg = `--${key}`;
        if (typeof value !== 'boolean') {
            arg += `="${value}"`;
        }
        return [...args, arg];
    }, []);
}
function createInitialCompodocJson(args) {
    (0, fs_1.mkdirSync)(args.output, { recursive: true });
    (0, fs_1.writeFileSync)((0, path_1.join)(args.output, 'documentation.json'), JSON.stringify({
        pipes: [],
        interfaces: [],
        injectables: [],
        guards: [],
        interceptors: [],
        classes: [],
        directives: [],
        components: [],
        modules: [],
        miscellaneous: {
            variables: [],
            functions: [],
            typealiases: [],
            enumerations: [],
            groupedVariables: {},
            groupedFunctions: {},
            groupedEnumerations: {},
            groupedTypeAliases: {},
        },
    }));
}
//# sourceMappingURL=executor.js.map