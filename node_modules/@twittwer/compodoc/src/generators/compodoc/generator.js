"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
function runGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const _init = init(tree);
        const workspaceLayout = (0, devkit_1.getWorkspaceLayout)(tree);
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const tsconfig = determineTsconfigFile(tree, options, workspaceLayout, projectConfiguration);
        projectConfiguration.targets.compodoc = {
            executor: '@twittwer/compodoc:compodoc',
            options: {
                tsConfig: (0, devkit_1.joinPathFragments)(projectConfiguration.root, tsconfig),
                outputPath: (0, devkit_1.joinPathFragments)('dist', 'compodoc', options.project),
            },
            configurations: { json: { exportFormat: 'json' } },
        };
        if (options.workspaceDocs) {
            projectConfiguration.targets.compodoc.options.workspaceDocs = true;
        }
        (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfiguration);
        yield (0, devkit_1.formatFiles)(tree);
        return _init;
    });
}
exports.default = runGenerator;
function init(tree) {
    var _a, _b;
    const install = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { '@compodoc/compodoc': '^1.1.15' });
    const workspaceConfiguration = (0, devkit_1.readWorkspaceConfiguration)(tree);
    if (((_b = (_a = workspaceConfiguration.tasksRunnerOptions) === null || _a === void 0 ? void 0 : _a.default) === null || _b === void 0 ? void 0 : _b.runner) ===
        '@nrwl/workspace/tasks-runners/default') {
        workspaceConfiguration.tasksRunnerOptions.default.options =
            workspaceConfiguration.tasksRunnerOptions.default.options || {};
        workspaceConfiguration.tasksRunnerOptions.default.options.cacheableOperations =
            workspaceConfiguration.tasksRunnerOptions.default.options
                .cacheableOperations || [];
        if (!workspaceConfiguration.tasksRunnerOptions.default.options.cacheableOperations.includes('compodoc')) {
            workspaceConfiguration.tasksRunnerOptions.default.options.cacheableOperations.push('compodoc');
            (0, devkit_1.updateWorkspaceConfiguration)(tree, workspaceConfiguration);
        }
    }
    return install;
}
function determineTsconfigFile(tree, options, { appsDir, libsDir }, projectConfiguration) {
    const tsconfig = [
        'tsconfig.compodoc.json',
        ...{
            application: ['tsconfig.editor.json', 'tsconfig.app.json'],
            library: ['tsconfig.lib.json'],
        }[projectConfiguration.projectType],
        'tsconfig.json',
    ].find((tsconfig) => tree.exists((0, path_1.join)(projectConfiguration.root, tsconfig)));
    if (!tsconfig) {
        throw new Error(`Missing tsconfig: Cannot find a "tsconfig[.(compodoc|lib|editor|app)].json" file in "${projectConfiguration.root}".`);
    }
    if (options.workspaceDocs && tsconfig !== 'tsconfig.compodoc.json') {
        const includes = [...new Set([appsDir, libsDir])].map((dir) => `${(0, devkit_1.offsetFromRoot)(projectConfiguration.root)}${dir}/**/*.ts`);
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, 'files'), projectConfiguration.root, {
            tsconfigBase: `./${tsconfig}`,
            includes: includes,
            tpl: '',
        });
        return 'tsconfig.compodoc.json';
    }
    return tsconfig;
}
//# sourceMappingURL=generator.js.map